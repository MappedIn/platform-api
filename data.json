{
    "project": {
        "name": "The Mappedin Web SDK",
        "description": "An easy way to render beautiful 2D or 3D maps on your website, powered by Mappedin",
        "version": "1.21.1",
        "url": "https://github.com/MappedIn/platform-api",
        "primaryColor": "#ff5000",
        "indexModule": "Mappedin"
    },
    "files": {
        "docs/assets/vendor/github-slugger/slugger.js": {
            "name": "docs/assets/vendor/github-slugger/slugger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js": {
            "name": "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "mappedin-docs-theme/helpers/helpers.js": {
            "name": "mappedin-docs-theme/helpers/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/externals/MTLLoader.js": {
            "name": "source/externals/MTLLoader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/externals/OBJLoader.js": {
            "name": "source/externals/OBJLoader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/externals/promise.js": {
            "name": "source/externals/promise.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Analytics.js": {
            "name": "source/Mappedin.Analytics.js",
            "modules": {},
            "classes": {
                "Analytics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.CameraControls.js": {
            "name": "source/Mappedin.CameraControls.js",
            "modules": {},
            "classes": {
                "CameraControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapView.js": {
            "name": "source/Mappedin.MapView.js",
            "modules": {},
            "classes": {
                "MapView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapView2D.js": {
            "name": "source/Mappedin.MapView2D.js",
            "modules": {},
            "classes": {
                "MapView2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapView3D.js": {
            "name": "source/Mappedin.MapView3D.js",
            "modules": {},
            "classes": {
                "MapView3D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Search.js": {
            "name": "source/Mappedin.Search.js",
            "modules": {},
            "classes": {
                "Search": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.getVenue.js": {
            "name": "source/Mappedin.getVenue.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Mappedin-node.js": {
            "name": "Mappedin-node.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Mappedin-web.js": {
            "name": "Mappedin-web.js",
            "modules": {
                "Mappedin": 1
            },
            "classes": {
                "Mappedin": 1,
                "Easing": 1,
                "Tween": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "service-worker.js": {
            "name": "service-worker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Mappedin": {
            "name": "Mappedin",
            "submodules": {},
            "elements": {},
            "classes": {
                "Analytics": 1,
                "CameraControls": 1,
                "MapView": 1,
                "MapView2D": 1,
                "MapView3D": 1,
                "Search": 1,
                "Mappedin": 1,
                "Easing": 1,
                "Tween": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "Mappedin-web.js",
            "line": 31,
            "description": "The base Mappedin module, that has references to all the other Mappedin objects you need.\n\nStart with Mappedin.initalize, which will get the data for a Venue from the Mappedin API, and set up a MapView, Search, and Analytics object for you.",
            "itemtype": "main"
        }
    },
    "classes": {
        "Analytics": {
            "name": "Analytics",
            "shortname": "Analytics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Analytics.js",
            "line": 4,
            "description": "A class to access the Mappedin Analyitcs platform. Correct usage will improve Smart Search results, and lead to more accurate insights.\nThis will be created for you as part of Mappedin.initialize, but you can also create one manually. You are mostly going to use `locationSelected`.",
            "params": [
                {
                    "name": "options",
                    "description": "A list of configuration options for the Analytics API.",
                    "type": "Object"
                }
            ]
        },
        "CameraControls": {
            "name": "CameraControls",
            "shortname": "CameraControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.CameraControls.js",
            "line": 3,
            "description": "The advanced, manual camera controls for MapView. You probably don't need to use this at all, instead relying on the MapView's focusOn*, resetCamera and built in touch/mouse controls.\nThis class will let you do things like change the min/max zoom, tilt, and pan, attach to camera events, and move/animate the camera to specifc points.\n\nThe camera works by setting an anchor point on the scene at ground level and pointing the camera at it. Zoom controls how far the camera is from the anchor, and tilt/rotate controls the angle the camera is rotated about it.\nThe camera will always be pointed directly at the anchor point. Pan or setPosition will move that anchor around on the 2D ground plane.\n\nCreated for you automatically with a MapView, don't re-create yourself.",
            "is_constructor": 1
        },
        "MapView": {
            "name": "MapView",
            "shortname": "MapView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapView.js",
            "line": 4,
            "description": "The base MapView. This will either be 2D or 3D. Make sure you run one of Mappedin.test3D, .forceTest, .force2D or .force3D before you try an instantiate one.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The div to place the MapView in",
                    "type": "Div"
                },
                {
                    "name": "venue",
                    "description": "The results from the Mappedin API that powers this MapView",
                    "type": "Venue"
                },
                {
                    "name": "options",
                    "description": "Some options the MapView can use.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "antialias",
                            "description": "Controls whether antialiasing is on. Defaults to true, as long as devicePixelRatio is 1. This is very expensive on high resolution screens.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "onDataLoaded",
                            "description": "A callback executed with the 3D files have been downloaded for the first map, and are starting to load into memory. The mapview is fully functional at this point, but some things will still be popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFirstMapLoaded",
                            "description": "A callback executed when the first map is fully loaded. This means onDataLoaded has already been fired (if specified) and then all the textures and other resources have finished popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "firstMap",
                            "description": "If you don't want to load the default map first, set the map you want to load first here. Useful for deep linking to a certain floor/locaiton. Since you won't have the Map object/ID until you get the Mappedin Venue data, there is a callback you can set on Mappedin.initalize to fill this in.",
                            "type": "Map",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "MapView2D": {
            "name": "MapView2D",
            "shortname": "MapView2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapView2D.js",
            "line": 13,
            "description": "The MapView class, but in 2D. A number of these functions don't actually do anything in 2D at the moment.",
            "extends": "MapView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The div to place the MapView in",
                    "type": "Div"
                },
                {
                    "name": "venue",
                    "description": "The results from the Mappedin API that powers this MapView",
                    "type": "Venue"
                },
                {
                    "name": "options",
                    "description": "Some options the MapView can use.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "onDataLoaded",
                            "description": "A callback executed with the 3D files have been downloaded for the first map, and are starting to load into memory. The mapview is fully functional at this point, but some things will still be popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFirstMapLoaded",
                            "description": "A callback executed when the first map is fully loaded. This means onDataLoaded has already been fired (if specified) and then all the textures and other resources have finished popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "firstMap",
                            "description": "If you don't want to load the default map first, set the map you want to load first here. Useful for deep linking to a certain floor/locaiton. Since you won't have the Map object/ID until you get the Mappedin Venue data, there is a callback you can set on Mappedin.initalize to fill this in.",
                            "type": "Map",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "MapView3D": {
            "name": "MapView3D",
            "shortname": "MapView3D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapView3D.js",
            "line": 26,
            "description": "A 3D version MapView. Requires WebGL to run, and supports full camera pan/tilt/rotation.",
            "extends": "MapView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The div to place the MapView in",
                    "type": "Div"
                },
                {
                    "name": "venue",
                    "description": "The results from the Mappedin API that powers this MapView",
                    "type": "Venue"
                },
                {
                    "name": "options",
                    "description": "Some options the MapView can use.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "alpha",
                            "description": "True if the `opacity` argument to `setBackgroundColor` should be considered.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "antialias",
                            "description": "Controls whether antialiasing is on. Defaults to true, as long as devicePixelRatio is 1. This is very expensive on high resolution screens.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "backgroundColor",
                            "description": "Sets the initial background color of the map, including while loading.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "backgroundAlpha",
                            "description": "The opacity of the initial background color.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "onDataLoaded",
                            "description": "A callback executed with the 3D files have been downloaded for the first map, and are starting to load into memory. The mapview is fully functional at this point, but some things will still be popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFirstMapLoaded",
                            "description": "A callback executed when the first map is fully loaded. This means onDataLoaded has already been fired (if specified) and then all the textures and other resources have finished popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "disableHover",
                            "description": "If you would like to completely disable the hover effect (if you are on a touch screen for example), set this to true.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "firstMap",
                            "description": "If you don't want to load the default map first, set the map you want to load first here. Useful for deep linking to a certain floor/locaiton. Since you won't have the Map object/ID until you get the Mappedin Venue data, there is a callback you can set on Mappedin.initalize to fill this in.",
                            "type": "Map",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Search": {
            "name": "Search",
            "shortname": "Search",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Search.js",
            "line": 2,
            "description": "A class to access the Mappedin Smart Search API. This will be created for you as part of Mappedin.initialize, but you can also create one manually.",
            "params": [
                {
                    "name": "options",
                    "description": "A list of configuration options for the search API.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "The venue slug to search for",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "description": "Your search key",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "secret",
                            "description": "Your search secret",
                            "type": "Stromg",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Mappedin": {
            "name": "Mappedin",
            "shortname": "Mappedin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "namespace": "",
            "file": "Mappedin-web.js",
            "line": 44,
            "description": "Contains the functions you need to start the MapView. Typically you will just use `Mappedin.initialize`, which does all this for you, but for special cases your flow should look like this:\n 1. One of Mappedin.test3D (typcial), .forceTest, .force3D, or .force2D to put the MapView into either 2D or 3D mode.\n 2. Mappedin.init to download all of the data you need from the Mappedin API\n 3. new Mappedin.MapView, which will create the MapView and display the default map.\n\nEach of those functions has a callback which you should use to trigger the next step. Once you get the final callback from the MapView\nconstructor, you can hide any loading screen UI and do whatever you want.",
            "static": 1
        },
        "Easing": {
            "name": "Easing",
            "shortname": "Easing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "namespace": "",
            "file": "Mappedin-web.js",
            "line": 22,
            "description": "The easing curves you can use for any animation (path drawing, camera movement, etc.)\nSee [tween.js](http://tweenjs.github.io/tween.js/examples/03_graphs.html) for your options.",
            "static": 1
        },
        "Tween": {
            "name": "Tween",
            "shortname": "Tween",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "namespace": "",
            "file": "Mappedin-web.js",
            "line": 31,
            "description": "The Tween class from [Tween.js](https://github.com/tweenjs/tween.js). Exposed so you can create your own custom tweens.",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "docs/assets/vendor/github-slugger/slugger.js",
            "line": 12,
            "description": "Generate a unique slug.",
            "params": [
                {
                    "name": "value",
                    "description": "String of text to slugify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A unique slug string",
                "type": "String"
            },
            "class": "Analytics"
        },
        {
            "file": "docs/assets/vendor/github-slugger/slugger.js",
            "line": 37,
            "description": "Reset - Forget all previous slugs",
            "return": {
                "description": "void"
            },
            "class": "Analytics"
        },
        {
            "file": "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js",
            "line": 12,
            "description": "Generate a unique slug.",
            "params": [
                {
                    "name": "value",
                    "description": "String of text to slugify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A unique slug string",
                "type": "String"
            },
            "class": "Analytics"
        },
        {
            "file": "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js",
            "line": 37,
            "description": "Reset - Forget all previous slugs",
            "return": {
                "description": "void"
            },
            "class": "Analytics"
        },
        {
            "file": "mappedin-docs-theme/helpers/helpers.js",
            "line": 55,
            "description": "Hack for:\nhttps://github.com/yui/yuidoc/issues/198\n\nUsage:\n  {{#crossLinkWrapper type}}{{#crossLink type}}{{/crossLink}}{{/crossLinkWrapper}}",
            "class": "Analytics"
        },
        {
            "file": "source/externals/MTLLoader.js",
            "line": 1,
            "description": "Loads a Wavefront .mtl file specifying materials",
            "author": "angelxuanchang",
            "class": "Analytics"
        },
        {
            "file": "source/externals/MTLLoader.js",
            "line": 59,
            "description": "Parses loaded MTL file",
            "params": [
                {
                    "name": "text",
                    "description": "- Content of MTL file"
                }
            ],
            "return": {
                "description": "",
                "type": "THREE.MTLLoader.MaterialCreator"
            },
            "class": "Analytics"
        },
        {
            "file": "source/externals/MTLLoader.js",
            "line": 125,
            "description": "Create a new THREE-MTLLoader.MaterialCreator",
            "params": [
                {
                    "name": "baseUrl",
                    "description": "- Url relative to which textures are loaded"
                },
                {
                    "name": "options",
                    "description": "- Set of options on how to construct the materials\n                 side: Which side to apply the material\n                       THREE.FrontSide (default), THREE.BackSide, THREE.DoubleSide\n                 wrap: What type of wrapping to apply for textures\n                       THREE.RepeatWrapping (default), THREE.ClampToEdgeWrapping, THREE.MirroredRepeatWrapping\n                 normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n                               Default: false, assumed to be already normalized\n                 ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n                                 Default: false"
                }
            ],
            "is_constructor": 1,
            "class": "Analytics"
        },
        {
            "file": "source/externals/OBJLoader.js",
            "line": 1,
            "author": "mrdoob / http://mrdoob.com/",
            "class": "Analytics"
        },
        {
            "file": "source/externals/promise.js",
            "line": 197,
            "description": "Configuration parameter: time in milliseconds after which a\npending AJAX request is considered unresponsive and is\naborted. Useful to deal with bad connectivity (e.g. on a\nmobile network). A 0 value disables AJAX timeouts.\n\nAborted requests resolve the promise with a ETIMEOUT error\ncode.",
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 63,
            "description": "Whenever a location is selected, you should fire this event. What \"selected\" means can vary by venue,\nbut a good rule of thumb is that you fire the event whenever you would show the location's details.\nTypically this is when the user taps it's polygon on the map, picks it from search results or a category list.\nor deep links directly into the map.",
            "itemtype": "method",
            "name": "locationSelected",
            "params": [
                {
                    "name": "location",
                    "description": "The location the user selected.",
                    "type": "Location"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 77,
            "description": "Whenever a category is selected, you should fire this event.",
            "itemtype": "method",
            "name": "categorySelected",
            "params": [
                {
                    "name": "category",
                    "description": "The category the user selected.",
                    "type": "Category"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 93,
            "description": "Whenever a user requests directions, you should fire this event.",
            "itemtype": "method",
            "name": "getDirections",
            "params": [
                {
                    "name": "start",
                    "description": "The start location for wayfinding.",
                    "type": "Location"
                },
                {
                    "name": "end",
                    "description": "The end location for wayfinding.",
                    "type": "Location"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 25,
            "description": "Factor that controls how fast zooming in and out happens in response to mouse wheel events",
            "itemtype": "property",
            "name": "zoomSpeed",
            "type": "Float",
            "default": "5.0",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 33,
            "description": "Factor to multiple mouse movement by to get tilt/rotation.",
            "itemtype": "property",
            "name": "rotateSpeed",
            "type": "Float",
            "default": "100",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 41,
            "description": "Disable or re-enable user input.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 49,
            "description": "Disable or re-enable user zoom.",
            "itemtype": "property",
            "name": "enableZoom",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 57,
            "description": "Disable or re-enable user pan.",
            "itemtype": "property",
            "name": "enablePan",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 65,
            "description": "Disable or re-enable user tilt/rotation.",
            "itemtype": "property",
            "name": "enableRotate",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 73,
            "description": "This is actually the minium distance the camera can get from it's anchor on the ground. May be worth changing if your map has very tall buildings to avoid the camera clipping through them.",
            "itemtype": "property",
            "name": "minZoom",
            "type": "Number",
            "default": "750",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 81,
            "description": "Maximum distance the camera can get from it's anchor on the ground. Setting this too high will result in parts of the map falling out of the camera's clipping plane and disappearing.",
            "itemtype": "property",
            "name": "maxZoom",
            "type": "Number",
            "default": "10000",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 89,
            "description": "Multiplier for min and max zoom, for convenience.",
            "itemtype": "property",
            "name": "zoomFactor",
            "type": "Number",
            "default": "1",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 97,
            "description": "Constrains the camera from panning to far away from the scene. It's set automatically based on the size of the map.\nIf you want to change anything, you probably want to change the margin property, which is the factor the min and max in\neach dimension are multiplied by to give the true bounds. For example, on a truely huge venue a 1.25 margin could get you\nway out into space when zoomed in.",
            "itemtype": "property",
            "name": "panBounds",
            "type": "Object",
            "class": "CameraControls",
            "subprops": [
                {
                    "name": "margin",
                    "description": "The factor the multiply the size of the geometery by to give the true camera bounds",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "An x, y pair representing the bounds of one corner of the map.",
                    "type": "Object"
                },
                {
                    "name": "max",
                    "description": "An x, y pair representing the bounds of the other corner of the map.",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 120,
            "description": "Minium camera tilt, in radians. If it's anything other than 0, you won't be able to look at the venue from the top down perspective.",
            "itemtype": "property",
            "name": "minTilt",
            "type": "Number",
            "default": "0.0",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 128,
            "description": "Minium camera tilt, in radians. If you set it too high, the camera will be able to tilt down through the geometery of the scene, which will produce clipping issues.",
            "itemtype": "property",
            "name": "maxTilt",
            "type": "Number",
            "default": "1.2",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 136,
            "description": "If you would really prefer to pan with the right mouse button and tilt/rotate with the left, you can swap the values here to achieve that.",
            "itemtype": "property",
            "name": "mouseButtons",
            "type": "Object",
            "class": "CameraControls",
            "subprops": [
                {
                    "name": "ORBIT=THREE.MOUSE.RIGHT",
                    "description": "The button to use for tilt/rotation. Defaults to `THREE.MOUSE.RIGHT`",
                    "type": "THREE.MOUSE"
                },
                {
                    "name": "ZOOM=THREE.MOUSE.MIDDLE",
                    "description": "The button to use for zoom behaviour. Don't change this.",
                    "type": "THREE.MOUSE"
                },
                {
                    "name": "PAN=THREE.MOUSE.LEFT",
                    "description": "The button to use for panning the camera. Defaults to `THREE.MOUSE.LEFT`",
                    "type": "THREE.MOUSE"
                }
            ]
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 189,
            "description": "Camera events you can attach a listener to (with `controls.addListener(event, function)`), if you want to do certain things. They'll be fired both by touch events and by functions you can call yourself like pan() and tilt()/",
            "itemtype": "property",
            "name": "CAMERA_EVENTS",
            "type": "Object",
            "final": 1,
            "class": "CameraControls",
            "subprops": [
                {
                    "name": "CHANGE_EVENT",
                    "description": "Fired whenever the camera changes",
                    "type": "Object"
                },
                {
                    "name": "PAN_START_EVENT",
                    "description": "Fired when the camera starts panning",
                    "type": "Object"
                },
                {
                    "name": "PAN_END_EVENT",
                    "description": "Fired when the camera finishes panning",
                    "type": "Object"
                },
                {
                    "name": "ROTATE_START_EVENT",
                    "description": "Fired when the camera starts rotating",
                    "type": "Object"
                },
                {
                    "name": "ROTATE_END_EVENT",
                    "description": "Fired when the camera stops rotating",
                    "type": "Object"
                },
                {
                    "name": "ZOOM_START_EVENT",
                    "description": "Fired when the camera starts zooming",
                    "type": "Object"
                },
                {
                    "name": "ZOOM_END_EVENT",
                    "description": "Fired when the camera finishes zooming",
                    "type": "Object"
                },
                {
                    "name": "MULTI_START_EVENT",
                    "description": "Fired when the camera starts animating or you called setMulti. It means any one or more of pan, tilt, rotate and zoom could be changing. The individual pan/tilt/rotate/zoom events will NOT be fired.",
                    "type": "Object"
                },
                {
                    "name": "MULTI_END_EVNT",
                    "description": "Fired when the camera stops animating, or has finished the setMulti call.",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 229,
            "description": "Pans the camera right and down from the current position",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "right",
                    "description": "The units to move right. Negative will pan left. This is in relation to the global coordinate system, not the current camera rotation.",
                    "type": "Number"
                },
                {
                    "name": "down",
                    "description": "The units to move down. Negative will pan up. This is in relation to the global coordinate system, not the current camera rotation.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 242,
            "description": "Sets the camera anchor to a specifc x/y positon, in the global reference frame. 0,0 will be roughly the middle of the map, and panBounds holds the min/max points.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to move the camera to. +x will take you right, from the default camera rotation of 0.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to move the camera to. +y will take you down (towards the viewer) in the default camera rotation of 0.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 266,
            "description": "Sets the rotation to a specific orientation, in radians. Mostly useful to orient the map a certain way for a physical directory.",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "radians",
                    "description": "Absolute rotation to set the camera to, in radians. 0 in the starting point",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 287,
            "description": "Rotates the camera a set number of radians relative to the current rotation. Useful for an idle rotation animation.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "radians",
                    "description": "Number of radians to rotate the camera",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 308,
            "description": "Sets the tilt to a specific level, in radians. 0 is top down. Bounded by minTilt and maxTilt",
            "itemtype": "method",
            "name": "setTilt",
            "params": [
                {
                    "name": "radians",
                    "description": "Tilt to set the camera to, in radians",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 328,
            "description": "Tilts the camera up or down by some number of radians. Bounded by minTilt and maxTilt",
            "itemtype": "method",
            "name": "tilt",
            "params": [
                {
                    "name": "radians",
                    "description": "Number of radians to increase or decrease the current tilt by.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 348,
            "description": "Sets the camera to be a certain distance from the anchor point, along it's tilt and rotation.\nKeeps it inside minZoom and maxZoom.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The distance to set the camera to",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 371,
            "description": "Moves the camera towards or away from the camera by a set amount. Positive will zoom in (bringing the distance closer to 0)",
            "itemtype": "method",
            "name": "zoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The distance to increase or decrease the zoom",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 394,
            "description": "Zooms the camera in on the center of the current view.",
            "itemtype": "method",
            "name": "zoomIn",
            "params": [
                {
                    "name": "duration",
                    "description": ""
                },
                {
                    "name": "curve",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 410,
            "description": "Zooms the camera out from the center of the current view.",
            "itemtype": "method",
            "name": "zoomOut",
            "params": [
                {
                    "name": "duration",
                    "description": ""
                },
                {
                    "name": "curve",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 426,
            "description": "Returns the current camera position",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "An {x, y} object of the current camera postion",
                "type": "Object"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 436,
            "description": "Returns the current camera rotation",
            "itemtype": "method",
            "name": "getRotation",
            "return": {
                "description": "The current rotation of the camera, in radians",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 446,
            "description": "Returns the current camera tilt",
            "itemtype": "method",
            "name": "getTilt",
            "return": {
                "description": "The current tilt of the camera, in radians",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 456,
            "description": "Returns the current camera zoom",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The distance of the camera from the anchor",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 466,
            "description": "Returns true if the camera is currently moving (it's animating, the user is manipulating it)",
            "itemtype": "method",
            "name": "isCameraMoving",
            "return": {
                "description": "True if the camera is moving, false otherwise.",
                "type": "Boolean"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 476,
            "description": "Returns the actual zoom minimum based on real-world distance.",
            "itemtype": "method",
            "name": "getZoomScaledMin",
            "return": {
                "description": "The actual zoom minimum in map units.",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 486,
            "description": "Returns the actual zoom maximum based on visible map size.",
            "itemtype": "method",
            "name": "getZoomScaledMax",
            "return": {
                "description": "The actual zoom maximum in map units.",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 503,
            "description": "Animates the camera from it's current position to the state specified in target. You only\nneed to specify the properties you actually want to change.\n\nYou can also specify a duration, animation curve, and a callback for when it's done.",
            "itemtype": "method",
            "name": "animateCamera",
            "params": [
                {
                    "name": "target",
                    "description": "A list of optional parameters you can set that represent the camera state",
                    "type": "Object",
                    "props": [
                        {
                            "name": "position",
                            "description": "An {x, y} object representing the position to move to",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "zoom",
                            "description": "The zoom level to end at",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "tilt",
                            "description": "The tilt to end at, in radians",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rotation",
                            "description": "The rotation to end at, in radians",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "doNotAutoStart",
                            "description": "Set this to true if you want to start the tween yourself",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "duration",
                    "description": "The duration to animate the camera for, in ms",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "curve",
                    "description": "The animation curve to use for the animation",
                    "type": "Mappedin.Easing",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback that will be executed when the animation is done",
                    "type": "Function",
                    "optional": true
                }
            ],
            "return": {
                "description": "The tween being used, if you want to do anything to control it manually. Do not overide it's events.",
                "type": "Mappedin.Tween"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 594,
            "description": "Allows you to set any of the Camera's position, zoom, rotation and tilt at once, with one function.",
            "itemtype": "method",
            "name": "setMulti",
            "params": [
                {
                    "name": "position",
                    "description": "an {x, y} object representing the new position",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "zoom",
                    "description": "The new zoom distance",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rotation",
                    "description": "The new rotation, in radians.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tilt",
                    "description": "The new tilt, in radians.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 690,
            "description": "Anything we need to do after we render the camera, like update anchors for the mouse/touch controls.",
            "itemtype": "method",
            "name": "postRender",
            "access": "private",
            "tagname": "",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 1108,
            "description": "Should probably be \"pre-render\". Anything we need to do before rendering the scene.",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 1124,
            "description": "Disposes of the camera and all of it's events.",
            "itemtype": "method",
            "name": "dispose",
            "access": "private",
            "tagname": "",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 20,
            "description": "This property identifies which mode you are in, incase you have special functionailty in your app when in 2D vs 3D mode.\nIt will be one of MapView, MapView3D, or MapView2D",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 29,
            "description": "Manual camera controls for Mapview. Generally you should be using the functions on MapView like focusOn*,\nbut if you have some cool animations in mind, you can do it with the CameraControls.\nSome of the functions don't do anything in 2D.",
            "itemtype": "property",
            "name": "controls",
            "type": "CameraControls",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 39,
            "description": "These are the default colours used by the Mapview to control things like path and selection. You can override these here\nto quickly style your app, but most of them can also be set (especially for special cases) in their respective functions.\nThe only value that MUST be set here is `hover`.",
            "itemtype": "property",
            "name": "colors",
            "type": "Object",
            "class": "MapView",
            "subprops": [
                {
                    "name": "hover",
                    "description": "The color a polygon changes to on mouse over. Defaults to `0xcccccc`",
                    "type": "Integer"
                },
                {
                    "name": "select",
                    "description": "The color used when you call setPolygonColor with no color parameter. Defaults to `0x4ca1fc`"
                },
                {
                    "name": "text",
                    "description": "The color used for TextLabels, if you don't specify it in labelAllLocations/labelPolygons. Defaults to `0x000000`"
                },
                {
                    "name": "path",
                    "description": "The color used for the path in drawPath/drawPathSegment if you don't specify it there. Defaults to `0xff834c`"
                },
                {
                    "name": "pathPulse",
                    "description": "The color of the animated path pulse if not specified in drawPath/drawPathSegment. Defaults to `0xffffff`"
                },
                {
                    "name": "textSelect",
                    "description": "The color a TextLabel is set to when you call setPolygonColor, if you don't specify it there. Defaults to `0xffffff`"
                }
            ]
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 61,
            "description": "The Venue data this MapView is using.",
            "itemtype": "property",
            "name": "venue",
            "type": "Venue",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 69,
            "description": "The div MapView is using.",
            "itemtype": "property",
            "name": "container",
            "type": "Div",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 77,
            "description": "**READ ONLY** The ID of the Map currently being displayed.",
            "itemtype": "property",
            "name": "currentMap",
            "type": "String",
            "readonly": "",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 85,
            "description": "Change this factor to influence how much the camera zooms in on a focusOn call",
            "itemtype": "property",
            "name": "focusZoomFactor",
            "type": "Integer",
            "default": "3",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 93,
            "description": "Change the currently displayed map to a new one.",
            "itemtype": "method",
            "name": "setMap",
            "params": [
                {
                    "name": "map",
                    "description": "The map ID or Map Object to change the map to.",
                    "type": "String|Map"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 102,
            "description": "adds a map",
            "itemtype": "method",
            "name": "addMap",
            "params": [
                {
                    "name": "map",
                    "description": "map to add",
                    "type": "Map"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 109,
            "description": "removes a map",
            "itemtype": "method",
            "name": "removeMap",
            "params": [
                {
                    "name": "map",
                    "description": "map to remove",
                    "type": "String|Map"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 121,
            "description": "Moves the camera to focus in on a specific polygon",
            "itemtype": "method",
            "name": "focusOnPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon or polygon ID to focus on. The camera will move to the centroid of polygon",
                    "type": "String|Polygon"
                },
                {
                    "name": "changeZoom",
                    "description": "Whether to zoom the camera in or out so it fits the polygon's bounds. Scaled by MapView.focusZoomFactor",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "duration",
                    "description": "The time the camera should spend moving, in milliseconds.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "100"
                },
                {
                    "name": "curve",
                    "description": "The animation curve to use.",
                    "type": "Mappedin.Easing",
                    "optional": true,
                    "optdefault": "Mappedin.Easing.Quadratic.In"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 133,
            "description": "Moves the camera to focus on an entire path and optionally it's starting and ending polygon.",
            "itemtype": "method",
            "name": "focusOnPath",
            "params": [
                {
                    "name": "path",
                    "description": "The nodes to fit the camera to",
                    "type": "Node[]"
                },
                {
                    "name": "polygonIds",
                    "description": "The Polygon or polygon ID to focus on. The camera will move to the centroid of polygon",
                    "type": "String[]|Polygon[]"
                },
                {
                    "name": "changeZoom",
                    "description": "Whether to zoom the camera in or out so it fits the polygon's bounds. Scaled by MapView.focusZoomFactor",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "duration",
                    "description": "The time the camera should spend moving, in milliseconds.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "100"
                },
                {
                    "name": "curve",
                    "description": "The animation curve to use.",
                    "type": "Mappedin.Easing",
                    "optional": true,
                    "optdefault": "Mappedin.Easing.Quadratic.In"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 146,
            "description": "A flexible function that will let you focus on collections of nodes and/or polygons.\nThis will move the camera to the center of all items passed in, and by default\nzoom the camera in or out to fit everything in view, scaled by mapView.focusZoomFactor",
            "itemtype": "method",
            "name": "focusOn",
            "params": [
                {
                    "name": "options",
                    "description": "You should provide at least one node or polygon, but everything else is @optional",
                    "type": "Object",
                    "props": [
                        {
                            "name": "nodes] Node[",
                            "description": "} An array of nodes to focus in on",
                            "optional": true
                        },
                        {
                            "name": "polygons",
                            "description": "An array of polygons to focus on. It's the center of the bounds of all polygons, designed to fit everything into view",
                            "type": "Polygon[]",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "The duration the focus animation should last for",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "curve",
                            "description": "The animation curve to use for zooming in. Uses the animateCamera one by default",
                            "type": "Mappedin.Easing",
                            "optional": true
                        },
                        {
                            "name": "focusZoomFactor",
                            "description": "You can overide the focusZoomFactor for a specific focusOn call, rather than globally, if you liek",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "this.focusZoomFactor"
                        },
                        {
                            "name": "minZoom",
                            "description": "Sets a floor for how close you can zoom in on the scene. If it's lower than mapView.controls.minZoom, it's ignored.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "option.changeZoom",
                    "description": "{Whether to zoom the camera in or out, or just pan it",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Returns the Tween for advanced usage. Can generally be ignored.",
                "type": "Tween"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 165,
            "description": "Returns the value you should call setZoom on to fit the polygon exactly.",
            "itemtype": "method",
            "name": "getZoomLevelForPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon or polygon ID to get the zoom level for",
                    "type": "String|Polygon"
                }
            ],
            "return": {
                "description": "The zoom level that will fit the polygon",
                "type": "Integer"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 175,
            "description": "Returns the value you should call setZoom on to fit the current map exactly.",
            "itemtype": "method",
            "name": "getZoomLevelForCurrentMap",
            "return": {
                "description": "The zoom level that will fit the current map",
                "type": "Integer"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 184,
            "description": "Resets the pan, tilt and rotation of the camera and sets the zoom to fit the current map.",
            "itemtype": "method",
            "name": "resetCamera",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 192,
            "description": "Returns the angle that points to north, in radians, from the default orientation.",
            "itemtype": "method",
            "name": "getNorth",
            "return": {
                "description": "The angle to north from the default orientation, in radians",
                "type": "Number"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 202,
            "description": "Takes an element on the DOM and rotates it such that the top is pointing north. It will rotate with the camera, staying locked\non north. If you would like to align it do a different direction, or a different side of the element, pass in an offset. This\nis how you would do a compass rose.\n\nThis will modify your element's transform.",
            "itemtype": "method",
            "name": "lockNorth",
            "params": [
                {
                    "name": "element",
                    "description": "The element on the page to rotate",
                    "type": "DOM Node"
                },
                {
                    "name": "offset",
                    "description": "The amount to offset the rotation by, in radians.",
                    "type": "Number"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 216,
            "description": "Stops the MapView from trying to rotate your element with the camera. Do this if you remove the element, or want to stop it from rotating.",
            "itemtype": "method",
            "name": "unlockNorth",
            "params": [
                {
                    "name": "element",
                    "description": "The node to stop rotating. It won't reset the transform, just leave it as is.",
                    "type": "DOM Node"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 225,
            "description": "Given a polygon/polygon id, set it to a specific color, and set any text label associated with that polygon to another color.",
            "itemtype": "method",
            "name": "setPolygonColor",
            "params": [
                {
                    "name": "polygon",
                    "description": "The polygon/polygon ID to change the color of",
                    "type": "String|Polygon"
                },
                {
                    "name": "color",
                    "description": "The color to use",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "this.colors.select"
                },
                {
                    "name": "textColor",
                    "description": "The color to use for any TextLabel",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "this.colors.textSelect"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 236,
            "description": "Resets a polygon back to it's original color\nIf the user is hovering over a polygon, it will still have the hover effect.",
            "itemtype": "method",
            "name": "clearPolygonColor",
            "params": [
                {
                    "name": "polygon",
                    "description": "The polygon/polygon ID to reset",
                    "type": "Polygon|String"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 246,
            "description": "Resets ALL polygons you have changed with setPolygonColor back to their original color.\nThe hover effect will still be present if the user is currently hovering over a polygon.",
            "itemtype": "method",
            "name": "clearAllPolygonColors",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 255,
            "description": "Makes a polygon hoverable/clickable. Polygons you haven't called this on will be treated as non-interactive and not respond to any mouse events.",
            "itemtype": "method",
            "name": "addInteractivePolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon/Polygon ID to make interactive.",
                    "type": "Polygon|String"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 264,
            "description": "Makes a polygon no longer hoverable/clickable",
            "itemtype": "method",
            "name": "addInteractivePolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The previously interactive Polygon/Polygon ID to make non-interactive.",
                    "type": "Polygon|String"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 273,
            "description": "This is called when an interactive polygon is clicked on.\nYou will almost certainly want to replace this with your own function in your client app.\nReturn \"false\" if you have consumed the event and it shouldn't bubble down to other polygons beneath this one.",
            "itemtype": "method",
            "name": "onPolygonClicked",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon or Polygon ID that was clicked/tapped on.",
                    "type": "Polygon|String"
                }
            ],
            "return": {
                "description": "False if the event has been consumed and should not bubble down to other polygons beneath it.",
                "type": "Boolean"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 285,
            "description": "This is fired when the user taps/clicks on the mapview without hitting an interactive polygon.\nYou will almost certainly want to replace this with your own function in your client app.\nYou would probably use this to clear any polygon highlighting, in certain situations.",
            "itemtype": "method",
            "name": "onNothingClicked",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 295,
            "description": "This creates a div with whatever HTML you provide, anchors it to `position` in 3D space, and optionally applies a css class you provide.\n`position` should be something you got from getPositionPolygon or getPositionNode\nThe marker is added for you, on to the current map (or the one you specify)",
            "itemtype": "method",
            "name": "createMarker",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML that the marker will be. Typically just some text or an image, but you can be more creative if you want.",
                    "type": "String"
                },
                {
                    "name": "positing",
                    "description": "The position in 3D space to anchor the marker to. Do not attempt to create it manually: use getPositionPolygon or getPositionNode.",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "The name of the CSS class to apply to the marker",
                    "type": "String"
                },
                {
                    "name": "map",
                    "description": "The map to add the marker on. Defaults to the current map.",
                    "type": "Map|String",
                    "optional": true,
                    "optdefault": "this.currentMap"
                }
            ],
            "return": {
                "description": "The marker you created, which has already been added to the scene",
                "type": "Marker"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 310,
            "description": "Adds an already created Mappedin.Marker to the scene. The Marker constructor is more powerful than the createMarker convenience function.",
            "itemtype": "method",
            "name": "addMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "The Marker to add",
                    "type": "Marker"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 319,
            "description": "Removes a maker you have added previously.",
            "itemtype": "method",
            "name": "removeMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "A Marker that has previously been returned from createMarker",
                    "type": "Marker"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 328,
            "description": "Removes all markers (from all maps, not just the current one)",
            "itemtype": "method",
            "name": "removeAllMarkers",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 336,
            "description": "Takes an x/y pair in Mappedin coordinate space and gives you an object suitable to use as a Marker's position.\n**Be careful about using this:** The coordinate system could change arbitrarily and without notice. You are better off\nusing a specific node or polygon as an anchor. If you need to use this for some reason, talk to your Mappedin representative.",
            "itemtype": "method",
            "name": "convertTo3DMapPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "coordinate",
                    "description": "} A coordinate in Mappedin 2D space",
                    "type": "X, y"
                }
            ],
            "return": {
                "description": "The position to anchor a marker in 3D space",
                "type": "Object"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 349,
            "description": "Gives you the top center of a polygon in 3d scene space. Suitable for use as a Marker's position.",
            "itemtype": "method",
            "name": "getPositionPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "Either the Polygon or Polygon ID you want the center of",
                    "type": "Polygon|String"
                }
            ],
            "return": {
                "description": "The position to anchor a marker in 3D space",
                "type": "Object"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 359,
            "description": "Gives you the position of a Mappedin node in the 3D scene. Suitable for use as a Marker's position.",
            "itemtype": "method",
            "name": "getPositionNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either the Node or Node ID you want the center of",
                    "type": "Node|String"
                }
            ],
            "return": {
                "description": "The position to anchor a marker in 3D space",
                "type": "Object"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 369,
            "description": "Labels a specific polygon (or area of 3D space) with a text label that lives in 3D space. That means it will be smaller when the camera is further away, and the angle you see it at will change with the camera.\nThe text will flip 180 degress when the camera rotates so it's never totally upside-down.\n\nIt also sets the hover label (in 2D and 3D).\nMany of these options do nothing in 2D, as TextLabels are not supported, but it won't break anything.\n\nYou must provide text, and either a Polygon, or a canvasBounds and height",
            "itemtype": "method",
            "name": "labelPolygon",
            "params": [
                {
                    "name": "options",
                    "description": "Most options are optional, but you do need text and either a Polygon, or a canvasBounds and height",
                    "type": "Object",
                    "props": [
                        {
                            "name": "text",
                            "description": "The text to use for the label",
                            "type": "String"
                        },
                        {
                            "name": "polygon",
                            "description": "The Polygon or Polygon Id to make a label for. Only optional if you have set canvasBounds and height",
                            "type": "Polygon|String"
                        },
                        {
                            "name": "canvasBounds",
                            "description": "Set this if you want to label an arbitrary part of the map. You will need to specify height as well.",
                            "type": "CanvasBounds",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The x coordinate for the text label anchor",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "The y coordinate for the text label anchor",
                                    "type": "Integer"
                                },
                                {
                                    "name": "width",
                                    "description": "The horizontal space we have to fit the text label",
                                    "type": "Integer"
                                },
                                {
                                    "name": "height",
                                    "description": "The vertical space we have to fit the text label",
                                    "type": "Integer"
                                },
                                {
                                    "name": "align",
                                    "description": "Whether the Text Label should be anchored against the (x,y), or the oposite (horizinal) side of the box, or in the middle. It is always vertically centered.",
                                    "type": "\"left\"|\"right\"|\"center\""
                                }
                            ]
                        },
                        {
                            "name": "height",
                            "description": "By default this is the upper bounds of the Polygon. If you don't have a Polygon, or want a custom height for some reason, you can set this.",
                            "type": "Float",
                            "optional": true
                        },
                        {
                            "name": "map",
                            "description": "If Polygon is not set, this will let you add a textLabel to another map. Otherwise, it will use the current map.",
                            "type": "Map|String",
                            "optional": true
                        },
                        {
                            "name": "margin",
                            "description": "The amount of space to leave before starting the text",
                            "type": "Float",
                            "optional": true,
                            "optdefault": "5"
                        },
                        {
                            "name": "color",
                            "description": "A optional special color if you don't want to use mapView.colors.text",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "this.colors.text"
                        },
                        {
                            "name": "fontSize",
                            "description": "How big to make the font. Defaults to 12",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "12"
                        },
                        {
                            "name": "font",
                            "description": "A THREE.Font object, if you have your own font you want to use. Create it with createFont.",
                            "optional": true
                        },
                        {
                            "name": "scaleMin",
                            "description": "The minimum percentange we can shrink the label to if it won't fit within the bounds at 100%. If it doesn't fit at that level, it won't be created.",
                            "type": "Float",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "scaleStep",
                            "description": "How much to decrement the scale each time it doesn't fit, so we don't end up with too many different font sizes on screen at once. If you are only labeling a few polygons rather than everything,\n\t\tyou can set this and and scaleMin to 0.1 to fit everything except really long names perfectly.",
                            "type": "Float",
                            "optional": true,
                            "optdefault": ".25"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The TextLabel, added to the scene for the correct map.",
                "type": "TextLabel"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 402,
            "description": "Labels all locations, in order of distance from the center of the map. See labelPolygon for available label options.\nThe options are all optional, as the text and polygon properties will be set for each location.",
            "itemtype": "method",
            "name": "labelAllLocations",
            "params": [
                {
                    "name": "options",
                    "description": "Any option from labelPolygon (except text, polygon, canvasBounds, height and map), plus:",
                    "props": [
                        {
                            "name": "excludeTypes",
                            "description": "is often used.",
                            "type": "String[]",
                            "optional": true,
                            "optdefault": "[]]  A list of Location types to skip labeling. [\"Amenities\""
                        },
                        {
                            "name": "sortFunction",
                            "description": "A sorting function that will determine which Location wins when a Polygon belongs to more than one. Uses the Location.sortOrder property by default, but if you have special logic you can use it here.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "locations",
                            "description": "An array of Location objects, or location IDs. If excludeTypes and the sort function are not sufficient, you can explicitly set the locations you are labeling. You can also call labelPolygon manually for every polygon you care about instead.",
                            "type": "Location[]|String[]",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 415,
            "description": "Removes all labels from all maps",
            "itemtype": "method",
            "name": "removeAllLabels",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 423,
            "description": "Let any image attached to a polygon attached to a location flip 180 degrees with the camera so it's always upright.",
            "itemtype": "method",
            "name": "enableImageFlippingForAllLocations",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "props": [
                        {
                            "name": "excludeTypes",
                            "description": "A list of Location types to skip, if for some reason there are locations that have logos that shouldn't flip",
                            "type": "String[]",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "locations",
                            "description": "An array of Location objects, or location IDs. If excludeTypes is not sufficient you can explicitly set the locations you are marking to flip. You can also call enableImageFlippingForPolygon manually for every polygon you care about instead.",
                            "type": "Location[]|String[]",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 433,
            "description": "Mark a specific polygon so, if it has an image, it rotates with the camera",
            "itemtype": "method",
            "name": "enableImageFlippingForPolygon",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "props": [
                        {
                            "name": "polygonId",
                            "description": "The ID of the polygon who's image (if any) should rotate",
                            "type": "String"
                        },
                        {
                            "name": "rotation",
                            "description": "The how much the image has been rotated so that it's \"up\". Determined from the Polygon object itself typically, but can be set manually if needed.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 443,
            "description": "Create a font for use in 3D by passing in a JSON object generated from https://gero3.github.io/facetype.js/\nIgnored in 2D, retuning null",
            "deprecated": true,
            "deprecationMessage": "Use static method MapView3D.createFont() instead",
            "itemtype": "method",
            "name": "createFont",
            "params": [
                {
                    "name": "facetypeJson",
                    "description": "Convert a font into JSON with Facetype.js, and put it in here.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the ThreeJS Font object created with the JSON, or null in 2D",
                "type": "Font"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 455,
            "description": "Calculates the length of the connected path in list of Mappedin Nodes. Breaks in the path (to go to other floors) count as 0 distance. The Z value is also ignored.",
            "itemtype": "method",
            "name": "getPathLength",
            "params": [
                {
                    "name": "path",
                    "description": "An array of nodes on a path, probably from a Node's directionsTo or directionsFrom call.",
                    "type": "Node[]"
                }
            ],
            "return": {
                "description": "The 2D length of the path",
                "type": "Integer"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 477,
            "description": "Draws an entire path. It takes a list of nodes and will break them into separate path segments on every man change, putting the resultant segment on the right map.\n\nIf you have a special use case (like off graph nodes, or venues with same map vortexes) use the drawPathSegment function.\n\nReturns an array of path segments if you want to customize the animation triggers. The path segements are added to the scene, chained together, and start animating automatically.",
            "itemtype": "method",
            "name": "drawPath",
            "params": [
                {
                    "name": "path",
                    "description": "An array of Nodes, probably from a Node's directionsTo or directionsFrom call.",
                    "type": "Node[]"
                },
                {
                    "name": "options",
                    "description": "A list of style options for the path. Not everything is supported in 2D. See drawPath for available options. Note that drawDuration is per segment.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of path segments.",
                "type": "PathSegment[]"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 492,
            "description": "Takes a list of {x, y} pairs in Mappedin coordinate space and draws a connected path on the specified map. Use this function for special cases not handled by the drawPath convenience function.\nReturns a path segment. You will need to call it's tween.start() function to begin animation and make the path segment visible.\nYou can customize the Tween.js tween if you like, but make sure tryRendering is always called in onUpdate or the path may stop.",
            "itemtype": "method",
            "name": "drawPath",
            "params": [
                {
                    "name": "path",
                    "description": "An array of Nodes, probably from a Node's directionsTo or directionsFrom call.",
                    "type": "Node[]"
                },
                {
                    "name": "options",
                    "description": "A list of style options for the path. Not everything is supported in 2D.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "color",
                            "description": "Color of path. Uses colors.path if not specified.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "this.colors.path"
                        },
                        {
                            "name": "pulseColor",
                            "description": "Color of path pulse. Uses colors.pathPulse if not specified. Ignored in 2D.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "this.colors.pathPulse"
                        },
                        {
                            "name": "radius",
                            "description": "The radius of the path",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "drawDuration",
                            "description": "Duration the path fade in animation for this segment, in milliseconds.",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "curve",
                            "description": "The animation curve to use for the path fade in animation.",
                            "optional": true,
                            "optdefault": "Mappedin.Easing.Circular.InOut] [Mappedin.Easing"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A path segment object, with a tween property you should start(), and a reset() function to set it back to it's default state",
                "type": "PathSegment"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 510,
            "description": "Removes a specific path segement from the map it's on.",
            "itemtype": "method",
            "name": "removePathSegment",
            "params": [
                {
                    "name": "pathSegment",
                    "description": "A segment returned from drawPathSegment or drawPath",
                    "type": "PathSegment"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 519,
            "description": "Removes all path segments from all maps",
            "itemtype": "method",
            "name": "removeAllPaths",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 527,
            "description": "Sets the clear color of the map something else, it you want it to fit it more with your website. Otherwise the div will be white where there is no map visible.",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "color",
                    "description": "The color to use. Not an HTML color name.",
                    "type": "Integer"
                },
                {
                    "name": "alpha",
                    "description": "Opacity between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 537,
            "description": "The scene only renders when something has changed. This should be something a 3rd party developer doesn't need to worry about,\nbut if you are doing something weird, or have your own special tween for something, you will want to call this function.\nYou can call it as often as you want, it just sets a flag that we need to render again, and renders a few frames if we weren't already doing that.\nIgnored in 2D.",
            "itemtype": "method",
            "name": "tryRendering",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 547,
            "description": "Resets the MapView to the default state.",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 557,
            "description": "Finds the main Location associated with a Polygon. This means a Location\nattached to the Polygon that has no parents, or, if there are none of those,\na location nearest the top of some hierarchy that does have the polygon attached.\n\nThis means if there are multiple hierarchies of locations attached to the Polygon,\nthe one that gets returned is not guaranteed to be what you want.",
            "itemtype": "method",
            "name": "getPrimaryLocationForPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Mappedin Polygon you want the primary location of.",
                    "type": "Polygon"
                }
            ],
            "return": {
                "description": "",
                "type": "Location"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 606,
            "description": "Create a font for use in 3D by passing in a JSON object generated from https://gero3.github.io/facetype.js/\nIgnored in 2D, retuning null",
            "static": 1,
            "params": [
                {
                    "name": "facetypeJson",
                    "description": "Convert a font into JSON with Facetype.js, and put it in here.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the ThreeJS Font object created with the JSON, or null in 2D",
                "type": "Font"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView2D.js",
            "line": 323,
            "description": "Simple utility function to calculate the maximum scroll bounds for our map so Leaflet\ndoes not scroll outside the map bounds",
            "class": "MapView2D"
        },
        {
            "file": "source/Mappedin.MapView2D.js",
            "line": 368,
            "description": "Takes Mappedin Polygon data creates the corrisponding Leaflet polygon in the\nmap's frame of reference. Each Mappedin polygon should only have one Leaflet\npolygon. Use highlightPolygon to change the styles.",
            "class": "MapView2D"
        },
        {
            "file": "source/Mappedin.MapView2D.js",
            "line": 762,
            "description": "Labels a specific polygon (or area of 3D space) with a text label that lives in 3D space.\nThat means it will be smaller when the camera is further away, and the angle you see it at will change with the camera.\nThe text will flip 180 degress when the camera rotates so it's never totally upside-down.\n\nPossible options = {\n\tpolygon - The polygon to make a label for\n\tcanvasBounds - Optional, to do this without a real Mappedin Polygon\n\theight - If you don't have a real polygon, you will need to set a height\n\ttext - The text to make the label\n\tmargin - The amount of space to leave before starting the text\n\tcolor - A optional special color if you don't want to use mapView.colors.text\n\tfontSize - How big to make the font. Defaults to 12\n\tfont - A THREE.Font object, if you have your own font you want to use.\n\tscaleMin - What percentage we can shrink the label to if it won't fit at 100%\n\tscaleStep - How much to decrement the scale each time it doesn't fit, so we don't end up with too many different font sizes\n}\n\nYou must provide AT LEAST text and either polygon or canvasBounds + height.",
            "class": "MapView2D"
        },
        {
            "file": "source/Mappedin.MapView3D.js",
            "line": 239,
            "description": "Load the map, if it's not already loaded. Returns the old promise if it's already done, so you can safely call it whenever needed.\n\nIf needed, this could be modified to\n\nReturns a Promise that will be Done when the OBJ, MTL and textures have been downloaded, and the objectsDictionary has been generated.",
            "class": "MapView3D"
        },
        {
            "file": "source/Mappedin.MapView3D.js",
            "line": 2242,
            "description": "True if the canvas should be measured every frame. This is ideal to handle the user resizing the browser window on occasion, but\nmay not be optimal if you are trying to resize the MapView dynamically all the time.",
            "itemtype": "property",
            "name": "shouldMeasureCanvas",
            "type": "Boolean",
            "class": "MapView3D"
        },
        {
            "file": "source/Mappedin.Search.js",
            "line": 14,
            "description": "The types of assets available for this venue.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "ASSET_TYPES",
            "type": "LOCATION, EVENT",
            "class": "Search"
        },
        {
            "file": "source/Mappedin.Search.js",
            "line": 104,
            "description": "Makes a call to the Mappedin Smart Search API with the provided query, retuning a Promise that will fulfill with a\nSearchResults object. This will contain a list of `hits`, which can currently be SearchItems (either SearchLocations or SearchEvents).\n\nThese are currently different from the objects you get directly from the Mappedin API,\ncontaining a subset of their data, but you can match on their IDs.\n\nThe data is broken down into pages. You can specify the size (defaults to 10).",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "query",
                    "description": "The string to search for",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Any optional parameters you need to pass to the search API",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "ps",
                            "description": "Number of search results to return. Defaults to 10. You can get the next page from SearchResults.next",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "If you want to limit your results to a specific type of SearcItem, specify it here. Currently either ASSET_TYPES.LOCATION or ASSET_TYPES.EVENT",
                            "type": "ASSET_TYPE",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The promise will resolve with either a SearchResults object if successful, or an error with a `message` and `status` if it fails\n\n\t\tSearchResults has the following propertyies and methods:\n\t\t\tquery: The search query that triggered this search\n\t\t\ttotal: The total number of results.\n\t\t\thits: The array of SearchItems in the current page.\n\n\t\t\tA SearchItem is an object that contains an id property that could match the id of a Location or Event on your Venue object. This is NOT GUARANTEED, however, as the data could have changed since the getVenue call was performed.\n\n\t\t\tnextPage() -> A promise that will resolve with the next page of SearchResults",
                "type": "Promise"
            },
            "class": "Search"
        },
        {
            "file": "source/Mappedin.Search.js",
            "line": 158,
            "description": "Makes a call to the Mappedin Smart Search Suggestions API with the provided query, retuning a Promise that will fulfill with a\nSuggestions object. This will contain a list of `hits`, which are words that match full search results. This should be used\nto aid in autocoplete for a search bar. It's ordered for you by most relevant.",
            "itemtype": "method",
            "name": "suggest",
            "params": [
                {
                    "name": "query",
                    "description": "The string to get autocomplete suggestions for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The promise will resolve with either a Suggestions object if successful, or an error with a `message` and `status` if it fails\n\n\t\tSuggestions has the following propertyies and methods:\n\t\t\tquery: The suggestion query that triggered this list of suggestions (to make sure it's still what's in the text bar)\n\t\t\ttotal: The total number of suggestions.\n\t\t\thits: The array of Strings matching the query",
                "type": "Promise"
            },
            "class": "Search"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 65,
            "description": "A category.",
            "name": "MappedinCategory",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 92,
            "description": "Locations in this category.",
            "name": "MappedinCategory#locations",
            "type": "{Array.<MappedinLocation>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 117,
            "description": "A location.",
            "name": "MappedinLocation",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 154,
            "description": "Polygons this location is attached to.",
            "name": "MappedinLocation#polygons",
            "type": "{Array.<MappedinPolygon>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 176,
            "description": "Nodes this location is attached to.",
            "name": "MappedinLocation#nodes",
            "type": "{Array.<MappedinNode>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 198,
            "description": "Parent of this location, if any",
            "name": "MappedinLocation#parent",
            "type": "{<MappedinLocation>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 214,
            "description": "Gets directions from this location to the target node or location.",
            "itemtype": "method",
            "name": "MappedinLocation#directionsTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be\nwheelchair accessible.",
                            "type": "Boolean="
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Callback.",
                    "type": "DirectionsToCallback"
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 243,
            "description": "Get vortexes with their nodes",
            "name": "MappedinVortex",
            "type": "{Array.<MappedinVortex>}",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 272,
            "description": "A map group.",
            "name": "MappedinMapGroup",
            "type": "{Array.<MappedinMapGroup>}",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 301,
            "description": "Maps within this map group.",
            "name": "MappedinMapGroup#maps",
            "type": "{Array.<MappedinMap>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 320,
            "description": "A map.",
            "name": "MappedinMap",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 385,
            "description": "Polygons on this map.",
            "name": "MappedinMap#polygons",
            "type": "{Array.<MappedinPolygon>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 404,
            "description": "Map group this map belongs to. Null if the map is part of the \"default\" map\ngroup.",
            "name": "MappedinMap#mapGroup",
            "type": "{MappedinMapGroup}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 417,
            "description": "A node.",
            "name": "MappedinNode",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 449,
            "description": "Adjacent nodes.",
            "name": "MappedinNode#paths",
            "type": "{Array.<MappedinNode>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 471,
            "description": "Locations attached to this node.",
            "name": "MappedinNode#locations",
            "type": "{Array.<MappedinLocation>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 497,
            "description": "Gets directions from this node to the target node or location.",
            "itemtype": "method",
            "name": "MappedinNode#directionsTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be\nwheelchair accessible.",
                            "type": "Boolean="
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "Callback.",
                    "type": "DirectionsToCallback"
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 526,
            "description": "Directions callback.",
            "callback": "directionsToCallback",
            "params": [
                {
                    "name": "error",
                    "description": "Error.",
                    "type": "Error"
                },
                {
                    "name": "directions",
                    "description": "Directions response.",
                    "type": "MappedinDirections"
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 533,
            "typedef": "{Object} MappedinDirections",
            "itemtype": "property",
            "name": "{Array.<MappedinPathNode>} path Path.",
            "type": "Array.<MappedinDirective>",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 539,
            "typedef": "{Object} MappedinDirective",
            "itemtype": "property",
            "name": "{string} instruction Instruction.",
            "type": "String",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 547,
            "typedef": "{Object} MappedinPathNode",
            "itemtype": "property",
            "name": "{number} y Y coordinate.",
            "type": "String",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 555,
            "description": "A polygon.",
            "name": "MappedinPolygon",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 590,
            "description": "Locations attached to the polygon.",
            "name": "MappedinPolygon#locations",
            "type": "{Array.<MappedinLocation>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 616,
            "description": "Polygon's entrance nodes.",
            "name": "MappedinPolygon#entrances",
            "type": "{Array.<MappedinNode>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 638,
            "description": "A venue.",
            "name": "MappedinVenue",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 668,
            "description": "An Apollo Theme.",
            "name": "MappedinTheme",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 697,
            "description": "An event.",
            "name": "MappedinEvent",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 729,
            "description": "Location this event is occuring at.",
            "name": "MappedinEvent#location",
            "type": "{MappedinLocation=}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 761,
            "description": "Venue aggregate root.",
            "name": "Mappedin",
            "is_constructor": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 884,
            "description": "Collection of categories.",
            "name": "Mappedin#categories",
            "type": "{Array.<MappedinCategory>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 891,
            "description": "Collection of locations.",
            "name": "Mappedin#locations",
            "type": "{Array.<MappedinLocation>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 898,
            "description": "Collection of maps.",
            "name": "Mappedin#maps",
            "type": "{Array.<MappedinMap>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 905,
            "description": "Collection of nodes.",
            "name": "Mappedin#nodes",
            "type": "{Array.<MappedinNode>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 912,
            "description": "Collection of polygons.",
            "name": "Mappedin#polygons",
            "type": "{Array.<MappedinPolygon>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 919,
            "description": "A venue.",
            "name": "Mappedin#venue",
            "type": "{Array.<MappedinVenue>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 926,
            "description": "Collection of events.",
            "name": "Mappedin#events",
            "type": "{Array.<MappedinEvent>}",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 933,
            "description": "Collection of map groups.",
            "name": "Mappedin#mapGroups",
            "type": "{Array.<MappedinMapGroup>}",
            "class": "Mappedin"
        },
        {
            "file": "Mappedin-node.js",
            "line": 31,
            "description": "Once you are in 2D or 3D mode, call this function with the options you need for the Mappedin API, and a callback that will give you a Venue object populated with all your data.\nThe `options` object can have the following properties:\n\n\n\toptions = {\n\t\tclientId: <The client ID provided to you by Mappedin. Contact your Mappedin representative if you do not have one>,\n\t\tclientSecret: <The secret that goes along with your ID>,\n\t\tperspective: <The name of specific perspective to use for 2D/3D>,\n\t\tperspective2D: <Use if you have a different perspective to use in 2D mode>,\n\t\tperspective3D: <Use if you have a different perspective to use in 3D mode>,\n\t\tvenue: <The \"slug\" that identifies the specific Venue you are interested in. Mappedin can tell you what it is>,\n\t\t// The things object is where you specifiy what fields you want to download for each object in the Mappedin API\n\t\t// This SDK will ensure it has the 2D or 3D files it needs, but it won't download anything extra (like the names of locations)\n\t\t// unless you specify it here.\n\t\t// This is a typical minimum, though you may have more location properties you are interested in. Talk to Mappedin for more information.\n\t\tthings: {\n\t\t\tvenue: ['slug', 'name'],\n\t\t\tlocations: ['name', 'type', 'description', 'icon', 'logo'],\n\t\t\tcategories: ['name'],\n\t\t\tmaps: ['name', 'elevation', 'shortName']\n\t\t}\n\t}\n\n\nIf you would like to force the test to run again, use the forceTest method instead. Or, if you want to force the user into a specific mode, use force2D or force3D respectively.\nNote while 2D should work for basically anyone, if the user's device/browser does not support WebGL and you call force3D, you will get an exception when you create a MapView object.",
            "itemtype": "method",
            "name": "getVenue",
            "params": [
                {
                    "name": "options",
                    "description": "Any options you need to specify to talk to the Mappedin API",
                    "type": "Object"
                },
                {
                    "name": "clientId",
                    "description": "The client key/ID provided to you by Mappedin to access our API. Contact your Mappedin representative if you do not have one",
                    "type": "String"
                },
                {
                    "name": "clientSecret",
                    "description": "The secret/password that goes along with your ID",
                    "type": "String"
                },
                {
                    "name": "perspective",
                    "description": "The name of the perspective you are using for 2D and 3D. Probably \"Website\". This controls what 3D files or 2D tiles get downloaded, and different persepctives may have different map features enabled/disabled, or have different images.",
                    "type": "String"
                },
                {
                    "name": "perspective2D",
                    "description": "Use if you have a different perspective to use in 2D mode",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "perspective3D",
                    "description": "Use if you have a different perspective to use in 3D mode",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "venue",
                    "description": "The \"slug\" that identifies the specific Venue you are interested in. Mappedin can tell you what it is. Developer accounts often start with \"api-demo1\"",
                    "type": "String"
                },
                {
                    "name": "things",
                    "description": "The things object is where you specifiy what fields you want to download for each object in the Mappedin API. Only specify what you will actually use, to minmimze transfer time. This SDK will ensure it has the 2D or 3D files it needs, and `id` is always included, but it won't download anything extra (like the names of locations) unless you specify it here.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "The Venue information you want. 'slug' and 'name' are typical, but you may also want others. Speak to Mappedin to see what is available.",
                            "type": "Array"
                        },
                        {
                            "name": "locations",
                            "description": "The fields you will be using for any Locations. You probably want at least 'name' and 'type'. You will also probably want 'description' and 'logo', but there can be any number of Location properties and it depends on your Venue and usecase. Talk to Mappedin for more details.",
                            "type": "Array"
                        },
                        {
                            "name": "categories",
                            "description": "The fields you will use for each Category. Typically 'name' at a minimum, but other common fields are 'description', 'picture', 'sortOrder' or 'parents' (for hierarchical categories) as well.",
                            "type": "Array"
                        },
                        {
                            "name": "maps",
                            "description": "The fields on each Map you are interested in. You'll probably want one or both of 'name' or 'shortName', and 'elevation' to sort.",
                            "type": "Array"
                        },
                        {
                            "name": "polygons",
                            "description": "The Polygon fields you want. The default is probably sufficient.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "nodes",
                            "description": "The Node fields you want. The default is probably sufficient.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "This function is called when the Venue data is loaded, or there is a problem.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "If there is an error, you will get it here. Typically this will only be useful for developers when building/testing. It's not usually something a user can deal with.",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "A Mappedin data object with all the data you asked for. It will have a venue property with a Venue object, and locations, categories, nodes, maps, and polygons arrays",
                            "type": "Mappedin"
                        }
                    ]
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-node.js",
            "line": 84,
            "description": "This function will take a single options object combining all options for Mappedin.init and the MapView constructor, and the div the MapView should live in.\nIt returns a Promise that will resolve with the MapView once the 3D test has been performed, the right MapView was loaded, the data has been retrieved from the Mappedin API, and\nthe MapView has been created. It could also fail (mostly if the options you set for the Mappedin API are incorrect).\n\nThis is a convenience function that lets you avoid chaining a bunch of callbacks, calling test3D/force2D/force3D then Mappedin.init then the MapView constructor.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "options",
                    "description": "Takes an object combining all options from Mappedin.init, the MapView constructor, and the Search constructor. If you explictly want to set the 3D mode rather than run the test, it also accepts a `mode` property that can be any of Mappedin.mode",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "Any options from Mappedin.getVenue",
                            "type": "Object"
                        },
                        {
                            "name": "mapview",
                            "description": "Any options from the Mappedin.MapView constructor",
                            "type": "Object"
                        },
                        {
                            "name": "search",
                            "description": "Any options from the Mappedin.Seach constructor.",
                            "type": "Object"
                        },
                        {
                            "name": "firstMapSelector",
                            "description": "If you would like to pick the first map loaded, set this function. It gives you a Venue object, and expects a Mappedin Map or Map Id to be returned. Return venue.defaultMap for the default behaviour. If you return an invalid map, an error will be logged to the console and an arbitrary map will be loaded.",
                            "type": "Function"
                        }
                    ]
                },
                {
                    "name": "container",
                    "description": "The HTML element the Mapview will live in.",
                    "type": "Div"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.js",
            "line": 57,
            "description": "The possible modes Mapview can be in. Typically you will use TEST, which will run a 3D compatibility test the user loads the page and then load load either the 2D or 3D version of MapView. On subsequent loads, it will use the saved result to avoid running a new test.\nFORCE_TEST will make sure a new test is run and the results are saved, whereas 3D and 2D will force the MapView directly into 2D or 3D mode without checking for compatibility. 2D should always work but some browsers/devices do not have the WebGL support needed for 3D, so be careful.",
            "itemtype": "property",
            "name": "modes",
            "type": "{TEST, 3D, 2D, FORCE_TEST}",
            "final": 1,
            "static": 1,
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.js",
            "line": 68,
            "description": "Forces Mapview into 2D mode.\nThis could make a network call, so the callback will fire when that's complete and you can create a MapView.",
            "itemtype": "method",
            "name": "force2D",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the Mapview is finished loading.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.js",
            "line": 85,
            "description": "Forces Mapview into 3D mode.\nThis could make a network call, so the callback will fire when that's complete and you can create a MapView.",
            "itemtype": "method",
            "name": "force3D",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when 3D mode is ready.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.js",
            "line": 114,
            "description": "Forces the Mapview to perform it's 3D test. It attempts to save the result the test is not run again on subsequent loads. This lets you override that behaviour.\nThe callback will be executed when the test is complete and either the 2D or 3D Mapview is loaded.",
            "itemtype": "method",
            "name": "forceTest",
            "params": [
                {
                    "name": "container",
                    "description": "The div to run the test in. Works best if it's the same as where the MapView will go, as the number of pixels being rendered is a factor.",
                    "type": "Div"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the test is complete and either 2D or 3D mode is ready. The callback will be fired with a `result` key, a boolean that will be true if you are in 3D mode, and the result of the benchmark.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.js",
            "line": 137,
            "description": "This is the typical function to call before instatiating a MapView. It will either perform a test to determine if the current device is capable of running in 3D mode,\nand store the results, or if prior results are available, just use those. Then, it will set Mappedin.MapView to be the constructor for the proper mode. This lets\nthe developer write their website without having to know or care whether the user is experiencing it in 2D or 3D. The callback you pass into the function will give you\nthe results, however, if you care, and you can also determine it from the `type` property on the MapView you create.\n\nIf you would like to force the test to run again, use the forceTest method instead. Or, if you want to force the user into a specific mode, use force2D or force3D respectively.\nNote while 2D should work for basically anyone, if the user's device/browser does not support WebGL and you call force3D, you will get an exception when you create a MapView object.",
            "itemtype": "method",
            "name": "test3D",
            "params": [
                {
                    "name": "container",
                    "description": "The div to run the test in. Works best if it's the same as where the MapView will go, as the number of pixels being rendered is a factor.",
                    "type": "Div"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the test is complete and either 2D or 3D mode is ready. The callback will be fired with a `result` key, a boolean that will be true if you are in 3D mode, and the result of the benchmark.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.js",
            "line": 165,
            "description": "Once you are in 2D or 3D mode, call this function with the options you need for the Mappedin API, and a callback that will give you a Venue object populated with all your data.\nThe `options` object can have the following properties:\n\n\n\toptions = {\n\t\tclientId: <The client ID provided to you by Mappedin. Contact your Mappedin representative if you do not have one>,\n\t\tclientSecret: <The secret that goes along with your ID>,\n\t\tperspective: <The name of specific perspective to use for 2D/3D>,\n\t\tperspective2D: <Use if you have a different perspective to use in 2D mode>,\n\t\tperspective3D: <Use if you have a different perspective to use in 3D mode>,\n\t\tvenue: <The \"slug\" that identifies the specific Venue you are interested in. Mappedin can tell you what it is>,\n\t\t// The things object is where you specifiy what fields you want to download for each object in the Mappedin API\n\t\t// This SDK will ensure it has the 2D or 3D files it needs, but it won't download anything extra (like the names of locations)\n\t\t// unless you specify it here.\n\t\t// This is a typical minimum, though you may have more location properties you are interested in. Talk to Mappedin for more information.\n\t\tthings: {\n\t\t\tvenue: ['slug', 'name'],\n\t\t\tlocations: ['name', 'type', 'description', 'icon', 'logo'],\n\t\t\tcategories: ['name'],\n\t\t\tmaps: ['name', 'elevation', 'shortName']\n\t\t}\n\t}\n\n\nIf you would like to force the test to run again, use the forceTest method instead. Or, if you want to force the user into a specific mode, use force2D or force3D respectively.\nNote while 2D should work for basically anyone, if the user's device/browser does not support WebGL and you call force3D, you will get an exception when you create a MapView object.",
            "itemtype": "method",
            "name": "getVenue",
            "params": [
                {
                    "name": "options",
                    "description": "Any options you need to specify to talk to the Mappedin API",
                    "type": "Object"
                },
                {
                    "name": "clientId",
                    "description": "The client key/ID provided to you by Mappedin to access our API. Contact your Mappedin representative if you do not have one",
                    "type": "String"
                },
                {
                    "name": "clientSecret",
                    "description": "The secret/password that goes along with your ID",
                    "type": "String"
                },
                {
                    "name": "perspective",
                    "description": "The name of the perspective you are using for 2D and 3D. Probably \"Website\". This controls what 3D files or 2D tiles get downloaded, and different persepctives may have different map features enabled/disabled, or have different images.",
                    "type": "String"
                },
                {
                    "name": "perspective2D",
                    "description": "Use if you have a different perspective to use in 2D mode",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "perspective3D",
                    "description": "Use if you have a different perspective to use in 3D mode",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "venue",
                    "description": "The \"slug\" that identifies the specific Venue you are interested in. Mappedin can tell you what it is. Developer accounts often start with \"api-demo1\"",
                    "type": "String"
                },
                {
                    "name": "things",
                    "description": "The things object is where you specifiy what fields you want to download for each object in the Mappedin API. Only specify what you will actually use, to minmimze transfer time. This SDK will ensure it has the 2D or 3D files it needs, and `id` is always included, but it won't download anything extra (like the names of locations) unless you specify it here.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "The Venue information you want. 'slug' and 'name' are typical, but you may also want others. Speak to Mappedin to see what is available.",
                            "type": "Array"
                        },
                        {
                            "name": "locations",
                            "description": "The fields you will be using for any Locations. You probably want at least 'name' and 'type'. You will also probably want 'description' and 'logo', but there can be any number of Location properties and it depends on your Venue and usecase. Talk to Mappedin for more details.",
                            "type": "Array"
                        },
                        {
                            "name": "categories",
                            "description": "The fields you will use for each Category. Typically 'name' at a minimum, but other common fields are 'description', 'picture', 'sortOrder' or 'parents' (for hierarchical categories) as well.",
                            "type": "Array"
                        },
                        {
                            "name": "maps",
                            "description": "The fields on each Map you are interested in. You'll probably want one or both of 'name' or 'shortName', and 'elevation' to sort.",
                            "type": "Array"
                        },
                        {
                            "name": "polygons",
                            "description": "The Polygon fields you want. The default is probably sufficient.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "nodes",
                            "description": "The Node fields you want. The default is probably sufficient.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "callback",
                    "description": "This function is called when the Venue data is loaded, or there is a problem.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "If there is an error, you will get it here. Typically this will only be useful for developers when building/testing. It's not usually something a user can deal with.",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "A Mappedin data object with all the data you asked for. It will have a venue property with a Venue object, and locations, categories, nodes, maps, and polygons arrays",
                            "type": "Mappedin"
                        }
                    ]
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.js",
            "line": 244,
            "description": "This function will take a single options object combining all options for Mappedin.init and the MapView constructor, and the div the MapView should live in.\nIt returns a Promise that will resolve with the MapView once the 3D test has been performed, the right MapView was loaded, the data has been retrieved from the Mappedin API, and\nthe MapView has been created. It could also fail (mostly if the options you set for the Mappedin API are incorrect).\n\nThis is a convenience function that lets you avoid chaining a bunch of callbacks, calling test3D/force2D/force3D then Mappedin.init then the MapView constructor.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "options",
                    "description": "Takes an object combining all options from Mappedin.init, the MapView constructor, and the Search constructor. If you explictly want to set the 3D mode rather than run the test, it also accepts a `mode` property that can be any of Mappedin.mode",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "Any options from Mappedin.getVenue",
                            "type": "Object"
                        },
                        {
                            "name": "mapview",
                            "description": "Any options from the Mappedin.MapView constructor",
                            "type": "Object"
                        },
                        {
                            "name": "search",
                            "description": "Any options from the Mappedin.Seach constructor.",
                            "type": "Object"
                        },
                        {
                            "name": "firstMapSelector",
                            "description": "If you would like to pick the first map loaded, set this function. It gives you a Venue object, and expects a Mappedin Map or Map Id to be returned. Return venue.defaultMap for the default behaviour. If you return an invalid map, an error will be logged to the console and an arbitrary map will be loaded.",
                            "type": "Function"
                        }
                    ]
                },
                {
                    "name": "container",
                    "description": "The HTML element the Mapview will live in.",
                    "type": "Div"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "service-worker.js",
            "line": 1,
            "description": "Offline fallback service worker\n\nThis service worker is designed for offline fallback mode. If you have a network connection at all, it will get the most recent data and use that. If the network is unavailable, it will use the last downloaded version.\nIt has special logic to handle the paging behaviour from the Mappedin API, as a workaround for a weird bug with XHR and Service Workers where \"unsafe\" headers are available in fetch but not XHR.\n\nNOTE: Using this with the Mappedin Web SDK will ensure all the resources the SDK needs are available (since it downloads everything up front), but if you want icons/logos/images from Location objects you will need to ensure your app also\ntries to download them up front as well. If you do, they will be automatically cached.\n\nNOTE2: This will cache all network traffic (which could give you offline support for free for other parts of your app) If you want to limit it to only traffic for the SDK you will have structure your app so the Mappedin\ncode lives in it's own folder, and you register the service worker to only handle requests from things in that folder. Read about Service Workers for more details.",
            "class": "",
            "module": "Mappedin"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Search.js:104"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Search.js:158"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:65"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:92"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:117"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:154"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:176"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:198"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.getVenue.js:214"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:214"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:243"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:272"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:301"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:320"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:385"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:404"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:417"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:449"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:471"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.getVenue.js:497"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:497"
        },
        {
            "message": "unknown tag: callback",
            "line": " source/Mappedin.getVenue.js:526"
        },
        {
            "message": "unknown tag: typedef",
            "line": " source/Mappedin.getVenue.js:533"
        },
        {
            "message": "unknown tag: typedef",
            "line": " source/Mappedin.getVenue.js:539"
        },
        {
            "message": "unknown tag: typedef",
            "line": " source/Mappedin.getVenue.js:547"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:555"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:590"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:616"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:638"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:668"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:697"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:729"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:761"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:884"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:891"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:898"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:905"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:912"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:919"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:926"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:933"
        },
        {
            "message": "Missing item type\nGenerate a unique slug.",
            "line": " docs/assets/vendor/github-slugger/slugger.js:12"
        },
        {
            "message": "Missing item type\nReset - Forget all previous slugs",
            "line": " docs/assets/vendor/github-slugger/slugger.js:37"
        },
        {
            "message": "Missing item type\nGenerate a unique slug.",
            "line": " mappedin-docs-theme/assets/vendor/github-slugger/slugger.js:12"
        },
        {
            "message": "Missing item type\nReset - Forget all previous slugs",
            "line": " mappedin-docs-theme/assets/vendor/github-slugger/slugger.js:37"
        },
        {
            "message": "Missing item type\nHack for:\nhttps://github.com/yui/yuidoc/issues/198\n\nUsage:\n  {{#crossLinkWrapper type}}{{#crossLink type}}{{/crossLink}}{{/crossLinkWrapper}}",
            "line": " mappedin-docs-theme/helpers/helpers.js:55"
        },
        {
            "message": "Missing item type\nLoads a Wavefront .mtl file specifying materials",
            "line": " source/externals/MTLLoader.js:1"
        },
        {
            "message": "Missing item type\nParses loaded MTL file",
            "line": " source/externals/MTLLoader.js:59"
        },
        {
            "message": "Missing item type\nCreate a new THREE-MTLLoader.MaterialCreator",
            "line": " source/externals/MTLLoader.js:125"
        },
        {
            "message": "Missing item type",
            "line": " source/externals/OBJLoader.js:1"
        },
        {
            "message": "Missing item type\nConfiguration parameter: time in milliseconds after which a\npending AJAX request is considered unresponsive and is\naborted. Useful to deal with bad connectivity (e.g. on a\nmobile network). A 0 value disables AJAX timeouts.\n\nAborted requests resolve the promise with a ETIMEOUT error\ncode.",
            "line": " source/externals/promise.js:197"
        },
        {
            "message": "Missing item type\nResets the MapView to the default state.",
            "line": " source/Mappedin.MapView.js:547"
        },
        {
            "message": "Missing item type\nCreate a font for use in 3D by passing in a JSON object generated from https://gero3.github.io/facetype.js/\nIgnored in 2D, retuning null",
            "line": " source/Mappedin.MapView.js:606"
        },
        {
            "message": "Missing item type\nSimple utility function to calculate the maximum scroll bounds for our map so Leaflet\ndoes not scroll outside the map bounds",
            "line": " source/Mappedin.MapView2D.js:323"
        },
        {
            "message": "Missing item type\nTakes Mappedin Polygon data creates the corrisponding Leaflet polygon in the\nmap's frame of reference. Each Mappedin polygon should only have one Leaflet\npolygon. Use highlightPolygon to change the styles.",
            "line": " source/Mappedin.MapView2D.js:368"
        },
        {
            "message": "Missing item type\nLabels a specific polygon (or area of 3D space) with a text label that lives in 3D space.\nThat means it will be smaller when the camera is further away, and the angle you see it at will change with the camera.\nThe text will flip 180 degress when the camera rotates so it's never totally upside-down.\n\nPossible options = {\n\tpolygon - The polygon to make a label for\n\tcanvasBounds - Optional, to do this without a real Mappedin Polygon\n\theight - If you don't have a real polygon, you will need to set a height\n\ttext - The text to make the label\n\tmargin - The amount of space to leave before starting the text\n\tcolor - A optional special color if you don't want to use mapView.colors.text\n\tfontSize - How big to make the font. Defaults to 12\n\tfont - A THREE.Font object, if you have your own font you want to use.\n\tscaleMin - What percentage we can shrink the label to if it won't fit at 100%\n\tscaleStep - How much to decrement the scale each time it doesn't fit, so we don't end up with too many different font sizes\n}\n\nYou must provide AT LEAST text and either polygon or canvasBounds + height.",
            "line": " source/Mappedin.MapView2D.js:762"
        },
        {
            "message": "Missing item type\nLoad the map, if it's not already loaded. Returns the old promise if it's already done, so you can safely call it whenever needed.\n\nIf needed, this could be modified to\n\nReturns a Promise that will be Done when the OBJ, MTL and textures have been downloaded, and the objectsDictionary has been generated.",
            "line": " source/Mappedin.MapView3D.js:239"
        },
        {
            "message": "Missing item type\nA category.",
            "line": " source/Mappedin.getVenue.js:65"
        },
        {
            "message": "Missing item type\nLocations in this category.",
            "line": " source/Mappedin.getVenue.js:92"
        },
        {
            "message": "Missing item type\nA location.",
            "line": " source/Mappedin.getVenue.js:117"
        },
        {
            "message": "Missing item type\nPolygons this location is attached to.",
            "line": " source/Mappedin.getVenue.js:154"
        },
        {
            "message": "Missing item type\nNodes this location is attached to.",
            "line": " source/Mappedin.getVenue.js:176"
        },
        {
            "message": "Missing item type\nParent of this location, if any",
            "line": " source/Mappedin.getVenue.js:198"
        },
        {
            "message": "Missing item type\nGet vortexes with their nodes",
            "line": " source/Mappedin.getVenue.js:243"
        },
        {
            "message": "Missing item type\nA map group.",
            "line": " source/Mappedin.getVenue.js:272"
        },
        {
            "message": "Missing item type\nMaps within this map group.",
            "line": " source/Mappedin.getVenue.js:301"
        },
        {
            "message": "Missing item type\nA map.",
            "line": " source/Mappedin.getVenue.js:320"
        },
        {
            "message": "Missing item type\nPolygons on this map.",
            "line": " source/Mappedin.getVenue.js:385"
        },
        {
            "message": "Missing item type\nMap group this map belongs to. Null if the map is part of the \"default\" map\ngroup.",
            "line": " source/Mappedin.getVenue.js:404"
        },
        {
            "message": "Missing item type\nA node.",
            "line": " source/Mappedin.getVenue.js:417"
        },
        {
            "message": "Missing item type\nAdjacent nodes.",
            "line": " source/Mappedin.getVenue.js:449"
        },
        {
            "message": "Missing item type\nLocations attached to this node.",
            "line": " source/Mappedin.getVenue.js:471"
        },
        {
            "message": "Missing item type\nDirections callback.",
            "line": " source/Mappedin.getVenue.js:526"
        },
        {
            "message": "Missing item type\nA polygon.",
            "line": " source/Mappedin.getVenue.js:555"
        },
        {
            "message": "Missing item type\nLocations attached to the polygon.",
            "line": " source/Mappedin.getVenue.js:590"
        },
        {
            "message": "Missing item type\nPolygon's entrance nodes.",
            "line": " source/Mappedin.getVenue.js:616"
        },
        {
            "message": "Missing item type\nA venue.",
            "line": " source/Mappedin.getVenue.js:638"
        },
        {
            "message": "Missing item type\nAn Apollo Theme.",
            "line": " source/Mappedin.getVenue.js:668"
        },
        {
            "message": "Missing item type\nAn event.",
            "line": " source/Mappedin.getVenue.js:697"
        },
        {
            "message": "Missing item type\nLocation this event is occuring at.",
            "line": " source/Mappedin.getVenue.js:729"
        },
        {
            "message": "Missing item type\nVenue aggregate root.",
            "line": " source/Mappedin.getVenue.js:761"
        },
        {
            "message": "Missing item type\nCollection of categories.",
            "line": " source/Mappedin.getVenue.js:884"
        },
        {
            "message": "Missing item type\nCollection of locations.",
            "line": " source/Mappedin.getVenue.js:891"
        },
        {
            "message": "Missing item type\nCollection of maps.",
            "line": " source/Mappedin.getVenue.js:898"
        },
        {
            "message": "Missing item type\nCollection of nodes.",
            "line": " source/Mappedin.getVenue.js:905"
        },
        {
            "message": "Missing item type\nCollection of polygons.",
            "line": " source/Mappedin.getVenue.js:912"
        },
        {
            "message": "Missing item type\nA venue.",
            "line": " source/Mappedin.getVenue.js:919"
        },
        {
            "message": "Missing item type\nCollection of events.",
            "line": " source/Mappedin.getVenue.js:926"
        },
        {
            "message": "Missing item type\nCollection of map groups.",
            "line": " source/Mappedin.getVenue.js:933"
        },
        {
            "message": "Missing item type\nOffline fallback service worker\n\nThis service worker is designed for offline fallback mode. If you have a network connection at all, it will get the most recent data and use that. If the network is unavailable, it will use the last downloaded version.\nIt has special logic to handle the paging behaviour from the Mappedin API, as a workaround for a weird bug with XHR and Service Workers where \"unsafe\" headers are available in fetch but not XHR.\n\nNOTE: Using this with the Mappedin Web SDK will ensure all the resources the SDK needs are available (since it downloads everything up front), but if you want icons/logos/images from Location objects you will need to ensure your app also\ntries to download them up front as well. If you do, they will be automatically cached.\n\nNOTE2: This will cache all network traffic (which could give you offline support for free for other parts of your app) If you want to limit it to only traffic for the SDK you will have structure your app so the Mappedin\ncode lives in it's own folder, and you register the service worker to only handle requests from things in that folder. Read about Service Workers for more details.",
            "line": " service-worker.js:1"
        }
    ]
}
{
    "project": {
        "name": "The Mappedin Web SDK",
        "description": "An easy way to render beautiful 2D or 3D maps on your website, powered by Mappedin",
        "version": "1.71.6",
        "url": "https://github.com/MappedIn/platform-api",
        "primaryColor": "#ff5000",
        "indexModule": "Mappedin"
    },
    "files": {
        "__tests__/blue-dot-utils.test.js": {
            "name": "__tests__/blue-dot-utils.test.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "docs/assets/vendor/github-slugger/slugger.js": {
            "name": "docs/assets/vendor/github-slugger/slugger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js": {
            "name": "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "mappedin-docs-theme/helpers/helpers.js": {
            "name": "mappedin-docs-theme/helpers/helpers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/externals/MTLLoader.js": {
            "name": "source/externals/MTLLoader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/externals/OBJLoader.js": {
            "name": "source/externals/OBJLoader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/externals/promise.js": {
            "name": "source/externals/promise.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Analytics.js": {
            "name": "source/Mappedin.Analytics.js",
            "modules": {},
            "classes": {
                "Analytics": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.CameraControls.InputSet.js": {
            "name": "source/Mappedin.CameraControls.InputSet.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.CameraControls.TouchAnchor.js": {
            "name": "source/Mappedin.CameraControls.TouchAnchor.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.CameraControls.js": {
            "name": "source/Mappedin.CameraControls.js",
            "modules": {},
            "classes": {
                "CameraControls": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.CameraLayers.js": {
            "name": "source/Mappedin.CameraLayers.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.ClosedPolygonManager.js": {
            "name": "source/Mappedin.ClosedPolygonManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.CollisionEngine.js": {
            "name": "source/Mappedin.CollisionEngine.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Color.js": {
            "name": "source/Mappedin.Color.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.ConnectionMarker.js": {
            "name": "source/Mappedin.ConnectionMarker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.DebugUI.js": {
            "name": "source/Mappedin.DebugUI.js",
            "modules": {},
            "classes": {
                "DebugUI": 1,
                "PerformanceEntry": 1,
                "LineGraph": 1,
                "TimeSeries": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.FlippableImage.js": {
            "name": "source/Mappedin.FlippableImage.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.HoverLabel.js": {
            "name": "source/Mappedin.HoverLabel.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapManager.js": {
            "name": "source/Mappedin.MapManager.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapObject.js": {
            "name": "source/Mappedin.MapObject.js",
            "modules": {},
            "classes": {
                "ThreeJSMarkerHandle": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapView.js": {
            "name": "source/Mappedin.MapView.js",
            "modules": {},
            "classes": {
                "MapView": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapView2D.Marker.js": {
            "name": "source/Mappedin.MapView2D.Marker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapView2D.js": {
            "name": "source/Mappedin.MapView2D.js",
            "modules": {},
            "classes": {
                "MapView2D": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapView3D.Marker.js": {
            "name": "source/Mappedin.MapView3D.Marker.js",
            "modules": {},
            "classes": {
                "Marker": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MapboxOutdoorContext.js": {
            "name": "source/Mappedin.MapboxOutdoorContext.js",
            "modules": {},
            "classes": {
                "MapboxOutdoorContext": 1,
                "MockMap": 1,
                "MockPainter": 1,
                "MockTransform": 1,
                "TileRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.MultiFloorView.js": {
            "name": "source/Mappedin.MultiFloorView.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Navigator.js": {
            "name": "source/Mappedin.Navigator.js",
            "modules": {},
            "classes": {
                "Navigator": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.RenderTasks.js": {
            "name": "source/Mappedin.RenderTasks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Renderer.js": {
            "name": "source/Mappedin.Renderer.js",
            "modules": {},
            "classes": {
                "Renderer": 1,
                "SingleBufferRenderer": 1,
                "MultiBufferRenderer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Search.js": {
            "name": "source/Mappedin.Search.js",
            "modules": {},
            "classes": {
                "Search": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.SmartLabel.js": {
            "name": "source/Mappedin.SmartLabel.js",
            "modules": {},
            "classes": {
                "SmartLabelBatchCreator": 1,
                "SmartLabel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.TaskScheduler.js": {
            "name": "source/Mappedin.TaskScheduler.js",
            "modules": {},
            "classes": {
                "FrameUpdate": 1,
                "FrameTask": 1,
                "FrameTaskGroup": 1,
                "RealTimeTimer": 1,
                "FixedTimer": 1,
                "TaskScheduler": 1,
                "Multimap": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.TextLabel.js": {
            "name": "source/Mappedin.TextLabel.js",
            "modules": {},
            "classes": {
                "TextLabel": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.Tooltip.js": {
            "name": "source/Mappedin.Tooltip.js",
            "modules": {},
            "classes": {
                "Tooltip": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/Mappedin.getVenue.js": {
            "name": "source/Mappedin.getVenue.js",
            "modules": {},
            "classes": {
                "MappedinCategory": 1,
                "MappedinLocation": 1,
                "MappedinVortex": 1,
                "MappedinMapGroup": 1,
                "MappedinMap": 1,
                "MappedinNode": 1,
                "MappedinDirections": 1,
                "MappedinDirective": 1,
                "MappedinPolygon": 1,
                "MappedinVenue": 1,
                "MappedinEvent": 1,
                "MappedinLocationState": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/blue-dot-manager.js": {
            "name": "source/blue-dot-manager.js",
            "modules": {},
            "classes": {
                "BlueDotManager": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "source/blue-dot-utils.js": {
            "name": "source/blue-dot-utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/json-scene-loader.js": {
            "name": "source/json-scene-loader.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "source/utils.js": {
            "name": "source/utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Mappedin-common.es.js": {
            "name": "Mappedin-common.es.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Mappedin-node.es.js": {
            "name": "Mappedin-node.es.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "Mappedin-web.es.js": {
            "name": "Mappedin-web.es.js",
            "modules": {
                "Mappedin": 1
            },
            "classes": {
                "Mappedin": 1,
                "Easing": 1,
                "Tween": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "service-worker.js": {
            "name": "service-worker.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "web-demo-utils.js": {
            "name": "web-demo-utils.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "Mappedin": {
            "name": "Mappedin",
            "submodules": {},
            "elements": {},
            "classes": {
                "Analytics": 1,
                "CameraControls": 1,
                "DebugUI": 1,
                "PerformanceEntry": 1,
                "LineGraph": 1,
                "TimeSeries": 1,
                "ThreeJSMarkerHandle": 1,
                "MapView": 1,
                "MapView2D": 1,
                "Marker": 1,
                "MapboxOutdoorContext": 1,
                "MockMap": 1,
                "MockPainter": 1,
                "MockTransform": 1,
                "TileRenderer": 1,
                "Navigator": 1,
                "Renderer": 1,
                "SingleBufferRenderer": 1,
                "MultiBufferRenderer": 1,
                "Search": 1,
                "SmartLabelBatchCreator": 1,
                "SmartLabel": 1,
                "FrameUpdate": 1,
                "FrameTask": 1,
                "FrameTaskGroup": 1,
                "RealTimeTimer": 1,
                "FixedTimer": 1,
                "TaskScheduler": 1,
                "Multimap": 1,
                "TextLabel": 1,
                "Tooltip": 1,
                "MappedinCategory": 1,
                "MappedinLocation": 1,
                "MappedinVortex": 1,
                "MappedinMapGroup": 1,
                "MappedinMap": 1,
                "MappedinNode": 1,
                "MappedinDirections": 1,
                "MappedinDirective": 1,
                "MappedinPolygon": 1,
                "MappedinVenue": 1,
                "MappedinEvent": 1,
                "MappedinLocationState": 1,
                "Mappedin": 1,
                "BlueDotManager": 1,
                "Easing": 1,
                "Tween": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "Mappedin-web.es.js",
            "line": 41,
            "description": "The base Mappedin module, that has references to all the other Mappedin objects you need.\n\nStart with Mappedin.initialize, which will get the data for a Venue from the Mappedin API, and set up a MapView, Search, and Analytics object for you.",
            "itemtype": "main"
        }
    },
    "classes": {
        "Analytics": {
            "name": "Analytics",
            "shortname": "Analytics",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Analytics.js",
            "line": 6,
            "description": "A class to access the Mappedin Analytics platform. Correct usage will improve Smart Search results, and lead to more accurate insights.\nThis will be created for you as part of Mappedin.{{#crossLink \"Mappedin/initialize:method\"}}{{/crossLink}}, but you can also create one manually. You are mostly going to use `locationSelected`.",
            "type": "{any}",
            "params": [
                {
                    "name": "options",
                    "description": "A list of configuration options for the Analytics API.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "key",
                            "description": "The same key you are using for getVenue. Handled automatically in Mapview.initialize()",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "secret",
                            "description": "The same secret you are using for getVenue. Handled automatically in Mapview.initialize()",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "venue",
                            "description": "The same venue slug you are using for getVenue. Handled automatically in MapView.initialize()",
                            "type": "String",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "CameraControls": {
            "name": "CameraControls",
            "shortname": "CameraControls",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.CameraControls.js",
            "line": 31,
            "description": "The advanced, manual camera controls for {{#crossLink \"MapView\"}}{{/crossLink}}. You probably don't need to use this at all, instead relying on the MapView's {{#crossLink \"MapView/focusOn:method\"}}{{/crossLink}}, {{#crossLink \"MapView/resetCamera:method\"}}{{/crossLink}} and built in touch/mouse controls.\nThis class will let you do things like change the min/max zoom, tilt, and pan, attach to camera events, and move/animate the camera to specifc points.\n\nThe camera works by setting an anchor point on the scene at ground level and pointing the camera at it. {{#crossLink \"CameraControls/zoom:method\"}}{{/crossLink}} controls how far the camera is from the anchor, and {{#crossLink \"CameraControls/tilt:method\"}}{{/crossLink}}/{{#crossLink \"CameraControls/rotate:method\"}}{{/crossLink}} controls the angle the camera is rotated about it.\nThe camera will always be pointed directly at the anchor point. {{#crossLink \"CameraControls/pan:method\"}}{{/crossLink}} or {{#crossLink \"CameraControls/setPosition:method\"}}{{/crossLink}} will move that anchor around on the 2D ground plane.\n\nCreated for you automatically with a MapView, don't re-create yourself.",
            "type": "{any}"
        },
        "DebugUI": {
            "name": "DebugUI",
            "shortname": "DebugUI",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.DebugUI.js",
            "line": 36,
            "description": "A DOM element that can be populated with performance information.",
            "access": "private",
            "tagname": ""
        },
        "PerformanceEntry": {
            "name": "PerformanceEntry",
            "shortname": "PerformanceEntry",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.DebugUI.js",
            "line": 419,
            "description": "A DOM element and model containing the performance characteristics of a\nspecific part of computation.",
            "access": "private",
            "tagname": ""
        },
        "LineGraph": {
            "name": "LineGraph",
            "shortname": "LineGraph",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.DebugUI.js",
            "line": 588,
            "description": "A graph on a HTML canvas element that will display the values in the given\ntime series.",
            "access": "private",
            "tagname": ""
        },
        "TimeSeries": {
            "name": "TimeSeries",
            "shortname": "TimeSeries",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.DebugUI.js",
            "line": 704,
            "description": "A time series that averages values that are reported to it and inserts them\ninto a ring buffer.",
            "access": "private",
            "tagname": ""
        },
        "ThreeJSMarkerHandle": {
            "name": "ThreeJSMarkerHandle",
            "shortname": "ThreeJSMarkerHandle",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapObject.js",
            "line": 785,
            "description": "A handle to a 3D marker added to a map."
        },
        "MapView": {
            "name": "MapView",
            "shortname": "MapView",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapView.js",
            "line": 1,
            "description": "The base MapView. This will either be 2D or 3D. Make sure you run one of Mappedin.{{#crossLink \"Mappedin/test3D:method\"}}{{/crossLink}}, .{{#crossLink \"Mappedin/forceTest:method\"}}{{/crossLink}}, .{{#crossLink \"Mappedin/force2D:method\"}}{{/crossLink}} or .{{#crossLink \"Mappedin/force3D:method\"}}{{/crossLink}} before you try an instantiate one.",
            "type": "{any}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The div to place the MapView in.",
                    "type": "Div"
                },
                {
                    "name": "venue",
                    "description": "The results from the Mappedin API that powers this MapView.",
                    "type": "MappedinVenue"
                },
                {
                    "name": "options",
                    "description": "Some options the MapView can use.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "antialias",
                            "description": "Controls whether antialiasing is on. Defaults to true, as long as devicePixelRatio is 1. This is very expensive on high resolution screens.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "onDataLoaded",
                            "description": "A callback executed with the 3D files have been downloaded for the first map, and are starting to load into memory. The MapView is fully functional at this point, but some things will still be popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFirstMapLoaded",
                            "description": "A callback executed when the first Map is fully loaded. This means onDataLoaded has already been fired (if specified) and then all the textures and other resources have finished popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "firstMap",
                            "description": "If you don't want to load the default Map first, set the Map you want to load first here. Useful for deep linking to a certain floor/location. Since you won't have the Map object/ID until you get the {{#crossLink \"MappedinVenue\"}}{{/crossLink}} data, there is a callback you can set on Mappedin.{{#crossLink \"Mappedin/initialize:method\"}}{{/crossLink}}to fill this in.",
                            "type": "MappedinMap",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "MapView2D": {
            "name": "MapView2D",
            "shortname": "MapView2D",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapView2D.js",
            "line": 17,
            "description": "The MapView class, but in 2D. A number of these functions don't actually do anything in 2D at the moment.",
            "extends": "MapView",
            "is_constructor": 1,
            "params": [
                {
                    "name": "container",
                    "description": "The div to place the MapView in.",
                    "type": "Div"
                },
                {
                    "name": "venue",
                    "description": "The results from the Mappedin API that powers this MapView.",
                    "type": "Venue"
                },
                {
                    "name": "options",
                    "description": "Some options the MapView can use.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "onDataLoaded",
                            "description": "A callback executed with the 3D files have been downloaded for the first Map, and are starting to load into memory. The MapView is fully functional at this point, but some things will still be popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "onFirstMapLoaded",
                            "description": "A callback executed when the first Map is fully loaded. This means onDataLoaded has already been fired (if specified) and then all the textures and other resources have finished popping in.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "firstMap",
                            "description": "If you don't want to load the default Map first, set the Map you want to load first here. Useful for deep linking to a certain floor/location. Since you won't have the Map object/ID until you get the {{#crossLink \"MappedinVenue\"}}{{/crossLink}}, there is a callback you can set on Mappedin{{#crossLink \"Mappedin/initailize:property\"}}{{/crossLink}} to fill this in.",
                            "type": "MappedinMap",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Marker": {
            "name": "Marker",
            "shortname": "Marker",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapView3D.Marker.js",
            "line": 8,
            "description": "A Marker is a div with whatever HTML you provide, anchored it to a `position` in 3D space. It will always maintain the same size on the screen.\nMake your own and add it directly to the map with {{#crossLink \"MapView/createMarker:method\"}}{{/crossLink}}, or use the constructor and add it when you want.\n\nYou will need to specify at least `options.html` and `options.position` to have a useful Marker.",
            "type": "{any}",
            "is_constructor": 1,
            "params": [
                {
                    "name": "MapView",
                    "description": "mapView The MapView this Marker will be added to."
                },
                {
                    "name": "options",
                    "description": "Object",
                    "props": [
                        {
                            "name": "html",
                            "description": "The body of the Marker. You can put any HTML in here you like."
                        },
                        {
                            "name": "position",
                            "description": "Where on the map the Marker should be anchored. You need to use one of the MapView.getPositionX functions to get a position."
                        },
                        {
                            "name": "class",
                            "description": "The name of the CSS class the Marker should inherit.",
                            "optional": true
                        },
                        {
                            "name": "map",
                            "description": "The map the Marker is attached to.",
                            "optional": true,
                            "optdefault": "mapView.currentMap"
                        },
                        {
                            "name": "MarkerBuffer",
                            "description": "Keep this much space between this Marker and other nearby Markers.",
                            "optional": true,
                            "optdefault": "2"
                        },
                        {
                            "name": "lockToAnchor",
                            "description": "Make the Marker stay firmly attached to its anchor and not get pushed away by other Markers or camera movement. Still hits other Markers.",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "ignoreCollisions",
                            "description": "Allow other Markers to overlap this Marker. Combine with `lockToAnchor=true` to completely opt out of the physics engine for this Marker.",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "rotateWithCamera",
                            "description": "Make the Marker rotate with the rotation of the camera.",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "rotation",
                            "description": "Set the initial rotation of the Marker. Use this, combined with `rotateWithCamera=true` to create turn indicators that always point the right direction.",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                }
            ]
        },
        "MapboxOutdoorContext": {
            "name": "MapboxOutdoorContext",
            "shortname": "MapboxOutdoorContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 52,
            "description": "A set of street tiles loaded from the Mapbox SDK that can be rendered to a\nWebGL context.",
            "access": "private",
            "tagname": ""
        },
        "MockMap": {
            "name": "MockMap",
            "shortname": "MockMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 660,
            "description": "An object which is duck-typed to look like a mapbox `Map` object.",
            "access": "private",
            "tagname": ""
        },
        "MockPainter": {
            "name": "MockPainter",
            "shortname": "MockPainter",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 703,
            "description": "A `Painter` object which is duck-typed to look like a mapbox `Painter`\nobject, on which the mapbox SDK will be setting properties under the\nmistaken belief that this class will be used for rendering. (It won't.)\n\nAlso acts as a cache for tile textures, for some reason.",
            "access": "private",
            "tagname": ""
        },
        "MockTransform": {
            "name": "MockTransform",
            "shortname": "MockTransform",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 749,
            "description": "A `Transform` object which is duck-typed to look like a mapbox `Transform`\nobject, to tell the `SourceCache` which tiles are currently in view of the\ncamera.",
            "access": "private",
            "tagname": ""
        },
        "TileRenderer": {
            "name": "TileRenderer",
            "shortname": "TileRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1158,
            "description": "A class that holds the WebGL vertex buffers and shaders used for rendering the\nMapbox outdoor context to a WebGL rendering context.",
            "access": "private",
            "tagname": ""
        },
        "Navigator": {
            "name": "Navigator",
            "shortname": "Navigator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Navigator.js",
            "line": 58,
            "description": "Navigator, responsible for displaying directions in simple and complex journeys",
            "is_constructor": 1
        },
        "Renderer": {
            "name": "Renderer",
            "shortname": "Renderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Renderer.js",
            "line": 23,
            "description": "A class that controls the rendering resources for a canvas output.",
            "access": "private",
            "tagname": ""
        },
        "SingleBufferRenderer": {
            "name": "SingleBufferRenderer",
            "shortname": "SingleBufferRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Renderer.js",
            "line": 258,
            "description": "A legacy renderer that renders all the elements in the scene to a single\nbuffer. Does not support things like transparent paths behind polygons\nnatively, but can potentially fake it.\n\n2019/07/10 Terence Dickson\nGenerally has worse performance under average loads compared to the\nmulti-buffer renderer, as the multi-buffer renderer can avoid re-rendering\nthe entire map if only animated elements on the map have changed.",
            "access": "private",
            "tagname": ""
        },
        "MultiBufferRenderer": {
            "name": "MultiBufferRenderer",
            "shortname": "MultiBufferRenderer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Renderer.js",
            "line": 362,
            "description": "Our new renderer that renders static elements to one buffer and animated\nelements to another buffer, allowing only the latter buffer to be\nre-rendered if the camera isn't moving. There is also a third buffer that\ncan be used to render elements that must appear always on top.\n\nDoes not yet support antialiasing.\n\n2019/07/10 Terence Dickson\nGenerally has better performance under average loads compared to the\nsingle-buffer renderer, but does not work on IE 11.",
            "access": "private",
            "tagname": ""
        },
        "Search": {
            "name": "Search",
            "shortname": "Search",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Search.js",
            "line": 4,
            "description": "A class to access the Mappedin Search API. This will be created for you as part of Mappedin.{{#crossLink \"Mappedin/initailize:method\"}}{{/crossLink}}, but you can also create one manually.",
            "type": "{any}",
            "params": [
                {
                    "name": "options",
                    "description": "A list of configuration options for the search API.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "The venue slug to search for",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "key",
                            "description": "Your search key",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "secret",
                            "description": "Your search secret",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "smart",
                            "description": "Whether the new Smart Search should be used.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "endpoint",
                            "description": "The endpoint for search.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "locations",
                            "description": "Array of MappedinLocations for this venue. This is optional, but will enable fallback search.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "categories",
                            "description": "Array of MappedinCategorys for this venue. This is optional, but will enable fallback search.",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "SmartLabelBatchCreator": {
            "name": "SmartLabelBatchCreator",
            "shortname": "SmartLabelBatchCreator",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.SmartLabel.js",
            "line": 39,
            "description": "An optimization technique that is used to efficiently add newly created smart label elements to the DOM in batches as opposed to one-by-one. The rationale for this is to avoid unnecessary style recalculations, reflows, repaints and \"layout thrashing\".\n\nBatching works via a debouncer. Whenever a new label is added to the batch, the debouncer is ticked. Once the debouncer elapses, the batch is added to the DOM.\n\nThe ideal number of batches is 1, which is a function of the configured `debounceDelayMS` and the time delay between individual label creation attemps. In most cases, the expected pattern is a flurry of label insertions within milliseconds of each other.\n\nA unique instance should be created per map."
        },
        "SmartLabel": {
            "name": "SmartLabel",
            "shortname": "SmartLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.SmartLabel.js",
            "line": 104,
            "description": "An internal representaion of a 2D text label. Make your own with {{#crossLink \"MapView/labelPolygon:method\"}}{{/crossLink}}."
        },
        "FrameUpdate": {
            "name": "FrameUpdate",
            "shortname": "FrameUpdate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 50,
            "description": "A function that can be submitted to the Task Scheduler to run each frame for\nsome provided number of frames. A single update can be repeatedly submitted;\nif the number of frames left on the update is less than `frameCount`, it will\nbe reset to `frameCount`.",
            "access": "private",
            "tagname": ""
        },
        "FrameTask": {
            "name": "FrameTask",
            "shortname": "FrameTask",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 115,
            "description": "A task that can be submitted to the Task Scheduler to be run every time\nthere is a frame update with spare time in the frame.",
            "access": "private",
            "tagname": ""
        },
        "FrameTaskGroup": {
            "name": "FrameTaskGroup",
            "shortname": "FrameTaskGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 192,
            "description": "A group of tasks that must all be completed before the group is considered\ncomplete. The tasks will be automatically garbage collected so that references\nto the task don't linger.",
            "access": "private",
            "tagname": ""
        },
        "RealTimeTimer": {
            "name": "RealTimeTimer",
            "shortname": "RealTimeTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 287,
            "description": "A timer for the task scheduler that uses real wall-time to determine if there's\nenough remaining time in a frame to execute another task.",
            "access": "private",
            "tagname": ""
        },
        "FixedTimer": {
            "name": "FixedTimer",
            "shortname": "FixedTimer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 330,
            "description": "A timer that ticks every time `hasTimeRemaining` is called.",
            "access": "private",
            "tagname": ""
        },
        "TaskScheduler": {
            "name": "TaskScheduler",
            "shortname": "TaskScheduler",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 372,
            "description": "A class that handles scheduling tasks to be performed within the time\nconstraints of frame updates, triggered using `requestAnimationFrame`.\n\nTasks can either be scheduled once per frame (called \"frame updates\"), or\nto execute as many times per frame as there is room for after processing\nall frame updates (called \"frame tasks\").\n\nPosted tasks will always run during the same frame, assuming there's time to\nprocess them. However, an update or task that posts an update will not run\nthat update until the next frame.",
            "access": "private",
            "tagname": ""
        },
        "Multimap": {
            "name": "Multimap",
            "shortname": "Multimap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 994,
            "description": "A map that maps a numeric key to a set of values.\n\nFor use in the scheduler, we also maintain a sorted list of keys.",
            "access": "private",
            "tagname": ""
        },
        "TextLabel": {
            "name": "TextLabel",
            "shortname": "TextLabel",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.TextLabel.js",
            "line": 22,
            "description": "An internal representation of a 3D text label. Make your own with {{#crossLink \"MapView/labelPolygon:method\"}}{{/crossLink}}.",
            "type": "{any}"
        },
        "Tooltip": {
            "name": "Tooltip",
            "shortname": "Tooltip",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.Tooltip.js",
            "line": 30,
            "description": "A Tooltip is an html element that attempts to orient itself around an anchor in 3D space. It will always maintain the same size on the screen, but will attempt to change its orientation based on other colliders in the scene.\nMake your own and add it directly to the map with {{#crossLink \"MapView/createTooltip:method\"}}{{/crossLink}}, or use the constructor and add it when you want.\nYou will need to specify at least `options.position` and one of `options.html` and `options.selector` OR `options.contentHtml`.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Passes on options (e.g. html, text, position, map, padding, defaultAnchorType, enabledAnchorTypes, collisionRank) to MapView.Tooltip's options argument.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "html",
                            "description": "Pass in custom html for your marker, if using this method you must also pass in a selector for your content.",
                            "optional": true
                        },
                        {
                            "name": "selector",
                            "description": "Used in conjuction with the html property to select the div for repositioning",
                            "optional": true
                        },
                        {
                            "name": "contentHtml",
                            "description": "Use mappedin's default tooltip styling with custom inner html content",
                            "optional": true
                        },
                        {
                            "name": "text",
                            "description": "Instead of passing html pass in plain text to be displayed in the tooltip",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "should be something you got from }{{/crossLink}} or {{#crossLink \"MapView/getPositionNode:method\"}}{{/crossLink}}.",
                            "type": "#crossLink \"MapView/getPositionPolygon:method\"",
                            "optional": true
                        },
                        {
                            "name": "map",
                            "description": "The map ID where the tooltip should be displayed",
                            "optional": true
                        },
                        {
                            "name": "defaultAnchorType",
                            "description": "The default orientation to place the tooltip.",
                            "optional": true
                        },
                        {
                            "name": "padding",
                            "description": "The distance in pixel to offset the tooltip from the anchor point.",
                            "optional": true
                        },
                        {
                            "name": "enabledAnchorTypes",
                            "description": "An object used to disable certain anchor positions from being used.",
                            "optional": true
                        },
                        {
                            "name": "collisionRank",
                            "description": "The rank of the object used when comparing colliders to determine which should be shown.",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "MappedinCategory": {
            "name": "MappedinCategory",
            "shortname": "MappedinCategory",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 56,
            "description": "A {{#crossLink \"MappedinCategory\"}}{{/crossLink}} is a collection of similar Locations.\n\nA Category can have more properties such as 'name', or 'parents' (for hierarchical categories) as well.\nFor example, you may have a Fashion category, which has a Men's Fashion and Women's Fashion category. A Men's clothing store would belong to the Men’s Fashion category, but not necessarily be present in the Fashion category's list of Locations.\n\nThe {{#crossLink \"Mappedin\"}}{{/crossLink}} 'things' object is where you would specify what properties you want to download for Categories. Only specify what you will actually use, to minmimze transfer time. Work with your Mappedin developer relations contact to set up any custom properties you need.\n\nSee below for an example a 'things' object with available Category properties specified:\n\n\tthings: {\n\t\tvenue: [],\n\t\tlocations: [],\n\t\tcategories: ['venue', 'name', 'language', 'externalId', 'parents'],\n\t\tmaps: []\n\t}"
        },
        "MappedinLocation": {
            "name": "MappedinLocation",
            "shortname": "MappedinLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 130,
            "description": "A {{#crossLink \"MappedinLocation\"}}{{/crossLink}} is something like a store or washroom on a {{#crossLink \"MappedinMap\"}}{{/crossLink}}. It has an ID and will be linked to zero or more {{#crossLink \"MappedinNode\"}}{{/crossLink}}s and {{#crossLink \"MappedinPolygon\"}}{{/crossLink}}s.\n\nA Location's Nodes and Polygons can be on multiple Maps, or in multiple non-adjacent places on the same Map.\n For example, all washroom at a given Venue could belong to one Location, or a department store could live on multiple floors. A Washroom Location might a have a few Polygons spread throughout the Venue for each one that exists, but a single store might just have one presence, and therefore one Polygon. Some Locations just have a single point and only have Nodes.\n\nA Location can have more properties (typically things like 'name', 'externalId', 'type', 'categories', 'description', 'logo', etc).\n\nThe {{#crossLink \"Mappedin\"}}{{/crossLink}} 'things' object is where you would specify what properties you want to download for Locations. Only specify what you will actually use, to minmimze transfer time. Work with your Mappedin developer relations contact to set up any custom properties you need.\n\nSee below for an example a 'things' object with available Location properties specified:\n\n\tthings: {\n\t\tvenue: [],\n\t\tlocations: ['venue', 'name', 'type', 'icon', 'logo', 'language', 'externalId', 'description', 'categories', 'phone', 'operationHours', 'social', 'tags', 'parents', 'sortOrder'],\n\t\tcategories: [],\n\t\tmaps: []\n\t}"
        },
        "MappedinVortex": {
            "name": "MappedinVortex",
            "shortname": "MappedinVortex",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 338,
            "description": "A {{#crossLink \"MappedinVortex\"}}{{/crossLink}} is a special entity that represents a link between two or more {{#crossLink \"MappedinMap\"}}{{/crossLink}}s at a given {{#crossLink \"MappedinVenue\"}}{{/crossLink}}. It is typically something like an elevator or stairs. These are also known as Connections in some parts of the system.\n\nThey can be marked (wheelchair) Accessible or not for pathfinding purposes. If you ask for Accessible directions, paths that include non-accessible Vortexes like Stairs will not be used."
        },
        "MappedinMapGroup": {
            "name": "MappedinMapGroup",
            "shortname": "MappedinMapGroup",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 388,
            "description": "A {{#crossLink \"MappedinMapGroup\"}}{{/crossLink}} is a collection of maps, usually representing the different floors of a single building. All Maps will be in a MapGroup, but if your Venue is only a single building (like a mall) you can likely ignore MapGroups entirely."
        },
        "MappedinMap": {
            "name": "MappedinMap",
            "shortname": "MappedinMap",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 442,
            "description": "A {{#crossLink \"MappedinMap\"}}{{/crossLink}} belonging to a specific {{#crossLink \"MappedinVenue\"}}{{/crossLink}}. Typically represents a certain floor. Give this to a {{#crossLink \"MapView\"}}{{/crossLink}} to display to the user.\n\nA Map can have more properties such as 'elevation', 'name' (e.g. Level 1), and 'shortName' (e.g. L1). The elevation property can be used to determine the order of the floors (first, second, etc). Elevation is 0 based, going up and down in integers representing the number of floors above or below 0, which is ground level.\n\nThe {{#crossLink \"Mappedin\"}}{{/crossLink}} 'things' object is where you would specify what properties you want to download for Maps. Only specify what you will actually use, to minmimze transfer time. Work with your Mappedin developer relations contact to set up any custom properties you need.\n\nSee below for an example a 'things' object with available Map properties specified:\n\n\tthings: {\n\t\tvenue: [],\n\t\tlocations: [],\n\t\tcategories: [],\n\t\tmaps: ['name', 'elevation', 'shortName']\n\t}"
        },
        "MappedinNode": {
            "name": "MappedinNode",
            "shortname": "MappedinNode",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 583,
            "description": "A {{#crossLink \"MappedinNode\"}}{{/crossLink}} represents a position, anchored to a specific {{#crossLink \"MappedinMap\"}}{{/crossLink}}.\n\nA Node can have more properties but usually the default is sufficient. The {{#crossLink \"Mappedin\"}}{{/crossLink}} 'things' object is where you would specify what properties you want to download for Nodes. Only specify what you will actually use, to minmimze transfer time. Work with your Mappedin developer relations contact to set up any custom properties you need."
        },
        "MappedinDirections": {
            "name": "MappedinDirections",
            "shortname": "MappedinDirections",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 1061,
            "description": "A {{#crossLink \"MappedinDirections\"}}{{/crossLink}} object will contain an array of {{#crossLink \"MappedinNode\"}}{{/crossLink}}s on a path, and a corresponding list of {{#crossLink \"MappedinDirective\"}}{{/crossLink}} objects representing the instructions to display to the user."
        },
        "MappedinDirective": {
            "name": "MappedinDirective",
            "shortname": "MappedinDirective",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 1375,
            "description": "A {{#crossLink \"MappedinDirective\"}}{{/crossLink}} is an instruction for a user to get from one place to another."
        },
        "MappedinPolygon": {
            "name": "MappedinPolygon",
            "shortname": "MappedinPolygon",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 1430,
            "description": "The {{#crossLink \"MappedinPolygon\"}}{{/crossLink}} class represents the 3D shape of a {{#crossLink \"MappedinLocation\"}}{{/crossLink}} on a {{#crossLink \"MappedinMap\"}}{{/crossLink}}. Polygons have access to Locations they belong to, and any entrances to the Polygon.\n\nA Polygon can have more properties but usually the default is sufficient. The {{#crossLink \"Mappedin\"}}{{/crossLink}} 'things' object is where you would specify what properties you want to download for Polygons. Only specify what you will actually use, to minmimze transfer time. Work with your Mappedin developer relations contact to set up any custom properties you need."
        },
        "MappedinVenue": {
            "name": "MappedinVenue",
            "shortname": "MappedinVenue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 1590,
            "description": "A {{#crossLink \"MappedinVenue\"}}{{/crossLink}} is a specific place (like a mall) with one or more Maps (typically representing different floors) and Locations (stores, washrooms, elevators, etc).\n\nAll core aspects of the Venue's data, such as {{#crossLink \"MappedinCategory\"}}{{/crossLink}}s, {{#crossLink \"MappedinLocation\"}}{{/crossLink}}s, {{#crossLink \"MappedinMap\"}}{{/crossLink}}s, {{#crossLink \"MappedinPolygon\"}}{{/crossLink}}s and {{#crossLink \"MappedinNode\"}}{{/crossLink}}s can be accessed through the Venue.\n\nA Venue can have more properties such as 'name' and 'slug'. The {{#crossLink \"Mappedin\"}}{{/crossLink}} 'things' object is where you would specify what properties you want to download for Venues. Only specify what you will actually use, to minmimze transfer time. Work with your Mappedin developer relations contact to set up any custom properties you need.\n\nSee below for an example a 'things' object with available Venue properties specified:\n\n\tthings: {\n\t\tvenue: ['slug', 'name', 'language', 'address', 'city', 'state', 'postal', 'telephone', 'latitude', 'longitude', 'website', 'operationHours'],\n\t\tlocations: [],\n\t\tcategories: [],\n\t\tmaps: []\n\t}"
        },
        "MappedinEvent": {
            "name": "MappedinEvent",
            "shortname": "MappedinEvent",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 1669,
            "description": "An event."
        },
        "MappedinLocationState": {
            "name": "MappedinLocationState",
            "shortname": "MappedinLocationState",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/Mappedin.getVenue.js",
            "line": 1727,
            "description": "A location state, that can belong to any number of {{#crossLink \"MappedinLocation\"}}{{/crossLink}}s."
        },
        "Mappedin": {
            "name": "Mappedin",
            "shortname": "Mappedin",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "Mappedin-web.es.js",
            "line": 52,
            "description": "Contains the functions you need to start the {{#crossLink \"MapView\"}}{{/crossLink}}. Typically you will just use `Mappedin.{{#crossLink \"Mappedin/initialize:method\"}}{{/crossLink}}`, which does all this for you, but for special cases your flow should look like this:\n 1. One of Mappedin.{{#crossLink \"Mappedin/test3D:method\"}}{{/crossLink}} (typical), .{{#crossLink \"Mappedin/forceTest:method\"}}{{/crossLink}}, .{{#crossLink \"Mappedin/force3D:method\"}}{{/crossLink}}, or .{{#crossLink \"Mappedin/force2D:method\"}}{{/crossLink}} to put the MapView into either 2D or 3D mode.\n 2. Mappedin.init to download all of the data you need from the Mappedin API.\n 3. new Mappedin.MapView, which will create the MapView and display the default {{#crossLink \"MappedinMap\"}}{{/crossLink}}.\n\nEach of those functions has a callback which you should use to trigger the next step. Once you get the final callback from the MapView\nconstructor, you can hide any loading screen UI and do whatever you want.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Initialization options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "clientId",
                            "description": "The client key/ID provided to you by Mappedin to access our API. Contact your Mappedin representative if you do not have one.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "clientSecret",
                            "description": "The secret/password that goes along with your ID.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "perspective",
                            "description": "The name of the perspective you are using for 2D and 3D. Probably \"Website\". This controls what 3D files or 2D tiles get downloaded, and different persepctives may have different map features enabled/disabled, or have different images.",
                            "type": "String"
                        },
                        {
                            "name": "language",
                            "description": "Language name (e.g. en-US).",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "things",
                            "description": "The things object is where you specify what fields you want to download for each object in the Mappedin API. Only specify what you will actually use, to minmimze transfer time. This SDK will ensure it has the 2D or 3D files it needs, and `id` is always included, but it won't download anything extra (like the names of locations) unless you specify it here.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "venue",
                                    "description": "The Venue information you want. 'slug' and 'name' are typical, but you may also want others. Speak to Mappedin to see what is available.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "locations",
                                    "description": "The fields you will be using for any Locations. You probably want at least 'name' and 'type'. You will also probably want 'description' and 'logo', but there can be any number of Location properties and it depends on your Venue and usecase. Talk to Mappedin for more details.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "categories",
                                    "description": "The fields you will use for each Category. Typically 'name' at a minimum, but other common fields are 'description', 'picture', 'sortOrder' or 'parents' (for hierarchical categories) as well.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "maps",
                                    "description": "The fields on each Map you are interested in. You'll probably want one or both of 'name' or 'shortName', and 'elevation' to sort.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "polygons",
                                    "description": "The Polygon fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                },
                                {
                                    "name": "nodes",
                                    "description": "The Node fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "venue",
                            "description": "Venue ID.",
                            "type": "String"
                        }
                    ]
                }
            ],
            "static": 1
        },
        "BlueDotManager": {
            "name": "BlueDotManager",
            "shortname": "BlueDotManager",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "file": "source/blue-dot-manager.js",
            "line": 35,
            "access": "private",
            "tagname": "An interface for showing a position (typically the user's position) on a 3D map.\nConstructed automatically by {{#crossLink \"MapView3D\"}}{{/crossLink}}."
        },
        "Easing": {
            "name": "Easing",
            "shortname": "Easing",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "namespace": "",
            "file": "Mappedin-web.es.js",
            "line": 32,
            "description": "The easing curves you can use for any animation (path drawing, camera movement, etc.)\nSee [tween.js](http://tweenjs.github.io/tween.js/examples/03_graphs.html) for your options.",
            "static": 1
        },
        "Tween": {
            "name": "Tween",
            "shortname": "Tween",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "Mappedin",
            "namespace": "",
            "file": "Mappedin-web.es.js",
            "line": 41,
            "description": "The Tween class from [Tween.js](https://github.com/tweenjs/tween.js). Exposed so you can create your own custom tweens.",
            "is_constructor": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "__tests__/blue-dot-utils.test.js",
            "line": 83,
            "description": "Angle towards [0, 1] is 0\nAngle towards [1, 0] is Math.PI / 2",
            "class": "Analytics"
        },
        {
            "file": "docs/assets/vendor/github-slugger/slugger.js",
            "line": 12,
            "description": "Generate a unique slug.",
            "params": [
                {
                    "name": "value",
                    "description": "String of text to slugify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A unique slug string",
                "type": "String"
            },
            "class": "Analytics"
        },
        {
            "file": "docs/assets/vendor/github-slugger/slugger.js",
            "line": 37,
            "description": "Reset - Forget all previous slugs",
            "return": {
                "description": "void"
            },
            "class": "Analytics"
        },
        {
            "file": "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js",
            "line": 12,
            "description": "Generate a unique slug.",
            "params": [
                {
                    "name": "value",
                    "description": "String of text to slugify",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A unique slug string",
                "type": "String"
            },
            "class": "Analytics"
        },
        {
            "file": "mappedin-docs-theme/assets/vendor/github-slugger/slugger.js",
            "line": 37,
            "description": "Reset - Forget all previous slugs",
            "return": {
                "description": "void"
            },
            "class": "Analytics"
        },
        {
            "file": "mappedin-docs-theme/helpers/helpers.js",
            "line": 59,
            "description": "Hack for:\nhttps://github.com/yui/yuidoc/issues/198\n\nUsage:\n  {{#crossLinkWrapper type}}{{#crossLink type}}{{/crossLink}}{{/crossLinkWrapper}}",
            "class": "Analytics"
        },
        {
            "file": "source/externals/MTLLoader.js",
            "line": 17,
            "description": "Loads a Wavefront .mtl file specifying materials",
            "type": "{any}",
            "author": "angelxuanchang",
            "class": "Analytics"
        },
        {
            "file": "source/externals/MTLLoader.js",
            "line": 67,
            "description": "Parses loaded MTL file",
            "params": [
                {
                    "name": "text",
                    "description": "- Content of MTL file"
                }
            ],
            "return": {
                "description": "",
                "type": "MTLLoader.MaterialCreator"
            },
            "class": "Analytics"
        },
        {
            "file": "source/externals/MTLLoader.js",
            "line": 121,
            "description": "Create a new THREE-MTLLoader.MaterialCreator",
            "params": [
                {
                    "name": "baseUrl",
                    "description": "- Url relative to which textures are loaded"
                },
                {
                    "name": "options",
                    "description": "- Set of options on how to construct the materials\n                 side: Which side to apply the material\n                       FrontSide (default), BackSide, DoubleSide\n                 wrap: What type of wrapping to apply for textures\n                       RepeatWrapping (default), ClampToEdgeWrapping, MirroredRepeatWrapping\n                 normalizeRGB: RGBs need to be normalized to 0-1 from 0-255\n                               Default: false, assumed to be already normalized\n                 ignoreZeroRGBs: Ignore values of RGBs (Ka,Kd,Ks) that are all 0's\n                                 Default: false"
                }
            ],
            "is_constructor": 1,
            "class": "Analytics"
        },
        {
            "file": "source/externals/OBJLoader.js",
            "line": 11,
            "type": "{any}",
            "author": "mrdoob / http://mrdoob.com/",
            "class": "Analytics"
        },
        {
            "file": "source/externals/promise.js",
            "line": 10,
            "type": "{any}",
            "class": "Analytics"
        },
        {
            "file": "source/externals/promise.js",
            "line": 196,
            "description": "Configuration parameter: time in milliseconds after which a\npending AJAX request is considered unresponsive and is\naborted. Useful to deal with bad connectivity (e.g. on a\nmobile network). A 0 value disables AJAX timeouts.\n\nAborted requests resolve the promise with a ETIMEOUT error\ncode.",
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 64,
            "description": "Whenever a location is selected, you should fire this event. What \"selected\" means can vary by venue,\nbut a good rule of thumb is that you fire the event whenever you would show the location's details.\nTypically this is when the user taps it's polygon on the map, picks it from search results or a category list.\nor deep links directly into the map.",
            "itemtype": "method",
            "name": "locationSelected",
            "params": [
                {
                    "name": "location",
                    "description": "The location the user selected.",
                    "type": "MappedinLocation"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 78,
            "description": "Whenever a category is selected, you should fire this event.",
            "itemtype": "method",
            "name": "categorySelected",
            "params": [
                {
                    "name": "category",
                    "description": "The category the user selected.",
                    "type": "MappedinCategory"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 99,
            "description": "Whenever a user requests directions, you should fire this event.",
            "itemtype": "method",
            "name": "getDirections",
            "params": [
                {
                    "name": "start",
                    "description": "The start location for wayfinding.",
                    "type": "MappedinLocation"
                },
                {
                    "name": "end",
                    "description": "The end location for wayfinding.",
                    "type": "MappedinLocation"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 123,
            "params": [
                {
                    "name": "mode",
                    "description": "Indicates whether the user's geolocation is enabled.",
                    "type": "Boolean"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 130,
            "description": "Track an event.",
            "itemtype": "method",
            "name": "trackBlueDotEvent",
            "params": [
                {
                    "name": "event",
                    "description": "\nevent param should be a property of the {{#crossLink \"Analytics/BLUEDOT_EVENT:property\"}}{{/crossLink}} property.",
                    "type": "String"
                }
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.Analytics.js",
            "line": 148,
            "description": "Enum of valid bluedot events.\nPass a property of this into the {{#crossLink \"Analytics/trackBlueDotEvent:method\"}}{{/crossLink}} method.\nValid properties are: ATTEMPT_BLUEDOT, FOUND_POSITION, FOUND_FLOOR.",
            "itemtype": "property",
            "name": "BLUEDOT_EVENT",
            "type": "Object",
            "example": [
                "\n  Analytics.trackBlueDotEvent(Analytics.BLUEDOT_EVENT.ATTEMPT_BLUEDOT)"
            ],
            "class": "Analytics"
        },
        {
            "file": "source/Mappedin.CameraControls.InputSet.js",
            "line": 18,
            "type": "{any}",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.TouchAnchor.js",
            "line": 3,
            "description": "An object representing a touch event anchored to a point along the z=0 plane.",
            "type": "{any}",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 56,
            "description": "Factor that controls how fast zooming in and out happens in response to mouse wheel events",
            "itemtype": "property",
            "name": "zoomSpeed",
            "type": "Float",
            "default": "5.0",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 64,
            "description": "Factor to multiple mouse movement by to get tilt/rotation.",
            "itemtype": "property",
            "name": "rotateSpeed",
            "type": "Float",
            "default": "100",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 72,
            "description": "Disable or re-enable user input.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 80,
            "description": "Disable or re-enable user zoom.",
            "itemtype": "property",
            "name": "enableZoom",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 88,
            "description": "Disable or re-enable user pan.",
            "itemtype": "property",
            "name": "enablePan",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 96,
            "description": "Disable or re-enable user pedestal.",
            "itemtype": "property",
            "name": "enablePedestal",
            "type": "Boolean",
            "default": "false",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 104,
            "description": "Max amount to allow scrolling maps down\n(In Z-axis units, at the origin, down is positive)",
            "itemtype": "property",
            "name": "maxPedestal",
            "type": "Number",
            "default": "Infinity",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 113,
            "description": "Max amount to allow scrolling maps up\n(In Z-axis units, at the origin, up is negative)",
            "itemtype": "property",
            "name": "minPedestal",
            "type": "Number",
            "default": "-Infinity",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 122,
            "description": "Disable or re-enable user tilt/rotation.",
            "itemtype": "property",
            "name": "enableRotate",
            "type": "Boolean",
            "default": "true",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 130,
            "description": "This is actually the minium distance the camera can get from it's anchor on the ground. May be worth changing if your map has very tall buildings to avoid the camera clipping through them.",
            "itemtype": "property",
            "name": "minZoom",
            "type": "Number",
            "default": "375",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 138,
            "description": "Maximum distance the camera can get from it's anchor on the ground. Setting this too high will result in parts of the map falling out of the camera's clipping plane and disappearing.",
            "itemtype": "property",
            "name": "maxZoom",
            "type": "Number",
            "default": "10000",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 146,
            "description": "Initial min zoom; zoom cannot be restricted beyond this.",
            "itemtype": "property",
            "name": "initialMinZoom",
            "type": "Number",
            "default": "375",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 154,
            "description": "Initial max zoom; zoom cannot be restricted beyond this.",
            "itemtype": "property",
            "name": "initialMaxZoom",
            "type": "Number",
            "default": "10000",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 162,
            "description": "ignoreZoomLimits; use with caution for special effects",
            "default": "false",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 187,
            "description": "Multiplier for min and max zoom, for convenience.",
            "itemtype": "property",
            "name": "zoomFactor",
            "type": "Number",
            "default": "1",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 195,
            "description": "Constrains the camera from panning to far away from the scene. It's set automatically based on the size of the map.\nIf you want to change anything, you probably want to change the margin property, which is the factor the min and max in\neach dimension are multiplied by to give the true bounds. For example, on a truely huge venue a 1.25 margin could get you\nway out into space when zoomed in.",
            "itemtype": "property",
            "name": "panBounds",
            "type": "Object",
            "class": "CameraControls",
            "subprops": [
                {
                    "name": "margin",
                    "description": "The factor the multiply the size of the geometery by to give the true camera bounds.",
                    "type": "Number"
                },
                {
                    "name": "min",
                    "description": "An x, y pair representing the bounds of one corner of the map.",
                    "type": "Object"
                },
                {
                    "name": "max",
                    "description": "An x, y pair representing the bounds of the other corner of the map.",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 223,
            "description": "Minium camera tilt, in radians. If it's anything other than 0, you won't be able to look at the venue from the top down perspective.",
            "itemtype": "property",
            "name": "minTilt",
            "type": "Number",
            "default": "0.0",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 231,
            "description": "Minium camera tilt, in radians. If you set it too high, the camera will be able to tilt down through the geometery of the scene, which will produce clipping issues.",
            "itemtype": "property",
            "name": "maxTilt",
            "type": "Number",
            "default": "1.2",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 239,
            "description": "If you would really prefer to pan with the right mouse button and tilt/rotate with the left, you can swap the values here to achieve that.",
            "itemtype": "property",
            "name": "mouseButtons",
            "type": "Object",
            "class": "CameraControls",
            "subprops": [
                {
                    "name": "ORBIT=MOUSE.RIGHT",
                    "description": "The button to use for tilt/rotation. Defaults to `MOUSE.RIGHT`.",
                    "type": "MOUSE"
                },
                {
                    "name": "ZOOM=MOUSE.MIDDLE",
                    "description": "The button to use for zoom behaviour. Don't change this.",
                    "type": "MOUSE"
                },
                {
                    "name": "PAN=MOUSE.LEFT",
                    "description": "The button to use for panning the camera. Defaults to `MOUSE.LEFT`.",
                    "type": "MOUSE"
                }
            ]
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 313,
            "description": "Camera events you can attach a listener to (with `controls.addListener(event, function)`), if you want to do certain things. They'll be fired both by touch events and by functions you can call yourself like pan() and tilt()/",
            "itemtype": "property",
            "name": "CAMERA_EVENTS",
            "type": "Object",
            "final": 1,
            "class": "CameraControls",
            "subprops": [
                {
                    "name": "CHANGE_EVENT",
                    "description": "Fired whenever the camera changes.",
                    "type": "Object"
                },
                {
                    "name": "PAN_START_EVENT",
                    "description": "Fired when the camera starts panning.",
                    "type": "Object"
                },
                {
                    "name": "PAN_END_EVENT",
                    "description": "Fired when the camera finishes panning.",
                    "type": "Object"
                },
                {
                    "name": "ROTATE_START_EVENT",
                    "description": "Fired when the camera starts rotating.",
                    "type": "Object"
                },
                {
                    "name": "ROTATE_END_EVENT",
                    "description": "Fired when the camera stops rotating.",
                    "type": "Object"
                },
                {
                    "name": "ZOOM_START_EVENT",
                    "description": "Fired when the camera starts zooming.",
                    "type": "Object"
                },
                {
                    "name": "ZOOM_END_EVENT",
                    "description": "Fired when the camera finishes zooming.",
                    "type": "Object"
                },
                {
                    "name": "MULTI_START_EVENT",
                    "description": "Fired when the camera starts animating or you called setMulti. It means any one or more of pan, tilt, rotate and zoom could be changing. The individual pan/tilt/rotate/zoom events will NOT be fired.",
                    "type": "Object"
                },
                {
                    "name": "MULTI_END_EVNT",
                    "description": "Fired when the camera stops animating, or has finished the setMulti call.",
                    "type": "Object"
                }
            ]
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 417,
            "description": "Pans the camera right and down from the current position",
            "itemtype": "method",
            "name": "pan",
            "params": [
                {
                    "name": "right",
                    "description": "The units to move right. Negative will pan left. This is in relation to the global coordinate system, not the current camera rotation.",
                    "type": "Number"
                },
                {
                    "name": "down",
                    "description": "The units to move down. Negative will pan up. This is in relation to the global coordinate system, not the current camera rotation.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 435,
            "description": "Sets the camera anchor to a specifc x/y positon, in the global reference frame. 0,0 will be roughly the middle of the map, and panBounds holds the min/max points.",
            "itemtype": "method",
            "name": "setPosition",
            "params": [
                {
                    "name": "x",
                    "description": "The x position to move the camera to. +x will take you right, from the default camera rotation of 0.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "The y position to move the camera to. +y will take you down (towards the viewer) in the default camera rotation of 0.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 472,
            "description": "Sets the rotation to a specific orientation, in radians. Mostly useful to orient the map a certain way for a physical directory.",
            "itemtype": "method",
            "name": "setRotation",
            "params": [
                {
                    "name": "radians",
                    "description": "Absolute rotation to set the camera to, in radians. 0 in the starting point.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 499,
            "description": "Rotates the camera a set number of radians relative to the current rotation. Useful for an idle rotation animation.",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "radians",
                    "description": "Number of radians to rotate the camera.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 526,
            "description": "Sets the tilt to a specific level, in radians. 0 is top down. Bounded by minTilt and maxTilt.",
            "itemtype": "method",
            "name": "setTilt",
            "params": [
                {
                    "name": "radians",
                    "description": "Tilt to set the camera to, in radians.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 554,
            "description": "Tilts the camera up or down by some number of radians. Bounded by minTilt and maxTilt.",
            "itemtype": "method",
            "name": "tilt",
            "params": [
                {
                    "name": "radians",
                    "description": "Number of radians to increase or decrease the current tilt by.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 585,
            "description": "Sets the camera to be a certain distance from the anchor point, along it's tilt and rotation.\nKeeps it inside minZoom and maxZoom.",
            "itemtype": "method",
            "name": "setZoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The distance to set the camera to.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 620,
            "description": "Moves the camera towards or away from the camera by a set amount. Positive will zoom in (bringing the distance closer to 0).",
            "itemtype": "method",
            "name": "zoom",
            "params": [
                {
                    "name": "zoom",
                    "description": "The distance to increase or decrease the zoom.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 649,
            "description": "Zooms the camera in on the center of the current view.",
            "itemtype": "method",
            "name": "zoomIn",
            "params": [
                {
                    "name": "duration",
                    "description": ""
                },
                {
                    "name": "curve",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 669,
            "description": "Zooms the camera out from the center of the current view.",
            "itemtype": "method",
            "name": "zoomOut",
            "params": [
                {
                    "name": "duration",
                    "description": ""
                },
                {
                    "name": "curve",
                    "description": ""
                },
                {
                    "name": "callback",
                    "description": ""
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 689,
            "description": "Expands the zoom limits to allow zooming to the specified distance.",
            "itemtype": "method",
            "name": "expandZoomLimits",
            "params": [
                {
                    "name": "zoom",
                    "description": "The distance to allow zooming to.",
                    "type": "Number"
                },
                {
                    "name": "buffer",
                    "description": "The factor by which the user should be able to zoom beyond the specified distance.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 706,
            "description": "Restricts the zoom limits, but will not restrict beyond the current zoom level.",
            "itemtype": "method",
            "name": "restrictZoomLimits",
            "params": [
                {
                    "name": "zoom",
                    "description": "The number to limit zooming to.",
                    "type": "Number"
                },
                {
                    "name": "buffer",
                    "description": "The factor by which the user should be able to zoom beyond the specified distance.",
                    "type": "Number"
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 724,
            "description": "Returns the current camera position.",
            "itemtype": "method",
            "name": "getPosition",
            "return": {
                "description": "An {x, y} object of the current camera postion.",
                "type": "Object"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 754,
            "description": "The amount the camera is shifted up/down\n(corresponds to scroll amount in multifloor mode)\n100% == camera is as far up as it will go\n0% == camera is as far down as it will go",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 773,
            "description": "Returns whether the maps are scrolled to bottom",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 786,
            "description": "Returns whether the maps are scrolled to top",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 799,
            "description": "Returns the current camera rotation.",
            "itemtype": "method",
            "name": "getRotation",
            "return": {
                "description": "The current rotation of the camera, in radians.",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 809,
            "description": "Returns the current camera tilt",
            "itemtype": "method",
            "name": "getTilt",
            "return": {
                "description": "The current tilt of the camera, in radians.",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 819,
            "description": "Returns the current camera zoom",
            "itemtype": "method",
            "name": "getZoom",
            "return": {
                "description": "The distance of the camera from the anchor.",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 829,
            "description": "Returns true if the camera is currently moving (it's animating, the user is manipulating it).",
            "itemtype": "method",
            "name": "isCameraMoving",
            "return": {
                "description": "True if the camera is moving, false otherwise.",
                "type": "Boolean"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 839,
            "description": "Returns the actual zoom minimum based on real-world distance.",
            "itemtype": "method",
            "name": "getZoomScaledMin",
            "return": {
                "description": "The actual zoom minimum in map units.",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 849,
            "description": "Returns the actual zoom maximum based on visible map size.",
            "itemtype": "method",
            "name": "getZoomScaledMax",
            "return": {
                "description": "The actual zoom maximum in map units.",
                "type": "Number"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 877,
            "description": "Animates the camera from it's current position to the state specified in target. You only\nneed to specify the properties you actually want to change.\n\nYou can also specify a duration, animation curve, and a callback for when it's done.",
            "itemtype": "method",
            "name": "animateCamera",
            "params": [
                {
                    "name": "target",
                    "description": "A list of optional parameters you can set that represent the camera state.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "position",
                            "description": "An {x, y, z} object representing the position to move to.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "zoom",
                            "description": "The zoom level to end at.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "tilt",
                            "description": "The tilt to end at, in radians.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "rotation",
                            "description": "The rotation to end at, in radians.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "doNotAutoStart",
                            "description": "Set this to true if you want to start the tween yourself.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "duration",
                    "description": "The duration to animate the camera for, in ms.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "curve",
                    "description": "The animation curve to use for the animation.",
                    "type": "Mappedin.Easing",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "A callback that will be executed when the animation is done.",
                    "type": "Function",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "An Options object",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "mode",
                            "description": "Mode determines what happens when multiple animateCamera calls happen at once. By Default,\n\t\tit will cancel and omit any previous animations. Set to \"chain\" to chain instead",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "cancel"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The tween being used, if you want to do anything to control it manually. Do not overide it's events.",
                "type": "Mappedin.Tween"
            },
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 1023,
            "description": "Allows you to set any of the Camera's position, zoom, rotation and tilt at once, with one function.",
            "itemtype": "method",
            "name": "setMulti",
            "params": [
                {
                    "name": "position",
                    "description": "an {x, y, z} object representing the new position.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "zoom",
                    "description": "The new zoom distance.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "rotation",
                    "description": "The new rotation, in radians.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "tilt",
                    "description": "The new tilt, in radians.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 1192,
            "description": "Anything we need to do after we render the camera, like update anchors for the mouse/touch controls.",
            "itemtype": "method",
            "name": "postRender",
            "access": "private",
            "tagname": "",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 1814,
            "description": "Should probably be \"pre-render\". Anything we need to do before rendering the scene.",
            "itemtype": "method",
            "name": "update",
            "access": "private",
            "tagname": "",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraControls.js",
            "line": 1836,
            "description": "Disposes of the camera and all of it's events.",
            "itemtype": "method",
            "name": "dispose",
            "access": "private",
            "tagname": "",
            "class": "CameraControls"
        },
        {
            "file": "source/Mappedin.CameraLayers.js",
            "line": 1,
            "description": "Camera layers that are used for rendering, which are assigned to objects\nin the scene representation and used for multi-buffer rendering. By\ndefault, all three.js objects are created on the `STATIC` layer.",
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.ClosedPolygonManager.js",
            "line": 20,
            "description": "Create a 3D plane object that can serve as a stencil sheet.",
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.CollisionEngine.js",
            "line": 458,
            "description": "Specify the current tilt of the camera, used to decide how to prioritize labels.",
            "itemtype": "method",
            "name": "setCameraTilt",
            "params": [
                {
                    "name": "tilt",
                    "description": "the current tilt of the camera away from top-down perspective, in radians",
                    "type": "Number"
                }
            ],
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.Color.js",
            "line": 3,
            "description": "Convert the given RGB triple to HSV. The components must be in\nthe range [0, 1].",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "r",
                    "description": "red in [0, 1]",
                    "type": "number or THREE.Color"
                },
                {
                    "name": "g",
                    "description": "green in [0, 1]",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "blue in [0, 1]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "hsv",
                "type": "[number, number, number]"
            },
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.Color.js",
            "line": 56,
            "description": "Convert the given HSV triple to RGB.",
            "itemtype": "method",
            "name": "hsv2rgb",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "h",
                    "description": "hue in [0, 1]",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "saturation in [0, 1]",
                    "type": "Number"
                },
                {
                    "name": "v",
                    "description": "value in [0, 1]",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "THREE.Color color"
            },
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.ConnectionMarker.js",
            "line": 26,
            "type": "{any}",
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 43,
            "description": "Create a new UI element that can be added to the DOM to display\nthe performance of recorded tasks.",
            "is_constructor": 1,
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 115,
            "description": "Return the DOM element used by this `DebugUI`, which may be\nadded as a child of any other DOM element to display it.",
            "itemtype": "method",
            "name": "element",
            "return": {
                "description": "the ui's root element",
                "type": "Element"
            },
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 126,
            "description": "Log the given entries to this performance logger, and update the display\naccordingly. If a given key isn't already being logged, an entry will be\nadded for it. If a key is being logged but isn't reported, it will be\ntreated as if it had a value of `0` reported.",
            "itemtype": "method",
            "name": "reportFramePerformance",
            "params": [
                {
                    "name": "entries",
                    "description": "the most recent recorded values for each\n\t\tnamed frame update",
                    "type": "String -> number"
                }
            ],
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 175,
            "description": "Add the given controls to the given panels. More efficient than adding\ncontrols one-by-one since it only recomputes positions after all controls\nare added.",
            "itemtype": "method",
            "name": "addDebugControls",
            "params": [
                {
                    "name": "]}",
                    "description": "categories\n\t\ta mapping from category to a list of control names and controls",
                    "type": "Category: string: [name: string, description: string, control: DebugUIControl"
                }
            ],
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 195,
            "description": "Add the given control to a panel.",
            "itemtype": "method",
            "name": "addDebugControl",
            "params": [
                {
                    "name": "category",
                    "description": "the name of the panel the control will be put under",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the name of the control",
                    "type": "String"
                },
                {
                    "name": "description",
                    "description": "a description for the control (tooltip)",
                    "type": "String"
                },
                {
                    "name": "control",
                    "description": "the control to add to the panel",
                    "type": "DebugUIControl"
                }
            ],
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 210,
            "description": "Remove the given controls from the UI.",
            "itemtype": "method",
            "name": "removeDebugControls",
            "params": [
                {
                    "name": "categories",
                    "description": "a mapping from category to a list of control names to remove",
                    "type": "Category: string: [name: string]"
                }
            ],
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 227,
            "description": "Remove the given control from a panel.",
            "itemtype": "method",
            "name": "removeDebugControl",
            "params": [
                {
                    "name": "category",
                    "description": "the name of the panel the control will be put under",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "the name of the control",
                    "type": "String"
                }
            ],
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 282,
            "description": "Assign the CSS styles to this element.",
            "itemtype": "method",
            "name": "_layout",
            "access": "private",
            "tagname": "",
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 338,
            "description": "Recompute CSS styles for dynamically-changing elements, such as\nupdating the position of each entry if a new entry is added.",
            "itemtype": "method",
            "name": "_updateLayout",
            "access": "private",
            "tagname": "",
            "class": "DebugUI"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 427,
            "description": "Return a new `PerformanceEntry` showing the performance characteristics\nof the named task.",
            "params": [
                {
                    "name": "name",
                    "description": "the name of the task to log",
                    "type": "String"
                },
                {
                    "name": "hue",
                    "description": "a number between 0 and 360, to be used as the colour\n\t\tof the line displayed on this entry",
                    "type": "Number"
                }
            ],
            "class": "PerformanceEntry"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 470,
            "description": "Compute the CSS styles for each element in this entry.",
            "itemtype": "method",
            "name": "_layout",
            "access": "private",
            "tagname": "",
            "class": "PerformanceEntry"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 536,
            "itemtype": "method",
            "name": "element",
            "return": {
                "description": "element that can be added to the DOM or styled",
                "type": "Element"
            },
            "class": "PerformanceEntry"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 544,
            "description": "Add the provided frame time to the list of frame times on this entry, and\nupdate the text to report the most recent average and the overall maximum\naverage frame time. Also redraws the entry's graph.",
            "itemtype": "method",
            "name": "report",
            "params": [
                {
                    "name": "lastFrameTime",
                    "description": "the most recent time taken to perform this entry",
                    "type": "Number"
                }
            ],
            "class": "PerformanceEntry"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 574,
            "description": "Change the hue of the time series line displayed by this entry.\nOther graphs displaying the same time series will need to be updated.",
            "itemtype": "method",
            "name": "setHue",
            "params": [
                {
                    "name": "hue",
                    "description": "hue in degrees",
                    "type": "Number"
                }
            ],
            "class": "PerformanceEntry"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 596,
            "description": "Return a new `LineGraph` displaying information from the given list of\ntime series.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "seriesList",
                    "description": "the list of time series that will be\n\t\tdisplayed on this graph.",
                    "type": "[TimeSeries]"
                },
                {
                    "name": "width",
                    "description": "the width of this canvas element, in pixels",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "the width of this canvas element, in pixels",
                    "type": "Number"
                }
            ],
            "class": "LineGraph"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 623,
            "description": "Compute the CSS styling for this DOM element.",
            "itemtype": "method",
            "name": "_layout",
            "access": "private",
            "tagname": "",
            "class": "LineGraph"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 643,
            "itemtype": "method",
            "name": "element",
            "return": {
                "description": "DOM element that can be added to display this graph",
                "type": "Element"
            },
            "class": "LineGraph"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 651,
            "description": "Clear this canvas and re-draw the time series lines.",
            "itemtype": "method",
            "name": "redraw",
            "class": "LineGraph"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 682,
            "description": "Set the list of time series that this graph displays.",
            "itemtype": "method",
            "name": "setSeriesList",
            "params": [
                {
                    "name": "series",
                    "description": "series to display",
                    "type": "[TimeSeries]"
                }
            ],
            "class": "LineGraph"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 731,
            "description": "Incorporate the given value into the time series. This will accumulate up\nto `LINE_GRAPH_ACCUMULATION_COUNT` values, at which point they will be\naveraged and inserted into the time series. If the number of averaged entries\nexceeds `LINE_GRAPH_WINDOW_SIZE`, the ring buffer will drop the oldest\nentry.\n\nThis will set the `changed()` flag if an accumulated value has been added\nto the ring buffer.",
            "itemtype": "method",
            "name": "report",
            "params": [
                {
                    "name": "value",
                    "description": "the value to add to the time series",
                    "type": "Number"
                }
            ],
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 757,
            "description": "Return the entry at the given index in the ring buffer. The value\nat `length - 1` is the most recently accumulated value.",
            "itemtype": "method",
            "name": "at",
            "params": [
                {
                    "name": "i",
                    "description": "the index to retrieve",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the accumulated value at the given index",
                "type": "Number"
            },
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 775,
            "description": "Insert the given value into the ring buffer for this time series,\ndropping the oldest value if the ring buffer is full.",
            "itemtype": "method",
            "name": "_push",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "value",
                    "description": "the value to insert",
                    "type": "Number"
                }
            ],
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 797,
            "itemtype": "method",
            "name": "maximumValue",
            "return": {
                "description": "the maximum value in this time series",
                "type": "Number"
            },
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 809,
            "description": "Return true if this time series has changed since the previous `report()`\ninvocation.",
            "itemtype": "method",
            "name": "changed",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 820,
            "description": "Return the number of accumulated values in this time series. Will never\nexceed `LINE_GRAPH_WINDOW_SIZE`.",
            "return": {
                "description": "number of accumulated entries",
                "type": "Number"
            },
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 831,
            "description": "Convert the given HSV triple to RGB and return a CSS `<color>`.",
            "itemtype": "method",
            "name": "hsv2rgb",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "h",
                    "description": "hue",
                    "type": "Number"
                },
                {
                    "name": "s",
                    "description": "saturation",
                    "type": "Number"
                },
                {
                    "name": "v",
                    "description": "value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "output",
                "type": "String"
            },
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.DebugUI.js",
            "line": 886,
            "description": "Convert the given floating point value in the range [0, 1] to a hexadecimal\nvalue in the range [0, 255], prepending zeroes to fit two digits.",
            "itemtype": "method",
            "name": "toHex",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "float",
                    "description": "input",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "output as hex",
                "type": "String"
            },
            "class": "TimeSeries"
        },
        {
            "file": "source/Mappedin.FlippableImage.js",
            "line": 3,
            "type": "{any}",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.HoverLabel.js",
            "line": 1,
            "type": "{any}",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapManager.js",
            "line": 135,
            "description": "This can be used to invoke a callback function for _every_ set map invocation.",
            "params": [
                {
                    "name": "cb",
                    "description": "callback function",
                    "type": "Function"
                }
            ],
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapManager.js",
            "line": 368,
            "description": "Expand maps to display within view, typically used for multi-floor navigation. When passed a connection, maps included will not be displayed, instead, their 2d projection\n\t will be available in the resulting promise, which can be used to display a 2D component in the client-side app.",
            "itemtype": "method",
            "name": "expandMaps",
            "params": [
                {
                    "name": "mapIds",
                    "description": "Array of mapIds or mapObjects to display while expanded. For connections, pass &#123; connection: true, maps: [], connectionNodes: [], &#125;",
                    "type": "Array"
                },
                {
                    "name": "options",
                    "description": "Options object @optional",
                    "type": "Object",
                    "props": [
                        {
                            "name": "focus",
                            "description": "Focus the camera onto expanded maps",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "debug",
                            "description": "Display cubes around focus bounding box for debug info",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "rotation",
                            "description": "Rotation of scene relative to zero (degrees)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "duration",
                            "description": "Duration of focus animation in ms",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "300"
                        }
                    ]
                }
            ],
            "return": {
                "description": "Promise that resolves to 2d screen projections of each layer/map (see example)",
                "type": "Promise"
            },
            "example": [
                "\n\t// expand maps with 3 connection maps in between\n\texpandMaps(\n\t\t'55e89771d982bc06ca000000',\n\t\t\t{\n\t\t\t\tconnection: true,\n\t\t\t\t// connection nodes are an exit node from the '55e89771' man and entry node for the '55e9c73f' map\n\t\t\t\tconnectionNodes: [{\n\t\t\t\t\tmap: \"55e89771\",\n\t\t\t\t\tx: 6232,\n\t\t\t\t\ty: 4575\n\t\t\t\t}, {\n\t\t\t\t\tmap: \"55e9c73\",\n\t\t\t\t\tx: 5945.000000000001,\n\t\t\t\t\ty: 4059.000000000001\n\t\t\t\t}],\n\t\t\t\tmaps: [\n\t\t\t\t\t'55e9acbf',\n\t\t\t\t\t'55e8a9ed',\n\t\t\t\t\t'55e85e23'\n\t\t\t\t]\n\t\t\t},\n\t\t\t'55e9c73f'\n\t\t );\n\n\t\t // resulting promise (sorted by elevation (top to bottom))\n\n\t\t [\n\t\t\t{\n\t\t\t\tmin: { x: -100, y: -50 },\n\t\t\t\tmax: { x: -100, y: -50 }\n\t\t\t},\n\t\t\t{\n\t\t\t\tmin: { x: -100, y: -50 },\n\t\t\t\tmax: { x: -100, y: -50 }\n\t\t\t},\n\t\t\t{\n\t\t\t\tmin: { x: -100, y: -50 },\n\t\t\t\tmax: { x: -100, y: -50 }\n\t\t\t}\n\t\t ]"
            ],
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapManager.js",
            "line": 535,
            "description": "Contract maps and display the current map",
            "itemtype": "method",
            "name": "contractMaps",
            "params": [
                {
                    "name": "options",
                    "description": "Options object @optional",
                    "type": "Object",
                    "props": [
                        {
                            "name": "focus",
                            "description": "Focus the camera onto current map",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "debug",
                            "description": "Display cubes around focus bounding box for debug info",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "Duration of focus animation in ms",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "300"
                        }
                    ]
                }
            ],
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapManager.js",
            "line": 594,
            "description": "Scroll maps up\nThis will shift maps down to show next one (above)",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapManager.js",
            "line": 607,
            "description": "Scroll maps down\nThis will shift maps up to show next one (below)",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 236,
            "description": "Load the map, if it's not already loaded. Returns the old promise if it's already done, so you can safely call it whenever needed.\n\nIf needed, this could be modified to\n\nReturns a Promise that will be Done when the OBJ, MTL and textures have been downloaded, and the objectsDictionary has been generated.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 407,
            "description": "Return true if this map has been loaded to the point where it can be\nmanipulated as a complete object. In synchronous mode, this requires all\nloading tasks to be completed, but in async mode, only high-priority\ntasks (adding polygons to the world) have to be completed.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 426,
            "description": "Return true if this map has been loaded to the point where the only tasks\nremaining are marker tasks.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 442,
            "description": "A function that should be called when the map is made visible, in order\nto kick off its tasks.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 467,
            "description": "A function that should be called when the map is made invisible, in order\nto postpone its tasks.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 492,
            "description": "Queue a task on this map that will be executed when the high and low\npriority tasks have been processed.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 509,
            "description": "Queue a task on this map that must be completed before the map will be\nconsidered `isReady` in synchronous loading mode.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 523,
            "description": "Queue a task on this map that will be queued when the map is loaded, or\nimmediately if the map has already been loaded.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 538,
            "description": "Queue a task on this map that must be completed before the map will be\nconsidered `isReady`, and will be evaluated before any low-priority\ntasks.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 553,
            "description": "Add a ThreeJS marker to this map object. This should be called through\nthe `MapView3D`.",
            "itemtype": "method",
            "name": "addThreeJSMarker",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "object",
                            "description": "the marker object to add to the scene",
                            "type": "Object3D",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "if provided, sets the object's position on the map",
                            "type": "Vector3",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "rotation",
                            "description": "if provided, sets the object's rotation relative to the map",
                            "type": "Euler",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "scale",
                            "description": "if provided, sets the object's scale relative to the map",
                            "type": "Vector3",
                            "optional": true,
                            "optdefault": "null"
                        }
                    ]
                }
            ],
            "return": {
                "description": "a unique identifier for the marker",
                "type": "ThreeJSMarkerHandle"
            },
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 606,
            "description": "Remove the given `ThreeJSMarker` from this map.",
            "itemtype": "method",
            "name": "removeThreeJSMarker",
            "params": [
                {
                    "name": "markerHandle",
                    "description": "the marker to remove",
                    "type": "ThreeJSMarkerHandle"
                }
            ],
            "return": {
                "description": "true if the marker existed on the map and was removed;\n\t\tfalse if the marker does not exist on the map",
                "type": "Boolean"
            },
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 629,
            "description": "Remove all `ThreeJSMarker` from this map.",
            "itemtype": "method",
            "name": "removeThreeJSMarker",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 726,
            "description": "Called when a task group that may be required for map loading completes,\nto see if all the relevant task groups have been completed.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 747,
            "description": "Called when the root ThreeJS object has been created, and child elements\nmay be added.",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapObject.js",
            "line": 796,
            "description": "Return the ThreeJS object associated with this marker, so that it\ncan be moved around, scaled, etc.",
            "itemtype": "property",
            "name": "object",
            "type": "Object3D",
            "class": "ThreeJSMarkerHandle"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 18,
            "description": "This property identifies which of the Mappedin.{{#crossLink \"Mappedin/modes:property\"}}{{/crossLink}} you are in, incase you have special functionailty in your app when in 2D vs 3D mode.\nIt will be one of \"MapView\", \"MapView3D,\" or \"MapView2D\".",
            "itemtype": "property",
            "name": "type",
            "type": "String",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 27,
            "description": "Manual camera controls for MapView. Generally you should be using the functions on MapView like {{#crossLink \"MapView/focusOn:method\"}}{{/crossLink}},\nbut if you have some cool animations in mind, you can do it with the {{#crossLink \"CameraControls\"}}{{/crossLink}}.\nSome of the functions don't do anything in 2D.",
            "itemtype": "property",
            "name": "controls",
            "type": "CameraControls",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 37,
            "description": "These are the default colours used by the MapView to control things like path and selection. You can override these here\nto quickly style your app, but most of them can also be set (especially for special cases) in their respective functions.\nThe only value that MUST be set here is `hover`.",
            "itemtype": "property",
            "name": "colors",
            "type": "Object",
            "class": "MapView",
            "subprops": [
                {
                    "name": "hover",
                    "description": "The color a polygon changes to on mouse over. Defaults to `0xcccccc`",
                    "type": "Integer"
                },
                {
                    "name": "select",
                    "description": "The color used when you call setPolygonColor with no color parameter. Defaults to `0x4ca1fc`"
                },
                {
                    "name": "text",
                    "description": "The color used for TextLabels, if you don't specify it in labelAllLocations/labelPolygons. Defaults to `0x000000`"
                },
                {
                    "name": "path",
                    "description": "The color used for the path in drawPath/drawPathSegment if you don't specify it there. Defaults to `0xff834c`"
                },
                {
                    "name": "pathPulse",
                    "description": "The color of the animated path pulse if not specified in drawPath/drawPathSegment. Defaults to `0xffffff`"
                },
                {
                    "name": "textSelect",
                    "description": "The color a TextLabel is set to when you call setPolygonColor, if you don't specify it there. Defaults to `0xffffff`"
                }
            ]
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 59,
            "description": "The Venue data this MapView is using.",
            "itemtype": "property",
            "name": "venue",
            "type": "MappedinVenue",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 67,
            "description": "The div MapView is using.",
            "itemtype": "property",
            "name": "container",
            "type": "Div",
            "final": 1,
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 75,
            "description": "**READ ONLY** The ID of the Map currently being displayed.",
            "itemtype": "property",
            "name": "currentMap",
            "type": "String",
            "readonly": "",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 83,
            "description": "Change this factor to influence how much the camera zooms in on a {{#crossLink \"MapView/focusOn:method\"}}{{/crossLink}} call.",
            "itemtype": "property",
            "name": "focusZoomFactor",
            "type": "Integer",
            "default": "3",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 91,
            "description": "Change the currently displayed Map to a new one.",
            "itemtype": "method",
            "name": "setMap",
            "params": [
                {
                    "name": "map",
                    "description": "The Map ID or Map Object to change the Map to.",
                    "type": "String|MappedinMap"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 99,
            "description": "Adds a Map",
            "itemtype": "method",
            "name": "addMap",
            "params": [
                {
                    "name": "map",
                    "description": "Map to add",
                    "type": "MappedinMap"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 106,
            "description": "Removes a Map",
            "itemtype": "method",
            "name": "removeMap",
            "params": [
                {
                    "name": "map",
                    "description": "map to remove",
                    "type": "String|MappedinMap"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 116,
            "description": "Moves the camera to focus in on a specific Polygon",
            "itemtype": "method",
            "name": "focusOnPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon or Polygon ID to focus on. The camera will move to the centroid of Polygon.",
                    "type": "String|MappedinPolygon"
                },
                {
                    "name": "changeZoom",
                    "description": "Whether to zoom the camera in or out so it fits the Polygon's bounds. Scaled by {{#crossLink \"MapView/focusZoomFactor:property\"}}{{/crossLink}}.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "duration",
                    "description": "The time the camera should spend moving, in milliseconds.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "100"
                },
                {
                    "name": "curve",
                    "description": "The animation curve to use.",
                    "type": "Easing",
                    "optional": true,
                    "optdefault": "Mappedin.Easing.Quadratic.In"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 127,
            "description": "Moves the camera to focus on an entire path and optionally it's starting and ending Polygon.",
            "itemtype": "method",
            "name": "focusOnPath",
            "params": [
                {
                    "name": "path",
                    "description": "The Nodes to fit the camera to.",
                    "type": "[MappedinNode"
                },
                {
                    "name": "polygonIds",
                    "description": "The Polygon or Polygon ID to focus on. The camera will move to the centroid of Polygon.",
                    "type": "[String]|[MappedinPolygon]"
                },
                {
                    "name": "changeZoom",
                    "description": "Whether to zoom the camera in or out so it fits the Polygon's bounds. Scaled by {{#crossLink \"MapView/focusZoomFactor:property\"}}{{/crossLink}}.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "duration",
                    "description": "The time the camera should spend moving, in milliseconds.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "100"
                },
                {
                    "name": "curve",
                    "description": "The animation curve to use.",
                    "type": "Easing",
                    "optional": true,
                    "optdefault": "Mappedin.Easing.Quadratic.In"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 139,
            "description": "A flexible function that will let you focus on collections of Nodes and/or Polygons.\nThis will move the camera to the center of all items passed in, and by default.\nzoom the camera in or out to fit everything in view, scaled by {{#crossLink \"MapView/focusZoomFactor:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "focusOn",
            "params": [
                {
                    "name": "options",
                    "description": "You should provide at least one Node or Polygon, but everything else is optional.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "nodes",
                            "description": "An array of Nodes to focus in on.",
                            "type": "[MappedinNode]",
                            "optional": true
                        },
                        {
                            "name": "polygons",
                            "description": "An array of Polygons to focus on. It's the center of the bounds of all Polygons, designed to fit everything into view.",
                            "type": "[MappedinPolygon]",
                            "optional": true
                        },
                        {
                            "name": "duration",
                            "description": "The duration the focus animation should last for.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "curve",
                            "description": "The animation curve to use for zooming in. Uses the animateCamera one by default.",
                            "type": "Easing",
                            "optional": true
                        },
                        {
                            "name": "focusZoomFactor",
                            "description": "You can overide the {{#crossLink \"MapView/focusZoomFactor:property\"}}{{/crossLink}} for a specific {{#crossLink \"MapView/focusOn:method\"}}{{/crossLink}} call, rather than globally, if you like.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "this.focusZoomFactor"
                        },
                        {
                            "name": "minZoom",
                            "description": "Sets a floor for how close you can zoom in on the scene. If it's lower than mapView.controls.minZoom, it's ignored.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        }
                    ]
                },
                {
                    "name": "option.changeZoom",
                    "description": "Whether to zoom the camera in or out, or just pan it.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                }
            ],
            "return": {
                "description": "Returns the {{#crossLink \"Tween\"}}{{/crossLink}} for advanced usage. Can generally be ignored.",
                "type": "Tween"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 157,
            "description": "Zoom out to show the entire Map.",
            "params": [
                {
                    "name": "options",
                    "description": "Options to pass on to the focus call.",
                    "type": "Object"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 163,
            "description": "Set the padding to be used in future zoom calls.",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 168,
            "description": "Returns the value you should call {{#crossLink \"CameraControls/setZoom:method\"}}{{/crossLink}} on to fit the Polygon exactly.",
            "itemtype": "method",
            "name": "getZoomLevelForPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon or Polygon ID to get the zoom level for",
                    "type": "String|MappedinPolygon"
                }
            ],
            "return": {
                "description": "The zoom level that will fit the Polygon",
                "type": "Integer"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 177,
            "description": "Returns the value you should call {{#crossLink \"CameraControls/setZoom:method\"}}{{/crossLink}} on to fit the {{#crossLink \"MapView/currentMap:property\"}}{{/crossLink}} exactly.",
            "itemtype": "method",
            "name": "getZoomLevelForCurrentMap",
            "return": {
                "description": "The zoom level that will fit the {{#crossLink \"MapView/currentMap:property\"}}{{/crossLink}}.",
                "type": "Integer"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 185,
            "description": "Resets the pan, tilt and rotation of the camera and sets the zoom to fit the {{#crossLink \"MapView/currentMap:property\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "resetCamera",
            "params": [
                {
                    "name": "forceOrigin",
                    "description": "Flag to forcibly reset the camera to origin (0, 0) instead of the centre of the map's bounding box.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 193,
            "description": "Returns the angle that points to north, in radians, from the default orientation.",
            "itemtype": "method",
            "name": "getNorth",
            "return": {
                "description": "The angle to north from the default orientation, in radians.",
                "type": "Number"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 203,
            "description": "Takes an element on the DOM and rotates it such that the top is pointing north. It will rotate with the camera, staying locked\non north. If you would like to align it do a different direction, or a different side of the element, pass in an offset. This\nis how you would do a compass rose.\n\nThis will modify your element's transform.",
            "itemtype": "method",
            "name": "lockNorth",
            "params": [
                {
                    "name": "element",
                    "description": "The element on the page to rotate.",
                    "type": "DOM Node"
                },
                {
                    "name": "offset",
                    "description": "The amount to offset the rotation by, in radians.",
                    "type": "Number"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 216,
            "description": "Stops the MapView from trying to rotate your element with the camera. Do this if you remove the element, or want to stop it from rotating.",
            "itemtype": "method",
            "name": "unlockNorth",
            "params": [
                {
                    "name": "element",
                    "description": "The node to stop rotating. It won't reset the transform, just leave it as is.",
                    "type": "DOM Node"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 224,
            "description": "Given a polygon/polygon id, set it to a specific color, and set any text label associated with that polygon to another color.",
            "itemtype": "method",
            "name": "setPolygonColor",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon/Polygon ID to change the color of.",
                    "type": "String|MappedinPolygon"
                },
                {
                    "name": "color",
                    "description": "The color to use.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "this.colors.select"
                },
                {
                    "name": "textColor",
                    "description": "The color to use for any {{#crossLink \"TextLabel\"}}{{/crossLink}}.",
                    "type": "Integer",
                    "optional": true,
                    "optdefault": "this.colors.textSelect"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 234,
            "description": "Resets a Polygon back to it's original color.\nIf the user is hovering over a polygon, it will still have the hover effect.",
            "itemtype": "method",
            "name": "clearPolygonColor",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon/Polygon ID to reset.",
                    "type": "MappedinPolygon|String"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 243,
            "description": "Resets ALL Polygons you have changed with {{#crossLink \"MapView/setPolygonColor:method\"}}{{/crossLink}} back to their original color.\nThe hover effect will still be present if the user is currently hovering over a Polygon.",
            "itemtype": "method",
            "name": "clearAllPolygonColors",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 251,
            "description": "Makes a single Polygon hoverable/clickable. Polygons you haven't called this on will be treated as non-interactive and not respond to any mouse events.",
            "itemtype": "method",
            "name": "addInteractivePolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon/Polygon ID to make interactive.",
                    "type": "MappedinPolygon|String"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 259,
            "description": "Makes all polygons attached to a location hoverable/clickable. Polygons you haven't called this on will be treated as non-interactive\nThis is a convenience function for calling {{#crossLink \"MapView/addInteractivePolygon:method\"}}{{/crossLink}} on all the polygons attached to all locations. You may also make individual polygons interactive with the addInteractivePolygon method instead of, or in addition to this method.",
            "itemtype": "method",
            "name": "addInteractivePolygonsForAllLocations",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "props": [
                        {
                            "name": "excludeTypes",
                            "description": "A list of Location types to skip. All locations of this type will be treated as non-iteractive",
                            "type": "[String]",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "locations",
                            "description": "An array of Location objects. Overrides the default of making all locations interactive, and instead applies to only the locations specified here.",
                            "type": "[MappedinLocation]",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 270,
            "description": "Makes a polygon no longer hoverable/clickable.",
            "itemtype": "method",
            "name": "removeInteractivePolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The previously interactive Polygon/Polygon ID to make non-interactive.",
                    "type": "MappedinPolygon|String"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 278,
            "description": "This is called when an interactive Polygon is clicked on.\nYou will almost certainly want to replace this with your own function in your client app.\nReturn \"false\" if you have consumed the event and it shouldn't bubble down to other Polygons beneath this one.",
            "itemtype": "method",
            "name": "onPolygonClicked",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon or Polygon ID that was clicked/tapped on.",
                    "type": "MappedinPolygon|String"
                }
            ],
            "return": {
                "description": "False if the event has been consumed and should not bubble down to other Polygons beneath it.",
                "type": "Boolean"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 289,
            "description": "This is fired when the user taps/clicks on the MapView without hitting an interactive Polygon.\nYou will almost certainly want to replace this with your own function in your client app.\nYou would probably use this to clear any Polygon highlighting, in certain situations.",
            "itemtype": "method",
            "name": "onNothingClicked",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 298,
            "description": "This creates a div with whatever HTML you provide, anchors it to `position` in 3D space, and optionally applies a css class you provide.\n`position` should be something you got from {{#crossLink \"MapView/getPositionPolygon:method\"}}{{/crossLink}} or {{#crossLink \"MapView/getPositionNode:method\"}}{{/crossLink}}.\nThe {{#crossLink \"Marker\"}}{{/crossLink}} is added for you, on to the {{#crossLink \"MapView/currentMap:property\"}}{{/crossLink}}, (or the one you specify).",
            "itemtype": "method",
            "name": "createMarker",
            "params": [
                {
                    "name": "html",
                    "description": "The HTML that the Marker will be. Typically just some text or an image, but you can be more creative if you want.",
                    "type": "String"
                },
                {
                    "name": "positing",
                    "description": "The position in 3D space to anchor the Marker to. Do not attempt to create it manually: use {{#crossLink \"MapView/getPositionPolygon:method\"}}{{/crossLink}} or {{#crossLink \"MapView/getPositionNode:method\"}}{{/crossLink}}.",
                    "type": "Object"
                },
                {
                    "name": "className",
                    "description": "The name of the CSS class to apply to the Marker.",
                    "type": "String"
                },
                {
                    "name": "map",
                    "description": "The map to add the Marker on. Defaults to the current map.",
                    "type": "MappedinMap|String",
                    "optional": true,
                    "optdefault": "this.currentMap"
                },
                {
                    "name": "options",
                    "description": "Passes on options (e.g. rotation, collisions, rotation with camera) to MapView.Marker's options argument. See {{#crossLink \"Marker\"}}{{/crossLink}} for more details.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "The Marker you created, which has already been added to the scene.",
                "type": "Marker"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 313,
            "description": "Adds an already created {{#crossLink \"Marker\"}}{{/crossLink}} to the scene. The Marker constructor is more powerful than the {{#crossLink \"MapView/createMarker:method\"}}{{/crossLink}} convenience function.",
            "itemtype": "method",
            "name": "addMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "The Marker to add.",
                    "type": "Marker"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 321,
            "description": "Removes a {{#crossLink \"Marker\"}}{{/crossLink}} you have added previously.",
            "itemtype": "method",
            "name": "removeMarker",
            "params": [
                {
                    "name": "marker",
                    "description": "A Marker that has previously been returned from {{#crossLink \"MapView/createMarker:method\"}}{{/crossLink}}.",
                    "type": "Marker"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 329,
            "description": "Removes all Markers (from all Maps, not just the current one).",
            "itemtype": "method",
            "name": "removeAllMarkers",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 336,
            "description": "Takes an x/y pair in Mappedin coordinate space and gives you an object suitable to use as a Marker's position.\n**Be careful about using this:** The coordinate system could change arbitrarily and without notice. You are better off\nusing a specific Node or Polygon as an anchor. If you need to use this for some reason, talk to your Mappedin representative.",
            "itemtype": "method",
            "name": "convertTo3DMapPosition",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "coordinate",
                    "description": "} A coordinate in Mappedin 2D space.",
                    "type": "X, y"
                }
            ],
            "return": {
                "description": "The position to anchor a Marker in 3D space.",
                "type": "Object"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 348,
            "description": "Gives you the top center of a Polygon in 3d scene space. Suitable for use as a {{#crossLink \"Marker\"}}{{/crossLink}}'s position.",
            "itemtype": "method",
            "name": "getPositionPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "Either the Polygon or Polygon ID you want the center of.",
                    "type": "MappedinPolygon|String"
                }
            ],
            "return": {
                "description": "The position to anchor a Marker in 3D space.",
                "type": "Object"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 357,
            "description": "Gives you the position of a Mappedin node in the 3D scene. Suitable for use as a {{#crossLink \"Marker\"}}{{/crossLink}}'s position.",
            "itemtype": "method",
            "name": "getPositionNode",
            "params": [
                {
                    "name": "node",
                    "description": "Either the Node or Node ID you want the center of.",
                    "type": "MappedinNode|String"
                }
            ],
            "return": {
                "description": "The position to anchor a marker in 3D space.",
                "type": "Object"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 366,
            "description": "A polygon can have state that renders the concept of being \"closed\", which is a generic blanket\nterm that can be used in general to inform the user that they can expect this polygon to not be\nservicing customers.",
            "itemtype": "method",
            "name": "updateClosedStateForPolygon",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "polygon",
                            "description": "Required. The polygon or polygon id whose state is being updated.",
                            "type": "MappedinPolygon|String"
                        },
                        {
                            "name": "closed",
                            "description": "Required. If true, the polygon will be marked as being closed. If false, the polygon will be marked as being open.",
                            "type": "Boolean"
                        },
                        {
                            "name": "open",
                            "description": "If true, a convenience parameter that is the converse of `options.closed`. Note that if both are present, `closed` will receive higher precedence.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 379,
            "description": "As the name suggests, all polygons will have their \"closed\" state set to \"opened\".",
            "itemtype": "method",
            "name": "openAllPolygons",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 386,
            "description": "Labels a specific Polygon (or area of 3D space) with a {{#crossLink \"TextLabel\"}}{{/crossLink}} that lives in 3D space. That means it will be smaller when the camera is further away, and the angle you see it at will change with the camera.\nThe text will flip 180 degrees when the camera rotates so it's never totally upside-down.\n\nIt also sets the hover label (in 2D and 3D).\nMany of these options do nothing in 2D, as TextLabels are not supported, but it won't break anything.\n\nYou must provide text, and either a Polygon, or a canvasBounds and height",
            "itemtype": "method",
            "name": "labelPolygon",
            "params": [
                {
                    "name": "options",
                    "description": "Most options are optional, but you do need text and either a Polygon, or a canvasBounds and height.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "text",
                            "description": "The full name text to use for the label.",
                            "type": "String"
                        },
                        {
                            "name": "shortText",
                            "description": "The short name text to use for the label.",
                            "type": "String"
                        },
                        {
                            "name": "polygon",
                            "description": "The Polygon or Polygon Id to make a label for. Only optional if you have set canvasBounds and height.",
                            "type": "MappedinPolygon|String"
                        },
                        {
                            "name": "canvasBounds",
                            "description": "Set this if you want to label an arbitrary part of the Map. You will need to specify height as well.",
                            "type": "CanvasBounds",
                            "optional": true,
                            "props": [
                                {
                                    "name": "x",
                                    "description": "The x coordinate for the TextLabel anchor.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "y",
                                    "description": "The y coordinate for the TextLabel anchor.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "width",
                                    "description": "The horizontal space we have to fit the TextLabel.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "height",
                                    "description": "The vertical space we have to fit the TextLabel.",
                                    "type": "Integer"
                                },
                                {
                                    "name": "align",
                                    "description": "Whether the TextLabel should be anchored against the (x,y), or the opposite (horizontal) side of the box, or in the middle. It is always vertically centered.",
                                    "type": "\"left\"|\"right\"|\"center\""
                                }
                            ]
                        },
                        {
                            "name": "height",
                            "description": "By default this is the upper bounds of the Polygon. If you don't have a Polygon, or want a custom height for some reason, you can set this.",
                            "type": "Float",
                            "optional": true
                        },
                        {
                            "name": "map",
                            "description": "If Polygon is not set, this will let you add a TextLabel to another Map. Otherwise, it will use the {{#crossLink \"MapView/currentMap:property\"}}{{/crossLink}}.",
                            "type": "MappedinMap|String",
                            "optional": true
                        },
                        {
                            "name": "margin",
                            "description": "The amount of space to leave before starting the text",
                            "type": "Float",
                            "optional": true,
                            "optdefault": "5"
                        },
                        {
                            "name": "color",
                            "description": "A optional special color if you don't want to use MapView.colors.text",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "this.colors.text"
                        },
                        {
                            "name": "fontSize",
                            "description": "How big to make the font. Defaults to 12",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "12"
                        },
                        {
                            "name": "font",
                            "description": "A CSS style string font. ie \"sans-serif\". You can specify your own font via @font-face rule with a font family, and then include that here. Note: Support for a THREE.Font object is still supported, but is deprecated.",
                            "optional": true
                        },
                        {
                            "name": "scaleMin",
                            "description": "The minimum percentage we can shrink the label to if it won't fit within the bounds at 100%. If it doesn't fit at that level, it won't be created.",
                            "type": "Float",
                            "optional": true,
                            "optdefault": "0.25"
                        },
                        {
                            "name": "scaleStep",
                            "description": "How much to decrement the scale each time it doesn't fit, so we don't end up with too many different font sizes on screen at once. If you are only labeling a few Polygons rather than everything,\n\t\tyou can set this and and scaleMin to 0.1 to fit everything except really long names perfectly.",
                            "type": "Float",
                            "optional": true,
                            "optdefault": ".25"
                        }
                    ]
                }
            ],
            "return": {
                "description": "The TextLabel, added to the scene for the correct Map.",
                "type": "TextLabel"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 419,
            "description": "Labels all Locations, in order of distance from the center of the Map. See {{#crossLink \"MapView/labelPolygon:method\"}}{{/crossLink}} for available label options.\nThe options are all optional, as the text and Polygon properties will be set for each Location.",
            "itemtype": "method",
            "name": "labelAllLocations",
            "params": [
                {
                    "name": "options",
                    "description": "Any option from }{{/crossLink}} (except text, polygon, canvasBounds, height and map), plus:",
                    "type": "#crossLink \"MapView/labelPolygon:property\"",
                    "props": [
                        {
                            "name": "excludeTypes",
                            "description": "is often used.",
                            "type": "[String]",
                            "optional": true,
                            "optdefault": "[]]  A list of Location types to skip labeling. [\"Amenities\""
                        },
                        {
                            "name": "sortFunction",
                            "description": "A sorting function that will determine which Location wins when a Polygon belongs to more than one. Uses the Location.sortOrder property by default, but if you have special logic you can use it here.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "locations",
                            "description": "An array of Location objects, or Location IDs. If excludeTypes and the sort function are not sufficient, you can explicitly set the Locations you are labeling. You can also call {{#crossLink \"MapView/labelPolygon:property\"}}{{/crossLink}} manually for every polygon you care about instead.",
                            "type": "[MappedinLocation]|[String]",
                            "optional": true
                        },
                        {
                            "name": "translationMap",
                            "description": "A set of key-value pairs for location state translations, where the key is the kebab-cased location state in english and the value is the text that should be shown.",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 432,
            "description": "Removes all labels from all Maps.",
            "itemtype": "method",
            "name": "removeAllLabels",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 438,
            "description": "This creates a tooltip that allows you to pass dynamic content which will attempt\n to position around an anchor in 3D space. The tooltip will be positioned based on one of four\n AnchorTypes (top, bottom, left, right).\n\n`options.defaultAnchorType` and `options.enabledAnchorTypes` should be one of the constants from Mappedin.Tooltip.ANCHOR\n`options.defaultAnchorType` will override `options.enabledAnchorTypes` if that anchor was disabled it will be automatically re-enabled",
            "itemtype": "method",
            "name": "createTooltip",
            "params": [
                {
                    "name": "options",
                    "description": "Passes on options (e.g. html, text, position, map, padding, defaultAnchorType, enabledAnchorTypes, collisionRank) to MapView.Tooltip's options argument.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "html",
                            "description": "Pass in custom html for your marker, if using this method you must also pass in a selector for your content.",
                            "optional": true
                        },
                        {
                            "name": "selector",
                            "description": "Used in conjuction with the html property to select the div for repositioning",
                            "optional": true
                        },
                        {
                            "name": "contentHtml",
                            "description": "Use mappedin's default tooltip styling with custom inner html content",
                            "optional": true
                        },
                        {
                            "name": "text",
                            "description": "Instead of passing html pass in plain text to be displayed in the tooltip",
                            "optional": true
                        },
                        {
                            "name": "position",
                            "description": "should be something you got from }{{/crossLink}} or {{#crossLink \"MapView/getPositionNode:method\"}}{{/crossLink}}.",
                            "type": "#crossLink \"MapView/getPositionPolygon:method\"",
                            "optional": true
                        },
                        {
                            "name": "map",
                            "description": "The map ID where the tooltip should be displayed",
                            "optional": true
                        },
                        {
                            "name": "padding",
                            "description": "The distance in pixel to offset the tooltip from the anchor point.",
                            "optional": true
                        },
                        {
                            "name": "enabledAnchorTypes",
                            "description": "An object used to disable certain anchor positions from being used.",
                            "optional": true
                        },
                        {
                            "name": "collisionRank",
                            "description": "The rank of the object used when comparing colliders to determine which should be shown.",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The Tooltip you created, which has already been added to the scene.",
                "type": "Tooltip"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 465,
            "description": "Removes a {{#crossLink \"Marker\"}}{{/crossLink}} you have added previously.",
            "itemtype": "method",
            "name": "removeTooltip",
            "params": [
                {
                    "name": "tooltip",
                    "description": "A Tooltip that has previously been returned from {{#crossLink \"MapView/createTooltip:method\"}}{{/crossLink}}.",
                    "type": "Tooltip"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 473,
            "description": "Let any image attached to a Polygon attached to a Location flip 180 degrees with the camera so it's always upright.",
            "itemtype": "method",
            "name": "enableImageFlippingForAllLocations",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "props": [
                        {
                            "name": "excludeTypes",
                            "description": "A list of Location types to skip, if for some reason there are Locations that have logos that shouldn't flip.",
                            "type": "[String]",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "locations",
                            "description": "An array of Location objects, or Location IDs. If excludeTypes is not sufficient you can explicitly set the Locations you are marking to flip. You can also call {{#crossLink \"MapView/enableImageFlippingForPolygon:method\"}}{{/crossLink}} manually for every polygon you care about instead.",
                            "type": "[MappedinLocation]|[String]",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 483,
            "description": "Mark a specific Polygon so, if it has an image, it rotates with the camera.",
            "itemtype": "method",
            "name": "enableImageFlippingForPolygon",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "props": [
                        {
                            "name": "polygonId",
                            "description": "The ID of the Polygon who's image (if any) should rotate.",
                            "type": "String"
                        },
                        {
                            "name": "rotation",
                            "description": "The how much the image has been rotated so that it's \"up\". Determined from the Polygon object itself typically, but can be set manually if needed.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 493,
            "description": "Create a font for use in 3D by passing in a JSON object generated from https://gero3.github.io/facetype.js/\nIgnored in 2D, retuning null",
            "deprecated": true,
            "deprecationMessage": "Use static method MapView3D.{{#crossLink \"MapView3D/createFont:method\"}}{{/crossLink}} instead",
            "itemtype": "method",
            "name": "createFont",
            "params": [
                {
                    "name": "facetypeJson",
                    "description": "Convert a font into JSON with Facetype.js, and put it in here.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the ThreeJS Font object created with the JSON, or null in 2D",
                "type": "Font"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 504,
            "description": "Calculates the length of the connected path in list of Nodes. Breaks in the path (to go to other floors) count as 0 distance. The Z value is also ignored.",
            "itemtype": "method",
            "name": "getPathLength",
            "params": [
                {
                    "name": "path",
                    "description": "An array of Nodes on a path, probably from a Node's {{#crossLink \"MappedinNode/directionsTo:method\"}}{{/crossLink}} call.",
                    "type": "[MappedinNode]"
                }
            ],
            "return": {
                "description": "The 2D length of the path",
                "type": "Integer"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 528,
            "description": "Draws an entire path. It takes a list of Nodes and will break them into separate pathSegments on every map change, putting the resultant segment on the right Map.\n\nIf you have a special use case (like off graph nodes, or Venues with same Vortexes) use the {{#crossLink \"MapView/drawPathSegment:method\"}}{{/crossLink}} function.\n\nReturns an array of pathSegments if you want to customize the animation triggers. The pathSegements are added to the scene, chained together, and start animating automatically.",
            "itemtype": "method",
            "name": "drawPath",
            "params": [
                {
                    "name": "path",
                    "description": "An array of Nodes, probably from a Node's {{#crossLink \"MappedinNode/directionsTo:method\"}}{{/crossLink}} call.",
                    "type": "[MappedinNode]"
                },
                {
                    "name": "options",
                    "description": "A list of style options for the path. Not everything is supported in 2D. See drawPath for available options. Note that drawDuration is per segment.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "An array of pathSegments.",
                "type": "[PathSegment]"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 542,
            "description": "Takes a list of {x, y} pairs in Mappedin coordinate space and draws a connected path on the specified Map. Use this function for special cases not handled by the drawPath convenience function.\nReturns a pathSegment. You will need to call it's {{#crossLink \"Tween\"}}{{/crossLink}}.start() function to begin animation and make the path segment visible.\nYou can customize the Tween.js tween if you like, but make sure tryRendering is always called in onUpdate or the path may stop.",
            "itemtype": "method",
            "name": "drawPathSegment",
            "params": [
                {
                    "name": "path",
                    "description": "An array of Nodes, probably from a Node's {{#crossLink \"MappedinNode/directionsTo:method\"}}{{/crossLink}} call.",
                    "type": "[MappedinNode]"
                },
                {
                    "name": "options",
                    "description": "A list of style options for the path. Not everything is supported in 2D.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "color",
                            "description": "Color of path. Uses colors.path if not specified.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "this.colors.path"
                        },
                        {
                            "name": "pulseColor",
                            "description": "Color of path pulse. Uses colors.pathPulse if not specified. Ignored in 2D.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "this.colors.pathPulse"
                        },
                        {
                            "name": "radius",
                            "description": "The radius of the path.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "10"
                        },
                        {
                            "name": "drawDuration",
                            "description": "Duration the path fade in animation for this segment, in milliseconds.",
                            "type": "Integer",
                            "optional": true,
                            "optdefault": "3000"
                        },
                        {
                            "name": "curve",
                            "description": "The animation curve to use for the path fade in animation.",
                            "type": "Easing",
                            "optional": true,
                            "optdefault": "Mappedin.Easing.Circular.InOut"
                        }
                    ]
                }
            ],
            "return": {
                "description": "A path segment object, with a tween property you should start(), and a reset() function to set it back to it's default state.",
                "type": "PathSegment"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 559,
            "description": "Removes a specific path segement from the map it's on.",
            "itemtype": "method",
            "name": "removePathSegment",
            "params": [
                {
                    "name": "pathSegment",
                    "description": "A segment returned from {{#crossLink \"MapView/drawPathSegment:method\"}}{{/crossLink}} or {{#crossLink \"MapView/drawPath:method\"}}{{/crossLink}}",
                    "type": "PathSegment"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 567,
            "description": "Removes all pathSegments from all Maps.",
            "itemtype": "method",
            "name": "removeAllPaths",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 574,
            "description": "Sets the clear color of the Map something else, it you want it to fit it more with your website. Otherwise the div will be white where there is no Map visible.",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "color",
                    "description": "The color to use. Not an HTML color name.",
                    "type": "Integer"
                },
                {
                    "name": "alpha",
                    "description": "Opacity between 0 and 1.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 583,
            "description": "The scene only renders when something has changed. This should be something a 3rd party developer doesn't need to worry about,\nbut if you are doing something weird, or have your own special tween for something, you will want to call this function.\nYou can call it as often as you want, it just sets a flag that we need to render again, and renders a few frames if we weren't already doing that.\nIgnored in 2D.",
            "itemtype": "method",
            "name": "tryRendering",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 592,
            "description": "Resets the MapView to the default state.",
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 602,
            "description": "Finds the main Location associated with a Polygon. This means a Location\nattached to the Polygon that has no parents, or, if there are none of those,\na Location nearest the top of some hierarchy that does have the Polygon attached.\n\nThis means if there are multiple hierarchies of Locations attached to the Polygon,\nthe one that gets returned is not guaranteed to be what you want.",
            "itemtype": "method",
            "name": "getPrimaryLocationForPolygon",
            "params": [
                {
                    "name": "polygon",
                    "description": "The Polygon you want the primary Location of.",
                    "type": "MappedinPolygon"
                }
            ],
            "return": {
                "description": "",
                "type": "MappedinLocation"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView.js",
            "line": 655,
            "description": "Create a font for use in 3D by passing in a JSON object generated from https://gero3.github.io/facetype.js/\nIgnored in 2D, retuning null",
            "static": 1,
            "params": [
                {
                    "name": "facetypeJson",
                    "description": "Convert a font into JSON with Facetype.js, and put it in here.",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns the ThreeJS Font object created with the JSON, or null in 2D",
                "type": "Font"
            },
            "class": "MapView"
        },
        {
            "file": "source/Mappedin.MapView2D.Marker.js",
            "line": 7,
            "type": "{any}",
            "class": "MapView2D"
        },
        {
            "file": "source/Mappedin.MapView2D.js",
            "line": 391,
            "description": "Simple utility function to calculate the maximum scroll bounds for our map so Leaflet\ndoes not scroll outside the map bounds",
            "class": "MapView2D"
        },
        {
            "file": "source/Mappedin.MapView2D.js",
            "line": 438,
            "description": "Takes Mappedin Polygon data creates the corrisponding Leaflet polygon in the\nmap's frame of reference. Each Mappedin polygon should only have one Leaflet\npolygon. Use highlightPolygon to change the styles.",
            "class": "MapView2D"
        },
        {
            "file": "source/Mappedin.MapView2D.js",
            "line": 901,
            "description": "Labels a specific polygon (or area of 3D space) with a text label that lives in 3D space.\nThat means it will be smaller when the camera is further away, and the angle you see it at will change with the camera.\nThe text will flip 180 degress when the camera rotates so it's never totally upside-down.\n\nPossible options = {\n\tpolygon - The polygon to make a label for\n\tcanvasBounds - Optional, to do this without a real Mappedin Polygon\n\theight - If you don't have a real polygon, you will need to set a height\n\ttext - The full name text to make the label\n\tshortText - The short name text to make the label\n\tmargin - The amount of space to leave before starting the text\n\tcolor - A optional special color if you don't want to use mapView.colors.text\n\tfontSize - How big to make the font. Defaults to 12\n\tfont - A THREE.Font object, if you have your own font you want to use.\n\tscaleMin - What percentage we can shrink the label to if it won't fit at 100%\n\tscaleStep - How much to decrement the scale each time it doesn't fit, so we don't end up with too many different font sizes\n}\n\nYou must provide AT LEAST text and either polygon or canvasBounds + height.",
            "class": "MapView2D"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 65,
            "description": "Create a transform that will be centered at the given position and use\nthe provided map parameters.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "context",
                            "description": "a rendering context\n used to hold the texture for map tiles",
                            "type": "WebGLRenderingContext",
                            "optional": true
                        },
                        {
                            "name": "lngLat",
                            "description": "the location of a point in the\n venue as a long-lat pair (note the order being swapped from lat-long; this\n is a mapbox convention)",
                            "type": "[number, number]",
                            "optional": true
                        },
                        {
                            "name": "lngLatInMapSpace",
                            "description": "position of `lngLat` in map space",
                            "type": "Vector2",
                            "optional": true
                        },
                        {
                            "name": "mapScale",
                            "description": "the scale factor between three.js world\n\tunits and real-world metres",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mapRotation",
                            "description": "the amount, in degrees, by which the\n\tmap's y-axis is rotated relative to mercator north (around the z-axis)",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 186,
            "description": "Free the tile cache for this outdoor context and render this object\nunusable.",
            "itemtype": "method",
            "name": "destroy",
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 206,
            "description": "Return true if the outdoor context for the current viewport is fully\nloaded.",
            "itemtype": "method",
            "name": "loaded",
            "return": {
                "description": "true if outdoor context is loaded",
                "type": "Boolean"
            },
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 217,
            "description": "Given the current Web SDK camera projection, convert that into a mapbox\ntransform and use that to determine which mapbox tiles are visible and\nbegin loading them.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "camera",
                    "description": "the camera projection used for rendering",
                    "type": "THREE.Camera"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 247,
            "description": "Render all of the loaded map tiles to the viewport.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "resolution",
                    "description": "the current viewport resolution",
                    "type": "Vector2"
                },
                {
                    "name": "camera",
                    "description": "the camera projection used for rendering",
                    "type": "THREE.Camera"
                },
                {
                    "name": "renderTarget",
                    "description": "if not null, a specific render target to render to",
                    "type": "THREE.RenderTarget"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 265,
            "description": "True iff the rendering function should be retriggered on the next frame\nto handle continuing animations.",
            "itemtype": "property",
            "name": "needsReRender",
            "type": "Boolean",
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 275,
            "description": "Set the location of the venue's position on the globe as a long-lat\npair.\n\nNote the order being swapped from lat-long; this is a mapbox convention.",
            "itemtype": "method",
            "name": "setLngLat",
            "params": [
                {
                    "name": "lngLat",
                    "description": "location of the map",
                    "type": "[number, number]"
                },
                {
                    "name": "lngLatInMapSpace",
                    "description": "map-space position of the `lngLat` argument",
                    "type": "Vector2"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 289,
            "description": "Set the scaling factor between three.js world units and real-world metres\nused by the active map.",
            "itemtype": "method",
            "name": "setMapScale",
            "params": [
                {
                    "name": "mapScale",
                    "description": "scale factor",
                    "type": "Number"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 300,
            "description": "Set the amount, in degrees, by which the\nmap's y-axis is rotated relative to mercator north (around the z-axis).",
            "itemtype": "method",
            "name": "setMapRotation",
            "params": [
                {
                    "name": "mapRotation",
                    "description": "rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 311,
            "description": "Set the size of the current viewport in pixels.",
            "itemtype": "method",
            "name": "setViewportSize",
            "params": [
                {
                    "name": "viewportSize",
                    "description": "viewport size in pixels",
                    "type": "Vector2"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 328,
            "description": "Specify a color to overlay onto the outdoor context. Set opacity to zero to disable.",
            "itemtype": "method",
            "name": "setOverlayColor",
            "params": [
                {
                    "name": "color",
                    "description": "the overlay color",
                    "type": "THREE.Color"
                },
                {
                    "name": "opacity",
                    "description": "the overlay opacity",
                    "type": "Number"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 339,
            "description": "Set whether or not the overlay color should have a gradient effect, and\nif so, set the secondary color.",
            "itemtype": "method",
            "name": "setOverlayColorGradient",
            "params": [
                {
                    "name": "gradient",
                    "description": "if true, a gradient",
                    "type": "Boolean"
                },
                {
                    "name": "color",
                    "description": "if gradient is true, the secondary gradient color",
                    "type": "THREE.Color"
                },
                {
                    "name": "opacity",
                    "description": "if gradient is true, the secondary gradient opacity",
                    "type": "Number"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 352,
            "description": "If true, the tiles in the outdoor context will be drawn. If false, only the\nbackground and the overlay will be drawn, making this suitable for use in a\nmulti-floor view.",
            "itemtype": "method",
            "name": "setShouldDrawTiles",
            "params": [
                {
                    "name": "shouldDrawTiles",
                    "description": "if true, tiles will be drawn",
                    "type": "Boolean"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 364,
            "description": "Register debugging controls for this outdoor context.",
            "itemtype": "method",
            "name": "addDebugControls",
            "params": [
                {
                    "name": "debugUI",
                    "description": "",
                    "type": "DebugUI"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 484,
            "description": "Remove debugging controls for this outdoor context.",
            "itemtype": "method",
            "name": "removeDebugControls",
            "params": [
                {
                    "name": "debugUI",
                    "description": "",
                    "type": "DebugUI"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 633,
            "description": "Print some debug status for this outdoor context.",
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 640,
            "description": "Handle an event fired by a mapbox object.",
            "itemtype": "method",
            "name": "_handleEvent",
            "params": [
                {
                    "name": "event",
                    "description": "the event being processed",
                    "type": "Object"
                }
            ],
            "class": "MapboxOutdoorContext"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 769,
            "description": "Create a transform that will be centered at the given position and use\nthe provided map parameters.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "lngLat",
                            "description": "the location of a point in the\n venue as a long-lat pair (note the order being swapped from lat-long; this\n is a mapbox convention)",
                            "type": "[number, number]",
                            "optional": true
                        },
                        {
                            "name": "lngLatInMapSpace",
                            "description": "position of `lngLat` in map space",
                            "type": "Vector2",
                            "optional": true
                        },
                        {
                            "name": "mapScale",
                            "description": "the scale factor between three.js world\n\tunits and real-world metres",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "mapRotation",
                            "description": "the amount, in degrees, by which the\n\tmap's y-axis is rotated relative to mercator north (around the z-axis)",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "viewportSize",
                            "description": "the size of the current viewport in\n\tpixels",
                            "type": "Vector2",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 807,
            "description": "Set the location of the map's position on the globe as a long-lat\npair.\n\nNote the order being swapped from lat-long; this is a mapbox convention.",
            "itemtype": "method",
            "name": "setLngLat",
            "params": [
                {
                    "name": "lngLat",
                    "description": "location of the map position",
                    "type": "[number, number]"
                },
                {
                    "name": "lngLatInMapSpace",
                    "description": "position of `lngLat` in map space",
                    "type": "Vector2"
                }
            ],
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 823,
            "description": "Set the scaling factor between three.js world units and real-world metres\nused by the active map.",
            "itemtype": "method",
            "name": "setMapScale",
            "params": [
                {
                    "name": "mapScale",
                    "description": "scale factor",
                    "type": "Number"
                }
            ],
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 835,
            "description": "Set the amount, in degrees, by which the\nmap's y-axis is rotated relative to mercator north (around the z-axis).",
            "itemtype": "method",
            "name": "setMapRotation",
            "params": [
                {
                    "name": "mapRotation",
                    "description": "rotation in degrees",
                    "type": "Number"
                }
            ],
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 847,
            "description": "Set the size of the current viewport in pixels.",
            "itemtype": "method",
            "name": "setViewportSize",
            "params": [
                {
                    "name": "viewportSize",
                    "description": "viewport size in pixels",
                    "type": "Vector2"
                }
            ],
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 857,
            "description": "Given the current Web SDK camera projection, convert that into a mapbox\ntransform and use that to determine which mapbox tiles are visible and\nbegin loading them.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "camera",
                    "description": "the camera projection used for rendering",
                    "type": "THREE.Camera"
                }
            ],
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 886,
            "description": "Compute intermediate values from the current camera parameters.",
            "itemtype": "method",
            "name": "_recalculate",
            "access": "private",
            "tagname": "",
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 955,
            "description": "Given a set of coordinates in the Web SDK coordinate system, return those\ncoordinates in Mapbox mercator projection coordinates.",
            "itemtype": "method",
            "name": "webSDKCoordinatesToMercator",
            "params": [
                {
                    "name": "coords",
                    "description": "coordinates in Web SDK world space",
                    "type": "Vector3"
                }
            ],
            "return": {
                "description": "coordinates in mapbox mercator projection space",
                "type": "MercatorCoordinate"
            },
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 969,
            "description": "Given a set of coordinates in the Mapbox Mercator coordinate system,\nreturn those coordinates in SDK world-space.",
            "itemtype": "method",
            "name": "mercatorCoordinatesToWebSDK",
            "params": [
                {
                    "name": "coords",
                    "description": "coordinates in mapbox mercator projection",
                    "type": "MercatorCoordinate"
                }
            ],
            "return": {
                "description": "coordinates in Web SDK world space",
                "type": "Vector3"
            },
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 983,
            "description": "Given a point within the OpenGL clip space, convert that to the\ncorresponding Mercator projection point in the z=0 plane.",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "mercator coordinate represented by the\n\t\tgiven point in the camera projection",
                "type": "MercatorCoordinate"
            },
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1016,
            "description": "Return the position and scale of the given tile in Mapbox mercator\ncoordinates.",
            "itemtype": "method",
            "name": "tileMercatorPosition",
            "params": [
                {
                    "name": "tileId",
                    "description": "tile ID from mapbox",
                    "type": "UnwrappedTileID"
                }
            ],
            "return": {
                "description": "translation and scale of tile",
                "type": "[MercatorCoordinate, number]"
            },
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1046,
            "description": "Return the transformation of the given tile in SDK world space\ncoordinates.",
            "itemtype": "method",
            "name": "tileWebSDKPosition",
            "params": [
                {
                    "name": "tileId",
                    "description": "tile ID from mapbox",
                    "type": "UnwrappedTileID"
                }
            ],
            "return": {
                "description": "translation, scale and rotation of tile\n\t(with rotation represented as (sin, cos))",
                "type": "[Vector2, number, Vector2]"
            },
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1065,
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1099,
            "description": "Return all the tiles that are visible at this camera transform.\nThis code is copied with modifications from `mapbox-gl/geo/transform.js'.\n\nThis is used in two places: The `SourceCache` uses it from within the\nmapbox SDK code to determine which tiles it should be trying to load into\nmemory, and we use it in `TileRenderer` to determine which tiles are\nactually visible to ensure they get rendered.",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "tileSize",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "minzoom",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "maxzoom",
                            "description": "",
                            "type": "Number"
                        },
                        {
                            "name": "roundZoom",
                            "description": "",
                            "type": "Boolean"
                        },
                        {
                            "name": "reparseOverscaled",
                            "description": "",
                            "type": "Boolean"
                        },
                        {
                            "name": "renderWorldCopies",
                            "description": "",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "OverscaledTileIDs",
                "type": "Array<OverscaledTileID>"
            },
            "class": "MockTransform"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1168,
            "description": "Construct a new `TileRenderer` that will render to the given WebGL\ncontext.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "context",
                    "description": "the context to which tiles will\n\t\tbe rendered; must be provided on construction to initialize shaders\n\t\tand vertex buffers",
                    "type": "mapboxgl.Context"
                },
                {
                    "name": "map",
                    "description": "the map to which tiles will be rendered; needed\n\t\tbecause of some really invasive mapbox lookup chains",
                    "type": "MockMap"
                }
            ],
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1420,
            "description": "Specify a color to overlay onto the outdoor context. Set opacity to zero to disable.",
            "itemtype": "method",
            "name": "setOverlayColor",
            "params": [
                {
                    "name": "color",
                    "description": "the overlay color",
                    "type": "THREE.Color"
                },
                {
                    "name": "opacity",
                    "description": "the overlay opacity",
                    "type": "Number"
                }
            ],
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1433,
            "description": "Set whether or not the overlay color should have a gradient effect, and\nif so, set the secondary color.",
            "itemtype": "method",
            "name": "setOverlayColorGradient",
            "params": [
                {
                    "name": "gradient",
                    "description": "if true, a gradient",
                    "type": "Boolean"
                },
                {
                    "name": "color",
                    "description": "if gradient is true, the secondary gradient color",
                    "type": "THREE.Color"
                },
                {
                    "name": "opacity",
                    "description": "if gradient is true, the secondary gradient opacity",
                    "type": "Number"
                }
            ],
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1451,
            "description": "If true, the tiles in the outdoor context will be drawn. If false, only the\nbackground and the overlay will be drawn, making this suitable for use in a\nmulti-floor view.",
            "itemtype": "method",
            "name": "setShouldDrawTiles",
            "params": [
                {
                    "name": "shouldDrawTiles",
                    "description": "if true, tiles will be drawn",
                    "type": "Boolean"
                }
            ],
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1464,
            "description": "Render the tiles in the provided `sourceCache` to the WebGL context\nassociated with this `TileRenderer`, from the given perspective.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "camera",
                    "description": "three.js camera pointed at the scene",
                    "type": "Camera"
                },
                {
                    "name": "transform",
                    "description": "the transform that contains the set of\n\t\ttiles visible from the current camera angle",
                    "type": "MockTransform"
                },
                {
                    "name": "sourceCache",
                    "description": "the source cache containing the tiles\n\t\tto be rendered",
                    "type": "SourceCache"
                }
            ],
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1621,
            "description": "Dump rendering state.",
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1660,
            "description": "Return the user-specified override for the given style property.",
            "itemtype": "method",
            "name": "getStyleOverride",
            "params": [
                {
                    "name": "layerName",
                    "description": "the name of the style layer to get",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "the name of the property to get",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the values to return if there is no override",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "any if it has been overridden, the overridden style value\n\t(merged with `value` if both are objects) else `value`"
            },
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1687,
            "description": "Return the user-specified override for the given style property, or the\nnon-overridden value if one has not been set.",
            "itemtype": "method",
            "name": "getStyleOverrideOrDefault",
            "params": [
                {
                    "name": "layerName",
                    "description": "the name of the style layer to get",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "the name of the property to get",
                    "type": "String"
                }
            ],
            "return": {
                "description": "any the overridden style value, if it has been overridden,\n\telse the actual value"
            },
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1742,
            "description": "Set an override for the given style property, or clear it if the provided\n`value` is null or undefined.",
            "itemtype": "method",
            "name": "setStyleOverride",
            "params": [
                {
                    "name": "layerName",
                    "description": "the name of the style layer to edit",
                    "type": "String"
                },
                {
                    "name": "property",
                    "description": "the name of the property to edit",
                    "type": "String"
                },
                {
                    "name": "value",
                    "description": "the value to assign to the property",
                    "type": "Any"
                }
            ],
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1758,
            "description": "Return a mapping from style layers to the set of properties that they\nhave that may be overridden.",
            "itemtype": "method",
            "name": "getOverridableStyles",
            "params": [
                {
                    "name": "style",
                    "description": "style to get overridable style values for",
                    "type": "mapboxgl.Style"
                }
            ],
            "return": {
                "description": "A mapping from style layers to the set of\n\toverridable properties",
                "type": "String -> [string]"
            },
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1778,
            "description": "Determine the camera matrices that will be used for rendering vertex\nbuffers that are in Web SDK coordinates and mapbox Mercator projection\ncoordinates.",
            "itemtype": "method",
            "name": "_computeCameraMatrices",
            "access": "private",
            "tagname": "",
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 1845,
            "description": "2020/01/09 Terence Dickson\n\nThree.js' vertex attributes aren't correctly restored after we do our own\nWebGL boogie, so it's necessary to record their values and restore them\nafter we're finished rendering.\n\nFor some reason, this manifests as distorted canvas bounds labels on\nFirefox; I didn't see any issues on Chrome.",
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MapboxOutdoorContext.js",
            "line": 2530,
            "description": "Compute the model-to-world matrix for a tile, taking coordinates from a\nMapbox vertex buffer and transforming them to the SDK world-space\ncoordinates.\n\nThis is copied from the computation for `posMatrix` in the `Transform`\nclass, with minor edits as mentioned in the comments.",
            "itemtype": "method",
            "name": "_getPosMatrix",
            "access": "private",
            "tagname": "",
            "class": "TileRenderer"
        },
        {
            "file": "source/Mappedin.MultiFloorView.js",
            "line": 273,
            "description": "Display 2D screen projections of each 3D map object in the journey. Useful for drawing 2D elements on screen.",
            "itemtype": "attribute",
            "name": "projections",
            "readonly": "",
            "return": {
                "description": "Array for Objects with min/max x/y values",
                "type": "Array"
            },
            "example": [
                "\n\n\tprojections = [{\n\t\tmax: {\n\t\t\tx: 1062.4393974378236,\n\t\t\ty: 745.7583492891705\n\t\t},\n\t\tmin: {\n\t\t\tx: 17.560602562176346,\n\t\t\ty: 225.0806956450056\n\t\t}\n\t...\n\t]"
            ],
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 72,
            "description": "The mode that navigator is currently in. One of SINGLEFLOOR, MULTIFLOOR_OVERVIEW, MULTIFLOOR_FOCUSED",
            "itemtype": "property",
            "name": "mode",
            "type": "{String}",
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 80,
            "itemtype": "property",
            "name": "MODES",
            "type": "{Number[]}",
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 110,
            "description": "Display 2D screen projections of each 3D map object in the journey. Useful for drawing 2D elements on screen.",
            "readonly": "",
            "return": {
                "description": "Array for Objects with min/max x/y values",
                "type": "Array"
            },
            "example": [
                "\n\n\tnavigator.projections = [{\n\t\tmax: {\n\t\t\tx: 1062.4393974378236,\n\t\t\ty: 745.7583492891705\n\t\t},\n\t\tmin: {\n\t\t\tx: 17.560602562176346,\n\t\t\ty: 225.0806956450056\n\t\t}\n\t...\n\t]"
            ],
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 134,
            "description": "Draws virtual Layers (private)",
            "itemtype": "method",
            "name": "_drawVirtualLayer",
            "access": "private",
            "tagname": "",
            "return": {
                "description": "Marker",
                "type": "Object"
            },
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 233,
            "description": "Sets up the navigator for a set of directions. Typically uses directions returned by `startNode.directionsTo()` calls.\n\nThis can be used to update the directions object any time.",
            "itemtype": "method",
            "name": "setDirections",
            "params": [
                {
                    "name": "directions",
                    "description": "Directions object returned by `startNode.directionsTo()`",
                    "type": "Object",
                    "props": [
                        {
                            "name": "path",
                            "description": "Array of nodes representing path to travel",
                            "type": "Array"
                        },
                        {
                            "name": "instructions",
                            "description": "Array of instructions for journey",
                            "type": "Array"
                        }
                    ]
                }
            ],
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 249,
            "description": "Sets multiplier scale to better fit 4K and 8K screens at 1:1 pixel ratio. If stuff is too small on 4K screens, set to 2, etc.",
            "itemtype": "method",
            "name": "setScale",
            "params": [
                {
                    "name": "scale",
                    "description": "Scale up DOM elements by this multiplier",
                    "type": "Number=1"
                }
            ],
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 367,
            "description": "Sets up navigator settings. Typically uses options as documented by `Navigator.showOverview()`\n\t*",
            "itemtype": "method",
            "name": "setOptions",
            "params": [
                {
                    "name": "options",
                    "description": "Options Object",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "hideLabels",
                            "description": "Hide labels after showing journey",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "drawConnectionMarkers",
                            "description": "Draw multi-floor connection markers",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "drawDepartureMarker",
                            "description": "Draw marker indicating departure",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "drawDestinationMarker",
                            "description": "Draw marker indicating destination",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "showConnectionType",
                            "description": "Adds icon indicating connection type to connection markers",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "debug",
                            "description": "Show debug information",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "connectionsThreshold",
                            "description": "Distance in meters between entry and exit connections on a floor to use as a threshold to make it into a virtual layer",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "100"
                        },
                        {
                            "name": "combineSimilarConnections",
                            "description": "Combine floors with similar entry and exit connections into virtual layers",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "pathOptions",
                            "description": "Options for path drawing. See {{#crossLink \"MapView3D/drawPath\"}}{{/crossLink}} options for customizing path",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "focusOptions",
                            "description": "Options for focusing on the path when in single floor mode. See See {{#crossLink \"MapView3D/focusOn\"}}{{/crossLink}}",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "expandOptions",
                            "description": "Options for expanding the maps.",
                            "type": "Object",
                            "optional": true,
                            "props": [
                                {
                                    "name": "enabled",
                                    "description": "Determine whether to expand the maps or remain in single map mode",
                                    "type": "Boolean",
                                    "optional": true
                                },
                                {
                                    "name": "focus",
                                    "description": "Focus the camera onto expanded maps",
                                    "type": "Boolean",
                                    "optional": true,
                                    "optdefault": "false"
                                },
                                {
                                    "name": "rotation",
                                    "description": "Rotation of scene relative to zero (degrees)",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "0"
                                },
                                {
                                    "name": "duration",
                                    "description": "Duration of focus animation in ms",
                                    "type": "Number",
                                    "optional": true,
                                    "optdefault": "300"
                                }
                            ]
                        }
                    ]
                }
            ],
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 413,
            "description": "Enters journey overview mode. Handles multi-floor navigation and drawing of the path.\n\nNote: Pass directions if they haven't been set using `Navigator.setDirections()`",
            "itemtype": "method",
            "name": "showOverview",
            "params": [
                {
                    "name": "directions",
                    "description": "Optional parameters to customize specific behaviours.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "path",
                            "description": "Array of nodes representing path to travel",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "instructions",
                            "description": "Array of instructions for journey",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "description": "Options object as documented in {{#crossLink \"Navigator/setOptions\"}}{{/crossLink}}",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "[directions.animationDuration}",
                    "description": "Time in ms for the animation to take",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A promise that will resolve once the maps are displayed and path drawn",
                "type": "Promise"
            },
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 566,
            "description": "Exits out of navigation and focuses on currently selected map.",
            "itemtype": "method",
            "name": "hideOverview",
            "return": {
                "description": "A promise that will resolve once the currently selected map is focused on",
                "type": "Promise"
            },
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 584,
            "description": "Fired when clicking on a map connection marker when in multi-floor mode. Return true in passed in function to prevent default behavior",
            "itemtype": "event",
            "name": "onConnectionClicked",
            "params": [
                {
                    "name": "params",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "mapId",
                            "description": "mapId of map connecting to",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 602,
            "description": "Focus on the nodes on the current map.",
            "access": "private",
            "tagname": "",
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 616,
            "description": "Zooms into a specific map in the journey. This can be useful when showing the user detailed directions on a specific map\n\t*",
            "itemtype": "method",
            "name": "zoomIn",
            "params": [
                {
                    "name": "mapId",
                    "description": "Mappedin Map Object or Map Id",
                    "type": "Mappedin.Map|String"
                }
            ],
            "return": {
                "description": "A promise that will resolve once the map is zoomed in to",
                "type": "Promise"
            },
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 671,
            "description": "Reset overview state",
            "itemtype": "method",
            "name": "reset",
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 690,
            "description": "Zooms back out into overview mode, displaying the whole journey, draws the full path once again.\n\t*",
            "itemtype": "method",
            "name": "zoomOut",
            "return": {
                "description": "A promise that will resolve once the map is zoomed in to",
                "type": "Promise"
            },
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.Navigator.js",
            "line": 706,
            "description": "Zooms back out into overview mode, displaying the whole journey, draws the full path once again.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "_removeVirtualLayers",
            "class": "Navigator"
        },
        {
            "file": "source/Mappedin.RenderTasks.js",
            "line": 1,
            "description": "Tasks that can be submitted to the renderer. The `STATIC_AND_ANIMATED` task\nis equivalent to a full re-render.",
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 30,
            "is_constructor": 1,
            "params": [
                {
                    "name": "renderOptions",
                    "description": "Options for rendering",
                    "type": "Object"
                },
                {
                    "name": "options.multiBufferRendering",
                    "description": "\n\t\tWhether to use a multi-buffer renderer",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "options.alpha",
                    "description": "\n\t\tIf true, will allow for a semi-transparent background",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "true"
                },
                {
                    "name": "options.antialias",
                    "description": "\n\t\tIf true, will attempt to antialias rendering if supported",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "options.backgroundColor",
                    "description": "\n\t\tThe color that will be displayed behind the scene",
                    "type": "Color",
                    "optional": true,
                    "optdefault": "0xffffff"
                },
                {
                    "name": "options.backgroundAlpha",
                    "description": "\n\t\tThe opacity of the background color",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1.0"
                },
                {
                    "name": "options.onWebGLContextCreationError",
                    "description": "\n\t\tA callback that will be triggered if WebGL context creation fails",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "options.onWebGLContextLost",
                    "description": "\n\t\tA callback that will be triggered if the WebGL context is killed",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "options.onWebGLContextRestored",
                    "description": "\n\t\tA callback that will be triggered when three.js reacquires a WebGL context",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                },
                {
                    "name": "options.onWebGLRendererError",
                    "description": "\n\t\tA callback that will be triggered if the renderer throws an error",
                    "type": "Function",
                    "optional": true,
                    "optdefault": "null"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 93,
            "description": "Dispose of any resources and connections allocated by the renderer.",
            "itemtype": "method",
            "name": "destroy",
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 114,
            "description": "Render the scene to the provided framebuffer. A null framebuffer will\nrender to the default canvas.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderTask",
                    "description": "",
                    "type": "RENDER"
                },
                {
                    "name": "renderTarget",
                    "description": "",
                    "type": "Null or WebGLRenderTarget"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 128,
            "description": "Return the maximum supported anisotropy of this renderer.",
            "itemtype": "method",
            "name": "getMaxAnisotropy",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 138,
            "description": "Return the size of the renderer's target.",
            "itemtype": "method",
            "name": "getBufferSize",
            "return": {
                "description": "",
                "type": "Vector2"
            },
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 148,
            "description": "Return the WebGL context associated with this renderer, to ensure\nother objects that use WebGL will put their textures in the same\ncontext.",
            "itemtype": "method",
            "name": "context",
            "return": {
                "description": "context used by this renderer",
                "type": "WebGLRenderingContext"
            },
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 160,
            "description": "Preload a texture, I think. Not actually sure what this does. TODO.",
            "itemtype": "method",
            "name": "preloadTexture",
            "params": [
                {
                    "name": "texture",
                    "description": "",
                    "type": "Texture"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 170,
            "description": "Set the renderer and all its internal buffers to the provided width and\nheight in pixels.",
            "itemtype": "method",
            "name": "setBufferSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 190,
            "description": "Set the color and opacity that will be drawn behind the scene.",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Color"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 206,
            "description": "Assign an outdoor context to this renderer, which will be included as\npart of the `STATIC` rendering pass.",
            "itemtype": "method",
            "name": "setMapboxOutdoorContext",
            "params": [
                {
                    "name": "mapboxOutdoorContext",
                    "description": "context to draw",
                    "type": "MapboxOutdoorContext"
                }
            ],
            "class": "Renderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 290,
            "description": "Dispose of the renderer.",
            "class": "SingleBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 297,
            "description": "Re-render the scene. This ignores the `renderTask` argument, as all\nre-renders in the single-buffer renderer are full re-renders.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderTask",
                    "description": "",
                    "type": "RENDER"
                },
                {
                    "name": "renderTarget",
                    "description": "",
                    "type": "Null or WebGLRenderTarget"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "SingleBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 328,
            "description": "Set the size of the renderer.",
            "itemtype": "method",
            "name": "setBufferSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SingleBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 339,
            "description": "Set the color and opacity that will be drawn behind the scene.",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Color"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "SingleBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 351,
            "description": "Assign an outdoor context to this renderer.",
            "itemtype": "method",
            "name": "setMapboxOutdoorContext",
            "params": [
                {
                    "name": "mapboxOutdoorContext",
                    "description": "context to draw",
                    "type": "MapboxOutdoorContext"
                }
            ],
            "class": "SingleBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 491,
            "description": "Dispose of the renderer and its buffers.",
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 501,
            "description": "Compose all buffers into the final image that is sent to the viewport.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "renderComposite",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "",
                    "type": "Null or WebGLRenderTarget"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 522,
            "description": "Renders the scene's animated layer to its dedicated buffer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "renderToAnimatedBuffer",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 538,
            "description": "Render the provided scene using the given camera, re-rendering only\nthe animated parts.",
            "itemtype": "method",
            "name": "renderAnimated",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "",
                    "type": "Null or WebGLRenderTarget"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 552,
            "description": "Renders the scene's always-on-top layer to its dedicated buffer.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "renderToAlwaysOnTopBuffer",
            "params": [
                {
                    "name": "scene",
                    "description": "",
                    "type": "*"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "*"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 568,
            "description": "Render the provided scene using the given camera, re-rendering only\nthe parts that should appear on top of all other elements.",
            "itemtype": "method",
            "name": "renderAlwaysOnTop",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "",
                    "type": "Null or WebGLRenderTarget"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 582,
            "description": "Render all of the scene layers, then combine them.",
            "itemtype": "method",
            "name": "renderAll",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "",
                    "type": "Null or WebGLRenderTarget"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 619,
            "description": "Re-render the scene, depending on which parts of the scene have been\ninvalidated.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "",
                    "type": "Null or WebGLRenderTarget"
                },
                {
                    "name": "scene",
                    "description": "",
                    "type": "Scene"
                },
                {
                    "name": "sceneCamera",
                    "description": "",
                    "type": "Camera"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 640,
            "description": "Set the size of the renderer, and all its internal buffers.",
            "itemtype": "method",
            "name": "setBufferSize",
            "params": [
                {
                    "name": "width",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 654,
            "description": "Set the color and opacity that will be drawn behind the scene.",
            "itemtype": "method",
            "name": "setBackgroundColor",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Color"
                },
                {
                    "name": "alpha",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Renderer.js",
            "line": 666,
            "description": "Assign an outdoor context to this renderer.",
            "itemtype": "method",
            "name": "setMapboxOutdoorContext",
            "params": [
                {
                    "name": "mapboxOutdoorContext",
                    "description": "context to draw",
                    "type": "MapboxOutdoorContext"
                }
            ],
            "class": "MultiBufferRenderer"
        },
        {
            "file": "source/Mappedin.Search.js",
            "line": 21,
            "description": "The types of assets available for this venue.",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "ASSET_TYPES",
            "type": "LOCATION, EVENT",
            "class": "Search"
        },
        {
            "file": "source/Mappedin.Search.js",
            "line": 242,
            "description": "Makes a call to the Mappedin Smart Search API with the provided query, retuning a Promise that will fulfill with a\nSearchResults object. This will contain a list of `hits`, which can currently be SearchItems (either SearchLocations or SearchEvents).\n\nThese are currently different from the objects you get directly from the Mappedin API,\ncontaining a subset of their data, but you can match on their IDs.\n\nThe data is broken down into pages. You can specify the size (defaults to 10).",
            "itemtype": "method",
            "name": "search",
            "params": [
                {
                    "name": "query",
                    "description": "The string to search for",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Any optional parameters you need to pass to the search API",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "ps",
                            "description": "Number of search results to return. Defaults to 10. You can get the next page from SearchResults.next",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "type",
                            "description": "If you want to limit your results to a specific type of SearcItem, specify it here. Currently either ASSET_TYPES.LOCATION or ASSET_TYPES.EVENT",
                            "type": "ASSET_TYPE",
                            "optional": true
                        },
                        {
                            "name": "expandCategories",
                            "description": "Whether the categories should be expanded to locations in search results when in fallback mode",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "The promise will resolve with either a SearchResults object if successful, or an error with a `message` and `status` if it fails\n\n\t\tSearchResults has the following propertyies and methods:\n\t\t\tquery: The search query that triggered this search\n\t\t\ttotal: The total number of results.\n\t\t\thits: The array of SearchItems in the current page.\n\n\t\t\tA SearchItem is an object that contains an id property that could match the id of a Location or Event on your Venue object. This is NOT GUARANTEED, however, as the data could have changed since the getVenue call was performed.\n\n\t\t\tnextPage() -> A promise that will resolve with the next page of SearchResults",
                "type": "Promise"
            },
            "class": "Search"
        },
        {
            "file": "source/Mappedin.Search.js",
            "line": 321,
            "description": "Makes a call to the Mappedin Smart Search Suggestions API with the provided query, retuning a Promise that will fulfill with a\nSuggestions object. This will contain a list of `hits`, which are words that match full search results. This should be used\nto aid in autocoplete for a search bar. It's ordered for you by most relevant.",
            "itemtype": "method",
            "name": "suggest",
            "params": [
                {
                    "name": "query",
                    "description": "The string to get autocomplete suggestions for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The promise will resolve with either a Suggestions object if successful, or an error with a `message` and `status` if it fails\n\n\t\tSuggestions has the following propertyies and methods:\n\t\t\tquery: The suggestion query that triggered this list of suggestions (to make sure it's still what's in the text bar)\n\t\t\ttotal: The total number of suggestions.\n\t\t\thits: The array of Strings matching the query",
                "type": "Promise"
            },
            "class": "Search"
        },
        {
            "file": "source/Mappedin.SmartLabel.js",
            "line": 51,
            "description": "Create a new SmartLabelBatchCreator instance.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mapView",
                    "description": "",
                    "type": "MapView3D"
                },
                {
                    "name": "debounceDelayMS",
                    "description": "You want to choose a small enough value that results in the smallest number of batch operations (the goal is just 1 batch operation, resulting in a single reflow + repaint once all labels within the batch have been added to the document )",
                    "type": "Number"
                }
            ],
            "class": "SmartLabelBatchCreator"
        },
        {
            "file": "source/Mappedin.SmartLabel.js",
            "line": 79,
            "description": "Reset internal data structures used for batching.",
            "class": "SmartLabelBatchCreator"
        },
        {
            "file": "source/Mappedin.SmartLabel.js",
            "line": 91,
            "description": "Add to the batch.",
            "params": [
                {
                    "name": "smartLabel",
                    "description": "",
                    "type": "SmartLabel"
                }
            ],
            "class": "SmartLabelBatchCreator"
        },
        {
            "file": "source/Mappedin.SmartLabel.js",
            "line": 847,
            "description": "Return a value used for breaking ties in label rankings. This value will be\nconsistent as long as the label's text is held constant.",
            "itemtype": "method",
            "name": "hash",
            "params": [
                {
                    "name": "string",
                    "description": "string for which to compute a hash value",
                    "type": "String"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "SmartLabel"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 3,
            "description": "How many milliseconds our update methods are allowed to run after a frame\nstarts. One frame at 30FPS is technically 33.3... milliseconds, but this\ngives a bit of extra wiggle room in case the last task in the queue runs\nlong.",
            "class": "FrameUpdate"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 11,
            "description": "Some preset orderings for updates.",
            "class": "FrameUpdate"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 23,
            "description": "Some preset priorities for tasks.",
            "class": "FrameUpdate"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 36,
            "description": "Set this to `true` to print console information about the updates and tasks\nthat are being scheduled.",
            "class": "FrameUpdate"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 42,
            "description": "The frequency with which frame updates will be logged to the console; set this\nto 1 to have all updates shown when they're evaluated, but be warned that this\nwill likely slow your console down significantly.",
            "class": "FrameUpdate"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 60,
            "description": "Create a new frame update that can be submitted to a scheduler.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the update",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "callback",
                            "description": "\n\t\tThe actual function to run every time this update is scheduled for\n\t\ta frame.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "frameCount",
                            "description": "\n\t\tHow many frames this update should run for when it's submitted to\n\t\ta scheduler",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "ordering",
                            "description": "\n\t\tAn ordering value that's used to determine the order in which\n\t\tframe updates will be run within a frame; larger numbers will\n\t\tbe run first",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "supersededBy",
                            "description": "\n\t\tIf this update is scheduled to run in a frame, but another update in\n\t\tthe provided list is also scheduled to run on that frame, then\n\t\tthis update will not be run.",
                            "type": "[FrameUpdate]",
                            "optional": true,
                            "optdefault": "[]"
                        },
                        {
                            "name": "name",
                            "description": "\n\t\tIf provided, an arbitrary name for logging purposes.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "userdata",
                            "description": "\n\t\tArbitrary data that you can store along with this update.",
                            "type": "Any",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "FrameUpdate"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 100,
            "description": "Return the amount of time that this frame update took to execute during\nits most recent execution, in milliseconds. If called during this frame\nupdate, the value returned will be for the previous invocation. If called\nbefore this frame update has been executed at least once, the returned\nvalue is unspecified.",
            "itemtype": "method",
            "name": "lastFrameTime",
            "return": {
                "description": "the previous frame time, in milliseconds",
                "type": "Number"
            },
            "class": "FrameUpdate"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 123,
            "description": "Create a new frame task that can be submitted to a scheduler.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the task",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "callback",
                            "description": "\n\t\tThe actual function to run when this task is scheduled.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "group",
                            "description": "\n\t\tIf provided, a group to which this task will be added when scheduled",
                            "type": "FrameTaskGroup",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "priority",
                            "description": "\n\t\tTasks with higher priority will be taken from the queue before tasks\n\t\twith a lower priority.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "postponeOnAdd",
                            "description": "\n\t\tIf true, this task will not be run until `resumeTask` is called on the\n\t\tscheduler.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "name",
                            "description": "\n\t\tIf provided, an arbitrary name for logging purposes.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "userdata",
                            "description": "\n\t\tArbitrary data that you can store along with this task.",
                            "type": "Any",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "FrameTask"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 169,
            "description": "Return true if this task has been run at least once.",
            "itemtype": "method",
            "name": "isComplete",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FrameTask"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 179,
            "description": "Return the amount of time that this frame task took to execute,\nin milliseconds. If this task has not yet completed, the returned value\nis unspecified.",
            "itemtype": "method",
            "name": "lastFrameTime",
            "return": {
                "description": "the frame time, in milliseconds",
                "type": "Number"
            },
            "class": "FrameTask"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 201,
            "description": "Create a new frame task group.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the task group",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "onComplete",
                            "description": "\n\t\tA callback that will be triggered once every task in this group\n\t\thas been completed. This callback may schedule a task, and the\n\t\tscheduler will run that task in the same frame, if there is still\n\t\tframe time for it.",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "priority",
                            "description": "\n\t\tThe priority of all the tasks in this group.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "postponeOnAdd",
                            "description": "\n\t\tIf true, tasks from this task group will not be run until `resumeTask`\n\t\tis called on the scheduler with this group.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "name",
                            "description": "\n\t\tIf provided, an arbitrary name for logging purposes.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "undefined"
                        },
                        {
                            "name": "userdata",
                            "description": "\n\t\tArbitrary data that you can store along with this task group.",
                            "type": "Any",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "FrameTaskGroup"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 240,
            "description": "Return true if every task in this group has been run at least once.",
            "itemtype": "method",
            "name": "isComplete",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FrameTaskGroup"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 249,
            "description": "Return a list of tasks in this group. This will be a copy of the\nunderlying task group, so it's safe to mutate the group while\niterating over this array.",
            "itemtype": "method",
            "name": "tasks",
            "return": {
                "description": "list of tasks in this group",
                "type": "[FrameTask]"
            },
            "class": "FrameTaskGroup"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 261,
            "description": "Empty this task group. This will trivially satisfy `isComplete`.",
            "itemtype": "method",
            "name": "clear",
            "class": "FrameTaskGroup"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 271,
            "description": "Return one arbitrary incomplete task from this group, or undefined if\nthere are none.",
            "itemtype": "method",
            "name": "_popTask",
            "return": {
                "description": "arbitrary scheduled task",
                "type": "FrameTask"
            },
            "access": "private",
            "tagname": "",
            "class": "FrameTaskGroup"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 295,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the timer",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxMillisecondsPerFrame",
                            "description": "\n    If the time since the beginning of the frame has been less than\n    or equal to this value, then another task may be executed",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "RealTimeTimer"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 310,
            "description": "Begin timing a frame.",
            "itemtype": "method",
            "name": "beginFrame",
            "class": "RealTimeTimer"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 319,
            "description": "If true, there is enough time remaining to execute another task.",
            "itemtype": "method",
            "name": "hasTimeRemaining",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "RealTimeTimer"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 337,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the timer",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "maxTasksPerFrame",
                            "description": "\n    The number of tasks that will be exceuted in a single update call.\n    Can be modified as the `maxTasksPerFrame` property on this boject.",
                            "optional": true,
                            "optdefault": "5"
                        }
                    ]
                }
            ],
            "class": "FixedTimer"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 350,
            "description": "Begin timing a frame.",
            "itemtype": "method",
            "name": "beginFrame",
            "class": "FixedTimer"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 359,
            "description": "If true, there is enough time remaining to execute another task.",
            "itemtype": "method",
            "name": "hasTimeRemaining",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "FixedTimer"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 388,
            "description": "Construct a new `TaskScheduler` with no tasks scheduled.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for the scheduler",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "timer",
                            "description": "\n    Timer that determines whether there is sufficient time left in a frame\n    to continue executing tasks",
                            "optional": true,
                            "optdefault": "new RealTimeTimer()"
                        },
                        {
                            "name": "performance",
                            "description": "\n    If true, this task scheduler will annotate tasks and frame updates with\n    performance information.",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 440,
            "description": "Empty the task scheduler's queue. All tasks in it will be cancelled.",
            "itemtype": "method",
            "name": "clear",
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 465,
            "description": "Destroy this task scheduler and remove all tasks from it.",
            "itemtype": "method",
            "name": "destroy",
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 474,
            "description": "Schedule this task scheduler to execute updates and tasks on the next\navailable animation frame.",
            "itemtype": "method",
            "name": "requestAnimationFrame",
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 486,
            "description": "Run all scheduled updates, and re-schedule another animation frame if any\nscheduled updates still exist. If any scheduled update specifies\n`shouldRunTasksAfterCompletion`, this will also run queued tasks until the\nframe time runs out.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "timestamp",
                    "description": "the current animation time, as returned from\n`performance.now()`; will be automatically filled in by\n`requestAnimationFrame` when it triggers this as a callback",
                    "type": "Number"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 634,
            "description": "Execute all tasks that are currently pending, without regard for the\navailable frame time.",
            "itemtype": "method",
            "name": "flushTasks",
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 646,
            "description": "Return the amount of time elapsed during the last completed frame update,\nin milliseconds. This value is unspecified if the task scheduler's\n`update` method has not yet run or if the scheduler has been cleared.\nIf called during a frame update, this will\nreturn the time elapsed during the previous frame update.",
            "itemtype": "method",
            "name": "lastFrameTime",
            "return": {
                "description": "time elapsed during last frame update, in milliseconds",
                "type": "Number"
            },
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 660,
            "description": "Return a set containing every update that was run during the previous\nframe update. This will be empty if the task scheduler's `update` method\nhas not yet been run or if the scheduler has been cleared.",
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 722,
            "description": "Schedule an update to be run for the next `update.frameCount` frames. If\nthe update already exists in the scheduler, the update's frame count will\nbe refreshed to `update.frameCount`. This will also schedule an animation\nframe to begin processing the update.",
            "itemtype": "method",
            "name": "scheduleUpdate",
            "params": [
                {
                    "name": "task",
                    "description": "the update to schedule",
                    "type": "FrameUpdate"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 737,
            "description": "Schedule a task to be run during a frame update. This will also schedule\nan animation frame to begin processing the task queue.",
            "itemtype": "method",
            "name": "scheduleTask",
            "params": [
                {
                    "name": "task",
                    "description": "the task to schedule",
                    "type": "FrameTask"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 786,
            "description": "If the given update is in the queue, remove it.",
            "itemtype": "method",
            "name": "cancelUpdate",
            "params": [
                {
                    "name": "task",
                    "description": "the update to cancel",
                    "type": "FrameUpdate"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 800,
            "description": "If the given task or group is in the queue, remove it. Cancelling a\ncompleted task is a no-op.\n\nCanceling an individual task will also remove it from its task group, if\nit isn't already complete.",
            "itemtype": "method",
            "name": "cancelTask",
            "params": [
                {
                    "name": "task",
                    "description": "the task to cancel",
                    "type": "FrameTask or FrameTaskGroup"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 856,
            "description": "Set the provided task or group not to run, until it's resumed using `resumeTask`.\n\nTasks that are in a group can't be postponed individually; instead, call\n`postponeTask` with the entire group.",
            "itemtype": "method",
            "name": "postponeTask",
            "params": [
                {
                    "name": "task",
                    "description": "the task to postpone",
                    "type": "FrameTask or FrameTaskGroup"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 911,
            "description": "Allow a postponed task or task group to resume processing. This will also\nrequest an animation frame to allow the resumed task to be processed.\n\nTasks that are in a group can't be resumed individually; instead, call\n`resumeTask` with the entire group.",
            "itemtype": "method",
            "name": "resumeTask",
            "params": [
                {
                    "name": "task",
                    "description": "the task to resume",
                    "type": "FrameTask or FrameTaskGroup"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 965,
            "description": "Change the priority of the given scheduled task or task group.",
            "itemtype": "method",
            "name": "setTaskPriority",
            "params": [
                {
                    "name": "task",
                    "description": "the task whose priority will be changed",
                    "type": "FrameTask or FrameTaskGroup"
                },
                {
                    "name": "priority",
                    "description": "the priority to assign the task",
                    "type": "Number"
                }
            ],
            "class": "TaskScheduler"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1003,
            "itemtype": "method",
            "name": "constructor",
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1012,
            "description": "Return true if the set for the given key contains the provided value.",
            "itemtype": "method",
            "name": "has",
            "params": [
                {
                    "name": "key",
                    "description": "the key whose set to check",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "the value to check",
                    "type": "Any"
                }
            ],
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1023,
            "description": "Return the list of elements at the given key. Make sure not to modify\nit, as it will mess up the total element count.",
            "itemtype": "method",
            "name": "get",
            "params": [
                {
                    "name": "key",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "",
                    "type": "Set(Any)"
                }
            ],
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1035,
            "itemtype": "method",
            "name": "insert",
            "params": [
                {
                    "name": "key",
                    "description": "the key to which another value will be added",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "the value to add to the key's set",
                    "type": "Any"
                }
            ],
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1060,
            "itemtype": "method",
            "name": "delete",
            "params": [
                {
                    "name": "key",
                    "description": "the key at which the value is stored",
                    "type": "Number"
                },
                {
                    "name": "value",
                    "description": "the value to delete",
                    "type": "Any"
                }
            ],
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1076,
            "description": "Remove and return an arbitrary value from the set at the given key.",
            "itemtype": "method",
            "name": "pop",
            "params": [
                {
                    "name": "key",
                    "description": "the key from which to remove a value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "arbitrary value from the given key's set, or undefined if\nthe set at the given key is empty.",
                "type": "Any"
            },
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1103,
            "description": "Remove and return an arbitrary value from the set corresponding to\nthe key with the highest numeric value, using the javascript `<`\noperator.",
            "itemtype": "method",
            "name": "popFromMaxKey",
            "return": {
                "description": "arbitrary value from the highest key's set, or undefined\nif the map is empty",
                "type": "Any"
            },
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1118,
            "description": "Return an iterator over every value in this multimap, at every key.\nMutating the multimap during iteration will result in undefined\nbehaviour.",
            "itemtype": "method",
            "name": "values",
            "return": {
                "description": "iterator over the values in the map",
                "type": "Iterator"
            },
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1156,
            "description": "A list of keys in this set, sorted by numeric value. Not cloned,\nfor efficiency's sake, so please don't mutate it.",
            "itemtype": "method",
            "name": "keys",
            "return": {
                "description": "sorted list of numeric keys in the map",
                "type": "[number]"
            },
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.TaskScheduler.js",
            "line": 1167,
            "description": "The number of elements in this multimap, equal to the sum of the sizes\nof each key's set of values.",
            "itemtype": "property",
            "name": "size  number of elements in this multimap",
            "type": "Number",
            "class": "Multimap"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 82,
            "description": "Category ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another Category with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinCategory"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 105,
            "description": "Locations in this Category.",
            "itemtype": "property",
            "name": "locations",
            "type": "[MappedinLocation]",
            "class": "MappedinCategory"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 158,
            "description": "Location ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another Location with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 197,
            "description": "Polygons this Location is attached to.",
            "itemtype": "property",
            "name": "polygons",
            "type": "[MappedinPolygon]",
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 219,
            "description": "Ranking for this location.",
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 233,
            "description": "Nodes this Location is attached to.",
            "itemtype": "property",
            "name": "nodes",
            "type": "[MappedinNode]",
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 255,
            "description": "Operation hours for nodes attached to this Location.",
            "itemtype": "property",
            "name": "nodeOperationHours",
            "return": {
                "description": "A dictionary which maps {MappedinNode} IDs to their associated operation hours.\n  If a node has no operation hours, it's entry here will be undefined.",
                "type": "Object"
            },
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 269,
            "description": "Parent of this Location, if any. Used in cases where one Location is inside another, more \"important\" Location.",
            "itemtype": "property",
            "name": "parent",
            "type": "MappedinLocation",
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 289,
            "description": "Gets directions from this Location to the target Polygon, Location, Node or array of Nodes.",
            "itemtype": "method",
            "name": "directionsTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode|[MappedinNode]|MappedinPolygon"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be wheelchair accessible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback. See {{#crossLink \"MappedinNode/directionsToCallback:method\"}}{{/crossLink}} for details.",
                    "type": "DirectionsToCallback"
                }
            ],
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 310,
            "description": "Gets the cost (combined distance and weights) and total distance(in meters) from this Location to the target Polygon, Location, Node or array of Nodes.",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode|[MappedinNode]|MappedinPolygon"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be wheelchair accessible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback object with cost and distance to target.",
                    "type": "Error, Object"
                }
            ],
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 331,
            "description": "Directions callback.",
            "itemtype": "method",
            "name": "directionsToCallback",
            "params": [
                {
                    "name": "error",
                    "description": "Error.",
                    "type": "Error"
                },
                {
                    "name": "directions",
                    "description": "Directions response.",
                    "type": "MappedinDirections"
                }
            ],
            "class": "MappedinLocation"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 352,
            "description": "Vortex ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another Vortex with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinVortex"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 400,
            "description": "MapGroup ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another MapGroup with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinMapGroup"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 424,
            "description": "Maps within this MapGroup.",
            "itemtype": "property",
            "name": "maps",
            "type": "[MappedinMap]",
            "class": "MappedinMapGroup"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 468,
            "description": "Map ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another Map with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinMap"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 554,
            "description": "Polygons on this Map.",
            "itemtype": "property",
            "name": "polygons",
            "type": "[MappedinPolygon]",
            "class": "MappedinMap"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 572,
            "description": "Map Group this map belongs to.",
            "itemtype": "property",
            "name": "mapGroup",
            "type": "MappedinMapGroup",
            "class": "MappedinMap"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 598,
            "description": "Node ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another Node with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 607,
            "description": "ID of Map that the Node is located on.",
            "itemtype": "property",
            "name": "map",
            "type": "String",
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 613,
            "description": "X coordinate of Node's position.",
            "itemtype": "property",
            "name": "x",
            "type": "Number",
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 618,
            "description": "Y coordinate of Node's position.",
            "itemtype": "property",
            "name": "y",
            "type": "Number",
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 647,
            "description": "Adjacent Nodes.",
            "itemtype": "property",
            "name": "paths",
            "type": "[MappedinNode]",
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 669,
            "description": "Locations attached to this Node.",
            "itemtype": "property",
            "name": "locations",
            "type": "[MappedinLocation]",
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 695,
            "description": "Calculate the angle between this node and another",
            "itemtype": "method",
            "name": "getAngle",
            "params": [
                {
                    "name": "to",
                    "description": "Other node in angle.",
                    "type": "MappedinNode"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 709,
            "description": "Calculate the distance between this node and another",
            "itemtype": "method",
            "name": "getDistance",
            "params": [
                {
                    "name": "to",
                    "description": "Other node to calculate distance from.",
                    "type": "MappedinNode"
                }
            ],
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 741,
            "description": "Gets directions from this Node to the target Polygon, Location, Node or array of Nodes.",
            "itemtype": "method",
            "name": "directionsTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode|[MappedinNode]|MappedinPolygon"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be wheelchair accessible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback. See {{#crossLink \"MappedinNode/directionsToCallback:method\"}}{{/crossLink}} for details.",
                    "type": "DirectionsToCallback"
                }
            ],
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 839,
            "description": "Gets the cost (combined distance and weights) and total distance(in meters) from this Node to the target Polygon, Location, Node or array of Nodes.",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode|[MappedinNode]|MappedinPolygon"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be wheelchair accessible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback object with cost and distance to target.",
                    "type": "Error, Object"
                }
            ],
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1054,
            "description": "Directions callback.",
            "itemtype": "method",
            "name": "directionsToCallback",
            "params": [
                {
                    "name": "error",
                    "description": "Error.",
                    "type": "Error"
                },
                {
                    "name": "directions",
                    "description": "Directions response.",
                    "type": "MappedinDirections"
                }
            ],
            "class": "MappedinNode"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1347,
            "description": "Total distance of path in meters",
            "itemtype": "property",
            "name": "distance",
            "type": "{Number}",
            "class": "MappedinDirections"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1352,
            "description": "Instructions to display to the user.",
            "itemtype": "property",
            "name": "instructions",
            "type": "{[MappedinDirective]}",
            "class": "MappedinDirections"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1357,
            "description": "Collection of Nodes that form a path.",
            "itemtype": "property",
            "name": "path",
            "type": "{[MappedinNode]}",
            "class": "MappedinDirections"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1363,
            "description": "The source of wayfinding directions. \"Online\" has been deprecated.",
            "itemtype": "property",
            "name": "directionsProvider",
            "type": "{\"online\", \"offline\"}",
            "final": 1,
            "static": 1,
            "class": "MappedinDirections"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1385,
            "description": "Node where instruction takes place.",
            "itemtype": "property",
            "name": "node",
            "type": "{MappedinNode}",
            "class": "MappedinDirective"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1390,
            "description": "The action being performed at a Node. The object contains an {{#crossLink \"MappedinDirective/actionType:property\"}}{{/crossLink}} and if the type is TURN, there is also a {{#crossLink \"MappedinDirective/bearingType:property\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "action",
            "type": "{actionType}",
            "class": "MappedinDirective"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1395,
            "description": "Text Instruction to display to user.",
            "itemtype": "property",
            "name": "instruction",
            "type": "{string}",
            "class": "MappedinDirective"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1401,
            "description": "The possible action types a {{#crossLink \"MappedinDirective\"}}{{/crossLink}} can have.",
            "itemtype": "property",
            "name": "actionType",
            "type": "{DEPARTURE, TAKEVORTEX, TURN, ARRIVAL}",
            "final": 1,
            "static": 1,
            "class": "MappedinDirective"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1415,
            "description": "The possible bearings a {{#crossLink \"MappedinDirective\"}}{{/crossLink}} turn can have.",
            "itemtype": "property",
            "name": "bearingType",
            "type": "{STRAIGHT, RIGHT, SLIGHTRIGHT, LEFT, SLIGHTLEFT}",
            "final": 1,
            "static": 1,
            "class": "MappedinDirective"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1444,
            "description": "Polygon ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another Polygon with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinPolygon"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1453,
            "description": "ID of Map that Polygon is located on.",
            "itemtype": "property",
            "name": "map",
            "type": "String",
            "class": "MappedinPolygon"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1481,
            "description": "Locations attached to the Polygon.",
            "itemtype": "property",
            "name": "locations",
            "type": "[MappedinLocation]",
            "class": "MappedinPolygon"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1506,
            "description": "Polygon's entrance Nodes.",
            "itemtype": "property",
            "name": "entrances",
            "type": "[MappedinNode]",
            "class": "MappedinPolygon"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1527,
            "description": "Ranking for this polygon.",
            "class": "MappedinPolygon"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1540,
            "description": "Gets directions from this Polygon to the target Polygon, Location, Node or array of Nodes.",
            "itemtype": "method",
            "name": "directionsTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode|[MappedinNode]|MappedinPolygon"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be wheelchair accessible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "directionsProvider",
                            "description": "Online directions by default. See {{#crossLink \"MappedinDirections/directionsProvider:property\"}}{{/crossLink}} for more options.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "\"online\""
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback. See {{#crossLink \"MappedinNode/directionsToCallback:method\"}}{{/crossLink}} for details.",
                    "type": "DirectionsToCallback"
                }
            ],
            "class": "MappedinPolygon"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1569,
            "description": "Gets the cost (combined distance and weights) and total distance(in meters) from this Polygon to the target Polygon, Location, Node or array of Nodes.",
            "itemtype": "method",
            "name": "distanceTo",
            "params": [
                {
                    "name": "destination",
                    "description": "Destination.",
                    "type": "MappedinLocation|MappedinNode|[MappedinNode]|MappedinPolygon"
                },
                {
                    "name": "options",
                    "description": "Options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "accessible",
                            "description": "True if directions should be wheelchair accessible.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                },
                {
                    "name": "cb",
                    "description": "Callback object with cost and distance to target.",
                    "type": "Error, Object"
                }
            ],
            "class": "MappedinPolygon"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1647,
            "description": "Theme ID.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinVenue"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1681,
            "description": "Event ID.\n\nThis is the internal Mappedin ID, and can be used for the lifetime of the data you get back from {{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}, but it may not be present in future calls, even if there is another Event with otherwise similar properties.\nAn ID can never be reused if it's, say, accidentally deleted. If something more durable is required, or if the data in the Mappedin CMS is being synced from somewhere else, you should finding things using the externalId property.",
            "itemtype": "property",
            "name": "id",
            "type": "String",
            "class": "MappedinEvent"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1709,
            "description": "Location this Event is occuring at.",
            "itemtype": "property",
            "name": "location",
            "type": "MappedinLocation",
            "class": "MappedinEvent"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1753,
            "class": "MappedinLocationState"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 1774,
            "class": "MappedinLocationState"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2047,
            "description": "Collection of all Categories within the Venue.",
            "itemtype": "property",
            "name": "categories",
            "type": "[MappedinCategory]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2054,
            "description": "Collection of all Locations within the Venue.",
            "itemtype": "property",
            "name": "locations",
            "type": "[MappedinLocation]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2061,
            "description": "Collection of all Maps within the Venue.",
            "itemtype": "property",
            "name": "maps",
            "type": "[MappedinMap]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2068,
            "description": "Collection of all Nodes within the Venue.",
            "itemtype": "property",
            "name": "nodes",
            "type": "[MappedinNode]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2075,
            "description": "Collection of all Polygons within the Venue.",
            "itemtype": "property",
            "name": "polygons",
            "type": "[MappedinPolygon]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2082,
            "description": "Collection of all Events within the Venue.",
            "itemtype": "property",
            "name": "events",
            "type": "[MappedinEvent]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2089,
            "description": "Collection of all MapGroups within the Venue.",
            "itemtype": "property",
            "name": "mapGroups",
            "type": "[MappedinMapGroup]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2096,
            "description": "Collection of all Vortexes within the Venue.",
            "itemtype": "property",
            "name": "vortexes",
            "type": "[MappedinVortex]",
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2195,
            "description": "The possible types of collections of objects you can get from the Venue. To be used to look up items using {{#crossLink \"Mappedin/getCollectionItemById:method\"}}{{/crossLink}}.",
            "itemtype": "property",
            "name": "collectionType",
            "type": "{CATEGORY, EVENT, LOCATION, MAPGROUP, MAP, NODE, POLYGON, VENUE, VORTEX}",
            "final": 1,
            "static": 1,
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2215,
            "description": "Gets an object (Node, Polygon, etc.) if it exists within the Venue by looking up its Mappedin ID or External ID.",
            "itemtype": "method",
            "name": "getCollectionItemById",
            "params": [
                {
                    "name": "name",
                    "description": "{{#crossLink \"Mappedin/collectionType:property\"}}{{/crossLink}} to look up the ID from that collection.",
                    "type": "CollectionType"
                },
                {
                    "name": "id",
                    "description": "Either Mappedin ID or External ID.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "Mappedin"
        },
        {
            "file": "source/Mappedin.getVenue.js",
            "line": 2312,
            "description": "A one stop function to download all of the information you need for a given {{#crossLink \"MappedinVenue\"}}{{/crossLink}}.",
            "itemtype": "method",
            "name": "getVenue",
            "params": [
                {
                    "name": "options",
                    "description": "Initialization options.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "clientId",
                            "description": "OAuth client ID.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "clientSecret",
                            "description": "OAuth client secret.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "perspective",
                            "description": "Perspective name.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "language",
                            "description": "Language name (e.g. en-US).",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "things",
                            "description": "The things object is where you specify what fields you want to download for each object in the Mappedin API. Only specify what you will actually use, to minmimze transfer time. This SDK will ensure it has the 2D or 3D files it needs, and `id` is always included, but it won't download anything extra (like the names of locations) unless you specify it here.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "venue",
                                    "description": "The Venue information you want. 'slug' and 'name' are typical, but you may also want others. Speak to Mappedin to see what is available.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "locations",
                                    "description": "The fields you will be using for any Locations. You probably want at least 'name' and 'type'. You will also probably want 'description' and 'logo', but there can be any number of Location properties and it depends on your Venue and usecase. Talk to Mappedin for more details.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "categories",
                                    "description": "The fields you will use for each Category. Typically 'name' at a minimum, but other common fields are 'description', 'picture', 'sortOrder' or 'parents' (for hierarchical categories) as well.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "maps",
                                    "description": "The fields on each Map you are interested in. You'll probably want one or both of 'name' or 'shortName', and 'elevation' to sort.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "polygons",
                                    "description": "The Polygon fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                },
                                {
                                    "name": "nodes",
                                    "description": "The Node fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "venue",
                            "description": "Venue ID.",
                            "type": "String"
                        },
                        {
                            "name": "includeHidden",
                            "description": "Whether to include 'hidden' objects.",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Mappedin"
            },
            "class": "Mappedin"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 43,
            "params": [
                {
                    "name": "options.minRadius",
                    "description": "The ring around the blue dot will only be drawn if `options.radius` is greater than or equal to this value, in metres. Must be >= 0.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "options.radiusUpdateInterval",
                    "description": "The width of radius update steps, in metres. For example, if interval is 3 and assume `minRadius` is 8, then the radius will be updated on 8, 11, 14, 17, etc. Must be >= 0.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 86,
            "description": "The current state of the 3D blue dots. Null if blue dot is not currently being displayed.",
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 91,
            "description": "The last known radius that was set, in the original metres units.",
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 96,
            "description": "Used to animate the blue dot accuracy ring size change.",
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 101,
            "description": "The last known bearing angle that was set, in degrees.",
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 106,
            "description": "Used to animate the blue dot bearing angle change.",
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 111,
            "description": "The current zoom level, so new dots can be added at the proper size.",
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 117,
            "access": "private",
            "tagname": "Calculates the new radius given the candidate value as well as other relevant parameters. @see constructor",
            "params": [
                {
                    "name": "candidateRadius",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 163,
            "access": "private",
            "tagname": "Update the state of the 3D blue dot, creating blue dots if necessary.",
            "itemtype": "method",
            "name": "update",
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "coordinates",
                            "description": "The lat-long coordinates for the blue dot. Follows the Coordinates Web API.",
                            "type": "Coordinates"
                        },
                        {
                            "name": "bearing",
                            "description": "The angle in degrees around the blue dot at which the bearing indicator should appear.",
                            "type": "Number"
                        },
                        {
                            "name": "radius",
                            "description": "The outer radius of the blue dot, in metres.",
                            "type": "Number"
                        },
                        {
                            "name": "mapId",
                            "description": "The primary map of the blue dot. Specify this or options.map.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "map",
                            "description": "The primary map of the blue dot. Specify this or options.mapId.",
                            "type": "MapObject",
                            "optional": true
                        },
                        {
                            "name": "minRadius",
                            "description": "The ring around the blue dot will only be drawn if `options.radius` is greater than or equal to this value. Must be >= 0.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "minRadiusDelta",
                            "description": "The minimum amount by which the radius must change in order for the blue dot ring radius to be updated. Must be >= 0.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "baseColor",
                            "description": "Base Color of Active Blue Dot that we use to interpolate into other variants",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ],
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-manager.js",
            "line": 369,
            "access": "private",
            "tagname": "Remove the 3D blue dot from the maps.",
            "itemtype": "method",
            "name": "cleanup",
            "class": "BlueDotManager"
        },
        {
            "file": "source/blue-dot-utils.js",
            "line": 85,
            "description": "Generates UV mappings for a 1-dimensional gradient outwards onto a circle about (0,0).",
            "params": [
                {
                    "name": "radius",
                    "description": "The radius of the circle",
                    "type": "Number"
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "source/blue-dot-utils.js",
            "line": 117,
            "description": "Returns an Object3D in the shape resembling an annulus sector.",
            "params": [
                {
                    "name": "theta",
                    "description": "The central angle that defines the sector's arc length.",
                    "type": "Number"
                },
                {
                    "name": "length",
                    "description": "The side length of the sector (outerRadius - innerRadius).",
                    "type": "Number"
                },
                {
                    "name": "rho",
                    "description": "The characteristic radius; the radius of the blue dot; used for centering and shaping.",
                    "type": "Number"
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "source/blue-dot-utils.js",
            "line": 280,
            "description": "Finds which segment of a path of nodes a position is closest to.",
            "class": "Mappedin"
        },
        {
            "file": "source/blue-dot-utils.js",
            "line": 393,
            "description": "Determine the camera state that will look at a given position,\nfor purposes of following a blue dot path.",
            "class": "Mappedin"
        },
        {
            "file": "source/json-scene-loader.js",
            "line": 15,
            "description": "Takes in either an object containing polygons and generates a 3D scene based\non it, or a string URL to fetch those polygons from.",
            "class": "Mappedin"
        },
        {
            "file": "source/utils.js",
            "line": 5,
            "description": "Utils function listing\n\n - scrubMaterial\n - getDeviceID\n - getSessionID\n - getObjectID\n - getObject\n - getBoundingBox\n - getBiggestBoundingBox\n - upackBoundingBox\n - getMapScale\n - throttle -> taken from lodash.js\n - getProjectionScaleFactor\n - getZoom",
            "class": "Mappedin"
        },
        {
            "file": "source/utils.js",
            "line": 279,
            "description": "/*  getProjectionScaleFactor()\n/*  finds the scale ratio between screen coordinates and 3D coordinates (in X-Z plane)\n/*\n\t *                                    R\n\t *                                  /|\n\t *    C : Camera                  /  |\n\t *    PQ : Projection Plane     /    |\n\t *    OR : Origin             /      |\n\t *    F : FOV               /        |\n\t *                      Q /          |\n\t *                      /|           |\n\t *                    /  |           |\n\t *                  /    |           |\n\t *                /      |           |\n\t *              /        |           |\n\t *            / F/2      |           |\n\t *         C ------------P------------ O\n\t *\n\t *\n\t *   ProjectionScaleFactor = ( OR / PQ )\n\t *   PQ = canvasHeight / 2\n\t *   CQ = zoom\n\t *\n\t *   OR / C0 = tan(F/2)\n\t *   so OR = CO * tan(F/2)",
            "class": "Mappedin"
        },
        {
            "file": "source/utils.js",
            "line": 317,
            "description": "C - Camera, OP -- picture plane (canvas), S - origin,\n  QR - front side of maps Bounding Box, F: FOV\n                         Z-axis\n                     R_____|______\n                    /|     |     |\n                  /  |     |     |\n               P/    |     |     | maps BB\n              /|     |     |     |\n            /  |     |     |     |\n          /    |     |     |     |\n        / F    |E    |T    |S    |\n    C /--------|-----|-----|-----|------ orthogonal to Y axis, midpoint of focus maps\n      \\        |     |     |     |\n        \\      |     |     |     |\n          \\    |     |     |     |\n            \\  |     |     |     |\n              \\|     |     |     |\n               O\\    |     |     |\n                  \\  |     |     |\n                    \\|_____|_____|\n                     Q\n\n\n We want to get CS, which is the camera zoom",
            "class": "Mappedin"
        },
        {
            "file": "source/utils.js",
            "line": 417,
            "description": "This function gets the nearest node from the a given position",
            "params": [
                {
                    "name": "nodes",
                    "description": "from which the shortest distance will be calculated",
                    "type": "Array"
                },
                {
                    "name": "position",
                    "description": "(x, y) from which the distance will be calculated",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "node with shortest distance from specified position",
                "type": "Node"
            },
            "class": "Mappedin"
        },
        {
            "file": "source/utils.js",
            "line": 444,
            "description": "2021-03-25 Kade Robertson\n\nHandles potentially dangerous color inputs. All versions of three.js below\n0.125.0 are vulnerable to a ReDoS which can be exploited by passing an rgb()\nor hsl() string with as many empty spaces in the middle as desired.\n\nAs of right now, upgrading will break _all_ products that use the SDK, so instead\nany instances where we could possibly be subject to this attack, the input is\nsanitized.",
            "params": [
                {
                    "name": "color",
                    "description": "Value to sanitize. All other types than string are just returned back.",
                    "type": "Any"
                },
                {
                    "name": "fallback",
                    "description": "Safe color value in case of bad provided value.",
                    "type": "number | THREE.Color"
                }
            ],
            "return": {
                "description": ""
            },
            "class": "Mappedin"
        },
        {
            "file": "Mappedin-common.es.js",
            "line": 12,
            "description": "The possible modes {{#crossLink \"MapView\"}}{{/crossLink}} can be in. Typically you will use TEST, which will run a 3D compatibility test the user loads the page and then load load either the 2D or 3D version of MapView. On subsequent loads, it will use the saved result to avoid running a new test.\nFORCE_TEST will make sure a new test is run and the results are saved, whereas 3D and 2D will force the MapView directly into 2D or 3D mode without checking for compatibility. 2D should always work but some browsers/devices do not have the WebGL support needed for 3D, so be careful.",
            "itemtype": "property",
            "name": "modes",
            "type": "{TEST, 3D, 2D, FORCE_TEST}",
            "final": 1,
            "static": 1,
            "class": "Mappedin"
        },
        {
            "file": "Mappedin-common.es.js",
            "line": 29,
            "description": "This is the typical function to call before instatiating a {{#crossLink \"MapView\"}}{{/crossLink}}. It will either perform a test to determine if the current device is capable of running in 3D mode,\nand store the results, or if prior results are available, just use those. Then, it will setMapView to be the constructor for the proper mode. This lets\nthe developer write their website without having to know or care whether the user is experiencing it in 2D or 3D. The callback you pass into the function will give you\nthe results, however, if you care, and you can also determine it from the `type` property on the MapView you create.\n\nIf you would like to force the test to run again, use the {{#crossLink \"Mappedin/forceTest:method\"}}{{/crossLink}} method instead. Or, if you want to force the user into a specific mode, use {{#crossLink \"Mappedin/force2D:method\"}}{{/crossLink}} or {{#crossLink \"Mappedin/force3D:method\"}}{{/crossLink}} respectively.\nNote while 2D should work for basically anyone, if the user's device/browser does not support WebGL and you call force3D, you will get an exception when you create a MapView object.",
            "itemtype": "method",
            "name": "test3D",
            "params": [
                {
                    "name": "container",
                    "description": "The div to run the test in. Works best if it's the same as where the MapView will go, as the number of pixels being rendered is a factor.",
                    "type": "Div"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the test is complete and either 2D or 3D mode is ready. The callback will be fired with a `result` key, a boolean that will be true if you are in 3D mode, and the result of the benchmark.",
                    "type": "Function"
                },
                {
                    "name": "loadMapViewByMode",
                    "description": "Function to call with test results, typically used to switch map {{#crossLink \"Mappedin/modes:property\"}}{{/crossLink}}.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "Mappedin-common.es.js",
            "line": 60,
            "description": "Forces the Mapview to perform it's 3D test. It attempts to save the result the test is not run again on subsequent loads. This lets you override that behaviour.\nThe callback will be executed when the test is complete and either the 2D or 3D Mapview is loaded.",
            "itemtype": "method",
            "name": "forceTest",
            "params": [
                {
                    "name": "container",
                    "description": "The div to run the test in. Works best if it's the same as where the MapView will go, as the number of pixels being rendered is a factor.",
                    "type": "Div"
                },
                {
                    "name": "callback",
                    "description": "The function to call when the test is complete and either 2D or 3D mode is ready. The callback will be fired with a `result` key, a boolean that will be true if you are in 3D mode, and the result of the benchmark.",
                    "type": "Function"
                },
                {
                    "name": "loadMapViewByMode",
                    "description": "Function to call with test results, typically used to switch map {{#crossLink \"Mappedin/modes:property\"}}{{/crossLink}}.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "Mappedin-common.es.js",
            "line": 138,
            "description": "Once you are in 2D or 3D mode, call this function with the options you need for the Mappedin API, and a callback that will give you a {{#crossLink \"MappedinVenue\"}}{{/crossLink}} populated with all your data.\n\nThe things object parameter is where you specify what fields you want to download for each object in the Mappedin API.\nThis SDK will ensure it has the 2D or 3D files it needs, but it won't download anything extra (like the names of locations) unless you specify it here.\nThis is a typical minimum, though you may have more location properties you are interested in. Talk to Mappedin for more information.\n\n\tthings: {\n\t\tvenue: ['slug', 'name'],\n\t\tlocations: ['name', 'type', 'description', 'icon', 'logo'],\n\t\tcategories: ['name'],\n\t\tmaps: ['name', 'elevation', 'shortName']\n\t}\n\n\nIf you would like to force the test to run again, use the {{#crossLink \"Mappedin/forceTest:method\"}}{{/crossLink}} method instead. Or, if you want to force the user into a specific mode, use {{#crossLink \"Mappedin/force2D:method\"}}{{/crossLink}} or {{#crossLink \"Mappedin/force3D:method\"}}{{/crossLink}} respectively.\nNote while 2D should work for basically anyone, if the user's device/browser does not support WebGL and you call force3D, you will get an exception when you create a MapView object.",
            "itemtype": "method",
            "name": "getVenue",
            "params": [
                {
                    "name": "options",
                    "description": "Any options you need to specify to talk to the Mappedin API.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "clientId",
                            "description": "The client key/ID provided to you by Mappedin to access our API. Contact your Mappedin representative if you do not have one.",
                            "type": "String"
                        },
                        {
                            "name": "clientSecret",
                            "description": "The secret/password that goes along with your ID.",
                            "type": "String"
                        },
                        {
                            "name": "perspective",
                            "description": "The name of the perspective you are using for 2D and 3D. Probably \"Website\". This controls what 3D files or 2D tiles get downloaded, and different persepctives may have different map features enabled/disabled, or have different images.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "perspective2D",
                                    "description": "Use if you have a different perspective to use in 2D mode.",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "perspective3D",
                                    "description": "Use if you have a different perspective to use in 3D mode.",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "venue",
                            "description": "The \"slug\" that identifies the specific Venue you are interested in. Mappedin can tell you what it is. Developer accounts often start with \"api-demo1\".",
                            "type": "String"
                        },
                        {
                            "name": "things",
                            "description": "The things object is where you specify what fields you want to download for each object in the Mappedin API. Only specify what you will actually use, to minmimze transfer time. This SDK will ensure it has the 2D or 3D files it needs, and `id` is always included, but it won't download anything extra (like the names of locations) unless you specify it here.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "venue",
                                    "description": "The Venue information you want. 'slug' and 'name' are typical, but you may also want others. Speak to Mappedin to see what is available.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "locations",
                                    "description": "The fields you will be using for any Locations. You probably want at least 'name' and 'type'. You will also probably want 'description' and 'logo', but there can be any number of Location properties and it depends on your Venue and usecase. Talk to Mappedin for more details.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "categories",
                                    "description": "The fields you will use for each Category. Typically 'name' at a minimum, but other common fields are 'description', 'picture', 'sortOrder' or 'parents' (for hierarchical categories) as well.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "maps",
                                    "description": "The fields on each Map you are interested in. You'll probably want one or both of 'name' or 'shortName', and 'elevation' to sort.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "polygons",
                                    "description": "The Polygon fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                },
                                {
                                    "name": "nodes",
                                    "description": "The Node fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "mode",
                    "description": "one of Mappedin.{{#crossLink \"Mappedin/modes:property\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "This function is called when the Venue data is loaded, or there is a problem.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "If there is an error, you will get it here. Typically this will only be useful for developers when building/testing. It's not usually something a user can deal with.",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "A Mappedin data object with all the data you asked for. It will have a Venue property with a Venue object, and Locations, Categories, Nodes, Maps, and Polygons arrays.",
                            "type": "Mappedin"
                        }
                    ]
                }
            ],
            "class": "Mappedin"
        },
        {
            "file": "Mappedin-node.es.js",
            "line": 34,
            "description": "Once you are in 2D or 3D mode, call this function with the options you need for the Mappedin API, and a callback that will give you a Venue object populated with all your data.\n\nThe things object parameter is where you specify what fields you want to download for each object in the Mappedin API.\nThis SDK will ensure it has the 2D or 3D files it needs, but it won't download anything extra (like the names of locations) unless you specify it here.\nThis is a typical minimum, though you may have more location properties you are interested in. Talk to Mappedin for more information.\n\n\tthings: {\n\t\tvenue: ['slug', 'name'],\n\t\tlocations: ['name', 'type', 'description', 'icon', 'logo'],\n\t\tcategories: ['name'],\n\t\tmaps: ['name', 'elevation', 'shortName']\n\t}\n\n\nIf you would like to force the test to run again, use the forceTest method instead. Or, if you want to force the user into a specific mode, use force2D or force3D respectively.\nNote while 2D should work for basically anyone, if the user's device/browser does not support WebGL and you call force3D, you will get an exception when you create a MapView object.",
            "itemtype": "method",
            "name": "getVenue",
            "params": [
                {
                    "name": "options",
                    "description": "Any options you need to specify to talk to the Mappedin API",
                    "type": "Object",
                    "props": [
                        {
                            "name": "clientId",
                            "description": "The client key/ID provided to you by Mappedin to access our API. Contact your Mappedin representative if you do not have one",
                            "type": "String"
                        },
                        {
                            "name": "clientSecret",
                            "description": "The secret/password that goes along with your ID",
                            "type": "String"
                        },
                        {
                            "name": "perspective",
                            "description": "The name of the perspective you are using for 2D and 3D. Probably \"Website\". This controls what 3D files or 2D tiles get downloaded, and different persepctives may have different map features enabled/disabled, or have different images.",
                            "type": "String",
                            "props": [
                                {
                                    "name": "perspective2D",
                                    "description": "Use if you have a different perspective to use in 2D mode",
                                    "type": "String",
                                    "optional": true
                                },
                                {
                                    "name": "perspective3D",
                                    "description": "Use if you have a different perspective to use in 3D mode",
                                    "type": "String",
                                    "optional": true
                                }
                            ]
                        },
                        {
                            "name": "venue",
                            "description": "The \"slug\" that identifies the specific Venue you are interested in. Mappedin can tell you what it is. Developer accounts often start with \"api-demo1\"",
                            "type": "String"
                        },
                        {
                            "name": "things",
                            "description": "The things object is where you specify what fields you want to download for each object in the Mappedin API. Only specify what you will actually use, to minmimze transfer time. This SDK will ensure it has the 2D or 3D files it needs, and `id` is always included, but it won't download anything extra (like the names of locations) unless you specify it here.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "venue",
                                    "description": "The Venue information you want. 'slug' and 'name' are typical, but you may also want others. Speak to Mappedin to see what is available.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "locations",
                                    "description": "The fields you will be using for any Locations. You probably want at least 'name' and 'type'. You will also probably want 'description' and 'logo', but there can be any number of Location properties and it depends on your Venue and usecase. Talk to Mappedin for more details.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "categories",
                                    "description": "The fields you will use for each Category. Typically 'name' at a minimum, but other common fields are 'description', 'picture', 'sortOrder' or 'parents' (for hierarchical categories) as well.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "maps",
                                    "description": "The fields on each Map you are interested in. You'll probably want one or both of 'name' or 'shortName', and 'elevation' to sort.",
                                    "type": "[String]"
                                },
                                {
                                    "name": "polygons",
                                    "description": "The Polygon fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                },
                                {
                                    "name": "nodes",
                                    "description": "The Node fields you want. The default is probably sufficient.",
                                    "type": "[String]",
                                    "optional": true
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "mode",
                    "description": "One of Mappedin.{{#crossLink \"Mappedin/modes:property\"}}{{/crossLink}}.",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "This function is called when the Venue data is loaded, or there is a problem.",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "If there is an error, you will get it here. Typically this will only be useful for developers when building/testing. It's not usually something a user can deal with.",
                            "type": "String"
                        },
                        {
                            "name": "result",
                            "description": "A Mappedin data object with all the data you asked for. It will have a venue property with a Venue object, and locations, categories, nodes, maps, and polygons arrays",
                            "type": "Mappedin"
                        }
                    ]
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-node.es.js",
            "line": 80,
            "description": "This function will take a single options object combining all options for Mappedin.init and the MapView constructor, and the div the MapView should live in.\nIt returns a Promise that will resolve with the MapView once the 3D test has been performed, the right MapView was loaded, the data has been retrieved from the Mappedin API, and\nthe MapView has been created. It could also fail (mostly if the options you set for the Mappedin API are incorrect).\n\nThis is a convenience function that lets you avoid chaining a bunch of callbacks, calling test3D/force2D/force3D then Mappedin.init then the MapView constructor.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "options",
                    "description": "Takes an object combining all options from Mappedin.init, the MapView constructor, and the Search constructor. If you explictly want to set the 3D mode rather than run the test, it also accepts a `mode` property that can be any of Mappedin.mode",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "Any options from Mappedin.getVenue",
                            "type": "Object"
                        },
                        {
                            "name": "mapview",
                            "description": "Any options from the Mappedin.MapView constructor",
                            "type": "Object"
                        },
                        {
                            "name": "search",
                            "description": "Any options from the Mappedin.Seach constructor.",
                            "type": "Object"
                        },
                        {
                            "name": "firstMapSelector",
                            "description": "If you would like to pick the first map loaded, set this function. It gives you a Venue object, and expects a Mappedin Map or Map Id to be returned. Return venue.defaultMap for the default behaviour. If you return an invalid map, an error will be logged to the console and an arbitrary map will be loaded.",
                            "type": "Function"
                        }
                    ]
                },
                {
                    "name": "container",
                    "description": "The HTML element the Mapview will live in.",
                    "type": "Div"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.es.js",
            "line": 68,
            "description": "Forces Mapview into 2D mode.",
            "itemtype": "method",
            "name": "force2D",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when the Mapview is finished loading.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.es.js",
            "line": 81,
            "description": "Forces Mapview into 3D mode.",
            "itemtype": "method",
            "name": "force3D",
            "params": [
                {
                    "name": "callback",
                    "description": "The function to call when 3D mode is ready.",
                    "type": "Function"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "Mappedin-web.es.js",
            "line": 112,
            "description": "This function will take a single options object combining all options for Mappedin.init and the MapView constructor, and the div the MapView should live in.\nIt returns a Promise that will resolve with the MapView once the 3D test has been performed, the right MapView was loaded, the data has been retrieved from the Mappedin API, and\nthe MapView has been created. It could also fail (mostly if the options you set for the Mappedin API are incorrect).\n\nThis is a convenience function that lets you avoid chaining a bunch of callbacks, calling test3D/force2D/force3D then Mappedin.init then the MapView constructor.",
            "itemtype": "method",
            "name": "initialize",
            "params": [
                {
                    "name": "options",
                    "description": "Takes an object combining all options from Mappedin.init, the MapView constructor, and the Search constructor. If you explictly want to set the 3D mode rather than run the test, it also accepts a `mode` property that can be any of Mappedin.{{#crossLink \"Mappedin/modes:property\"}}{{/crossLink}}.",
                    "type": "Object",
                    "props": [
                        {
                            "name": "venue",
                            "description": "Any options from Mappedin.{{#crossLink \"Mappedin/getVenue:method\"}}{{/crossLink}}.",
                            "type": "Object",
                            "props": [
                                {
                                    "name": "useVenueBundle",
                                    "description": "Use single Venue Bundle to download venue data",
                                    "type": "Object"
                                },
                                {
                                    "name": "bundleBaseUri",
                                    "description": "Override the URL that returns the bundle venue data file. Typically used for environments with a proxy and works only when useVenueBundle is set",
                                    "type": "Object"
                                }
                            ]
                        },
                        {
                            "name": "mapview",
                            "description": "Any options from the {{#crossLink \"MapView\"}}{{/crossLink}} constructor.",
                            "type": "Object"
                        },
                        {
                            "name": "search",
                            "description": "Any options from the {{#crossLink \"Search\"}}{{/crossLink}} constructor.",
                            "type": "Object"
                        },
                        {
                            "name": "firstMapSelector",
                            "description": "If you would like to pick the first Map loaded, set this function. It gives you a {{#crossLink \"MappedinVenue\"}}{{/crossLink}} object, and expects a {{#crossLink \"MappedinMap\"}}{{/crossLink}} or Map Id to be returned. Return venue.defaultMap for the default behaviour. If you return an invalid Map, an error will be logged to the console and an arbitrary Map will be loaded.",
                            "type": "Function"
                        }
                    ]
                },
                {
                    "name": "container",
                    "description": "The HTML element the Mapview will live in.",
                    "type": "Div"
                }
            ],
            "class": "Mappedin",
            "module": "Mappedin"
        },
        {
            "file": "service-worker.js",
            "line": 2,
            "description": "Offline fallback service worker\n\nThis service worker is designed for offline fallback mode. If you have a network connection at all, it will get the most recent data and use that. If the network is unavailable, it will use the last downloaded version.\nIt has special logic to handle the paging behaviour from the Mappedin API, as a workaround for a weird bug with XHR and Service Workers where \"unsafe\" headers are available in fetch but not XHR.\n\nNOTE: Using this with the Mappedin Web SDK will ensure all the resources the SDK needs are available (since it downloads everything up front), but if you want icons/logos/images from Location objects you will need to ensure your app also\ntries to download them up front as well. If you do, they will be automatically cached.\n\nNOTE2: This will cache all network traffic (which could give you offline support for free for other parts of your app) If you want to limit it to only traffic for the SDK you will have structure your app so the Mappedin\ncode lives in it's own folder, and you register the service worker to only handle requests from things in that folder. Read about Service Workers for more details.",
            "class": "",
            "module": "Mappedin"
        },
        {
            "file": "web-demo-utils.js",
            "line": 5,
            "description": "Hook the polygon color changing methods with behaviour affecting smart label prioritization",
            "class": "",
            "module": "Mappedin"
        },
        {
            "file": "web-demo-utils.js",
            "line": 73,
            "description": "Colors used by the code that performs pathing tests, including path cost.",
            "class": "",
            "module": "Mappedin"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.Color.js:56"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.DebugUI.js:831"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.DebugUI.js:886"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.MapManager.js:368"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.MapboxOutdoorContext.js:1099"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.MultiFloorView.js:273"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Navigator.js:110"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Navigator.js:134"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Navigator.js:413"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Navigator.js:566"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Navigator.js:616"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Navigator.js:690"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Search.js:242"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.Search.js:321"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.SmartLabel.js:847"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.getVenue.js:255"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:289"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:310"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.getVenue.js:331"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:695"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.getVenue.js:695"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:709"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:741"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:839"
        },
        {
            "message": "replacing incorrect tag: function with method",
            "line": " source/Mappedin.getVenue.js:1054"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:1540"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:1569"
        },
        {
            "message": "unknown tag: name",
            "line": " source/Mappedin.getVenue.js:2215"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.getVenue.js:2215"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/Mappedin.getVenue.js:2312"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/utils.js:417"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " source/utils.js:444"
        },
        {
            "message": "Missing item type\nAngle towards [0, 1] is 0\nAngle towards [1, 0] is Math.PI / 2",
            "line": " __tests__/blue-dot-utils.test.js:83"
        },
        {
            "message": "Missing item type\nGenerate a unique slug.",
            "line": " docs/assets/vendor/github-slugger/slugger.js:12"
        },
        {
            "message": "Missing item type\nReset - Forget all previous slugs",
            "line": " docs/assets/vendor/github-slugger/slugger.js:37"
        },
        {
            "message": "Missing item type\nGenerate a unique slug.",
            "line": " mappedin-docs-theme/assets/vendor/github-slugger/slugger.js:12"
        },
        {
            "message": "Missing item type\nReset - Forget all previous slugs",
            "line": " mappedin-docs-theme/assets/vendor/github-slugger/slugger.js:37"
        },
        {
            "message": "Missing item type\nHack for:\nhttps://github.com/yui/yuidoc/issues/198\n\nUsage:\n  {{#crossLinkWrapper type}}{{#crossLink type}}{{/crossLink}}{{/crossLinkWrapper}}",
            "line": " mappedin-docs-theme/helpers/helpers.js:59"
        },
        {
            "message": "Missing item type\nLoads a Wavefront .mtl file specifying materials",
            "line": " source/externals/MTLLoader.js:17"
        },
        {
            "message": "Missing item type\nParses loaded MTL file",
            "line": " source/externals/MTLLoader.js:67"
        },
        {
            "message": "Missing item type\nCreate a new THREE-MTLLoader.MaterialCreator",
            "line": " source/externals/MTLLoader.js:121"
        },
        {
            "message": "Missing item type",
            "line": " source/externals/OBJLoader.js:11"
        },
        {
            "message": "Missing item type",
            "line": " source/externals/promise.js:10"
        },
        {
            "message": "Missing item type\nConfiguration parameter: time in milliseconds after which a\npending AJAX request is considered unresponsive and is\naborted. Useful to deal with bad connectivity (e.g. on a\nmobile network). A 0 value disables AJAX timeouts.\n\nAborted requests resolve the promise with a ETIMEOUT error\ncode.",
            "line": " source/externals/promise.js:196"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.Analytics.js:123"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.CameraControls.InputSet.js:18"
        },
        {
            "message": "Missing item type\nAn object representing a touch event anchored to a point along the z=0 plane.",
            "line": " source/Mappedin.CameraControls.TouchAnchor.js:3"
        },
        {
            "message": "Missing item type\nignoreZoomLimits; use with caution for special effects",
            "line": " source/Mappedin.CameraControls.js:162"
        },
        {
            "message": "Missing item type\nThe amount the camera is shifted up/down\n(corresponds to scroll amount in multifloor mode)\n100% == camera is as far up as it will go\n0% == camera is as far down as it will go",
            "line": " source/Mappedin.CameraControls.js:754"
        },
        {
            "message": "Missing item type\nReturns whether the maps are scrolled to bottom",
            "line": " source/Mappedin.CameraControls.js:773"
        },
        {
            "message": "Missing item type\nReturns whether the maps are scrolled to top",
            "line": " source/Mappedin.CameraControls.js:786"
        },
        {
            "message": "Missing item type\nCamera layers that are used for rendering, which are assigned to objects\nin the scene representation and used for multi-buffer rendering. By\ndefault, all three.js objects are created on the `STATIC` layer.",
            "line": " source/Mappedin.CameraLayers.js:1"
        },
        {
            "message": "Missing item type\nCreate a 3D plane object that can serve as a stencil sheet.",
            "line": " source/Mappedin.ClosedPolygonManager.js:20"
        },
        {
            "message": "Missing item type\nConvert the given RGB triple to HSV. The components must be in\nthe range [0, 1].",
            "line": " source/Mappedin.Color.js:3"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.ConnectionMarker.js:26"
        },
        {
            "message": "Missing item type\nCreate a new UI element that can be added to the DOM to display\nthe performance of recorded tasks.",
            "line": " source/Mappedin.DebugUI.js:43"
        },
        {
            "message": "Missing item type\nReturn a new `PerformanceEntry` showing the performance characteristics\nof the named task.",
            "line": " source/Mappedin.DebugUI.js:427"
        },
        {
            "message": "Missing item type\nReturn a new `LineGraph` displaying information from the given list of\ntime series.",
            "line": " source/Mappedin.DebugUI.js:596"
        },
        {
            "message": "Missing item type\nReturn the number of accumulated values in this time series. Will never\nexceed `LINE_GRAPH_WINDOW_SIZE`.",
            "line": " source/Mappedin.DebugUI.js:820"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.FlippableImage.js:3"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.HoverLabel.js:1"
        },
        {
            "message": "Missing item type\nThis can be used to invoke a callback function for _every_ set map invocation.",
            "line": " source/Mappedin.MapManager.js:135"
        },
        {
            "message": "Missing item type\nScroll maps up\nThis will shift maps down to show next one (above)",
            "line": " source/Mappedin.MapManager.js:594"
        },
        {
            "message": "Missing item type\nScroll maps down\nThis will shift maps up to show next one (below)",
            "line": " source/Mappedin.MapManager.js:607"
        },
        {
            "message": "Missing item type\nLoad the map, if it's not already loaded. Returns the old promise if it's already done, so you can safely call it whenever needed.\n\nIf needed, this could be modified to\n\nReturns a Promise that will be Done when the OBJ, MTL and textures have been downloaded, and the objectsDictionary has been generated.",
            "line": " source/Mappedin.MapObject.js:236"
        },
        {
            "message": "Missing item type\nReturn true if this map has been loaded to the point where it can be\nmanipulated as a complete object. In synchronous mode, this requires all\nloading tasks to be completed, but in async mode, only high-priority\ntasks (adding polygons to the world) have to be completed.",
            "line": " source/Mappedin.MapObject.js:407"
        },
        {
            "message": "Missing item type\nReturn true if this map has been loaded to the point where the only tasks\nremaining are marker tasks.",
            "line": " source/Mappedin.MapObject.js:426"
        },
        {
            "message": "Missing item type\nA function that should be called when the map is made visible, in order\nto kick off its tasks.",
            "line": " source/Mappedin.MapObject.js:442"
        },
        {
            "message": "Missing item type\nA function that should be called when the map is made invisible, in order\nto postpone its tasks.",
            "line": " source/Mappedin.MapObject.js:467"
        },
        {
            "message": "Missing item type\nQueue a task on this map that will be executed when the high and low\npriority tasks have been processed.",
            "line": " source/Mappedin.MapObject.js:492"
        },
        {
            "message": "Missing item type\nQueue a task on this map that must be completed before the map will be\nconsidered `isReady` in synchronous loading mode.",
            "line": " source/Mappedin.MapObject.js:509"
        },
        {
            "message": "Missing item type\nQueue a task on this map that will be queued when the map is loaded, or\nimmediately if the map has already been loaded.",
            "line": " source/Mappedin.MapObject.js:523"
        },
        {
            "message": "Missing item type\nQueue a task on this map that must be completed before the map will be\nconsidered `isReady`, and will be evaluated before any low-priority\ntasks.",
            "line": " source/Mappedin.MapObject.js:538"
        },
        {
            "message": "Missing item type\nCalled when a task group that may be required for map loading completes,\nto see if all the relevant task groups have been completed.",
            "line": " source/Mappedin.MapObject.js:726"
        },
        {
            "message": "Missing item type\nCalled when the root ThreeJS object has been created, and child elements\nmay be added.",
            "line": " source/Mappedin.MapObject.js:747"
        },
        {
            "message": "Missing item type\nZoom out to show the entire Map.",
            "line": " source/Mappedin.MapView.js:157"
        },
        {
            "message": "Missing item type\nSet the padding to be used in future zoom calls.",
            "line": " source/Mappedin.MapView.js:163"
        },
        {
            "message": "Missing item type\nResets the MapView to the default state.",
            "line": " source/Mappedin.MapView.js:592"
        },
        {
            "message": "Missing item type\nCreate a font for use in 3D by passing in a JSON object generated from https://gero3.github.io/facetype.js/\nIgnored in 2D, retuning null",
            "line": " source/Mappedin.MapView.js:655"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.MapView2D.Marker.js:7"
        },
        {
            "message": "Missing item type\nSimple utility function to calculate the maximum scroll bounds for our map so Leaflet\ndoes not scroll outside the map bounds",
            "line": " source/Mappedin.MapView2D.js:391"
        },
        {
            "message": "Missing item type\nTakes Mappedin Polygon data creates the corrisponding Leaflet polygon in the\nmap's frame of reference. Each Mappedin polygon should only have one Leaflet\npolygon. Use highlightPolygon to change the styles.",
            "line": " source/Mappedin.MapView2D.js:438"
        },
        {
            "message": "Missing item type\nLabels a specific polygon (or area of 3D space) with a text label that lives in 3D space.\nThat means it will be smaller when the camera is further away, and the angle you see it at will change with the camera.\nThe text will flip 180 degress when the camera rotates so it's never totally upside-down.\n\nPossible options = {\n\tpolygon - The polygon to make a label for\n\tcanvasBounds - Optional, to do this without a real Mappedin Polygon\n\theight - If you don't have a real polygon, you will need to set a height\n\ttext - The full name text to make the label\n\tshortText - The short name text to make the label\n\tmargin - The amount of space to leave before starting the text\n\tcolor - A optional special color if you don't want to use mapView.colors.text\n\tfontSize - How big to make the font. Defaults to 12\n\tfont - A THREE.Font object, if you have your own font you want to use.\n\tscaleMin - What percentage we can shrink the label to if it won't fit at 100%\n\tscaleStep - How much to decrement the scale each time it doesn't fit, so we don't end up with too many different font sizes\n}\n\nYou must provide AT LEAST text and either polygon or canvasBounds + height.",
            "line": " source/Mappedin.MapView2D.js:901"
        },
        {
            "message": "Missing item type\nCreate a transform that will be centered at the given position and use\nthe provided map parameters.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:65"
        },
        {
            "message": "Missing item type\nPrint some debug status for this outdoor context.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:633"
        },
        {
            "message": "Missing item type\nCreate a transform that will be centered at the given position and use\nthe provided map parameters.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:769"
        },
        {
            "message": "Missing item type\nGiven a point within the OpenGL clip space, convert that to the\ncorresponding Mercator projection point in the z=0 plane.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:983"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.MapboxOutdoorContext.js:1065"
        },
        {
            "message": "Missing item type\nReturn all the tiles that are visible at this camera transform.\nThis code is copied with modifications from `mapbox-gl/geo/transform.js'.\n\nThis is used in two places: The `SourceCache` uses it from within the\nmapbox SDK code to determine which tiles it should be trying to load into\nmemory, and we use it in `TileRenderer` to determine which tiles are\nactually visible to ensure they get rendered.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:1099"
        },
        {
            "message": "Missing item type\nConstruct a new `TileRenderer` that will render to the given WebGL\ncontext.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:1168"
        },
        {
            "message": "Missing item type\nDump rendering state.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:1621"
        },
        {
            "message": "Missing item type\n2020/01/09 Terence Dickson\n\nThree.js' vertex attributes aren't correctly restored after we do our own\nWebGL boogie, so it's necessary to record their values and restore them\nafter we're finished rendering.\n\nFor some reason, this manifests as distorted canvas bounds labels on\nFirefox; I didn't see any issues on Chrome.",
            "line": " source/Mappedin.MapboxOutdoorContext.js:1845"
        },
        {
            "message": "Missing item type\nDisplay 2D screen projections of each 3D map object in the journey. Useful for drawing 2D elements on screen.",
            "line": " source/Mappedin.Navigator.js:110"
        },
        {
            "message": "Missing item type\nFocus on the nodes on the current map.",
            "line": " source/Mappedin.Navigator.js:602"
        },
        {
            "message": "Missing item type\nTasks that can be submitted to the renderer. The `STATIC_AND_ANIMATED` task\nis equivalent to a full re-render.",
            "line": " source/Mappedin.RenderTasks.js:1"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.Renderer.js:30"
        },
        {
            "message": "Missing item type\nDispose of the renderer.",
            "line": " source/Mappedin.Renderer.js:290"
        },
        {
            "message": "Missing item type\nDispose of the renderer and its buffers.",
            "line": " source/Mappedin.Renderer.js:491"
        },
        {
            "message": "Missing item type\nCreate a new SmartLabelBatchCreator instance.",
            "line": " source/Mappedin.SmartLabel.js:51"
        },
        {
            "message": "Missing item type\nReset internal data structures used for batching.",
            "line": " source/Mappedin.SmartLabel.js:79"
        },
        {
            "message": "Missing item type\nAdd to the batch.",
            "line": " source/Mappedin.SmartLabel.js:91"
        },
        {
            "message": "Missing item type\nHow many milliseconds our update methods are allowed to run after a frame\nstarts. One frame at 30FPS is technically 33.3... milliseconds, but this\ngives a bit of extra wiggle room in case the last task in the queue runs\nlong.",
            "line": " source/Mappedin.TaskScheduler.js:3"
        },
        {
            "message": "Missing item type\nSome preset orderings for updates.",
            "line": " source/Mappedin.TaskScheduler.js:11"
        },
        {
            "message": "Missing item type\nSome preset priorities for tasks.",
            "line": " source/Mappedin.TaskScheduler.js:23"
        },
        {
            "message": "Missing item type\nSet this to `true` to print console information about the updates and tasks\nthat are being scheduled.",
            "line": " source/Mappedin.TaskScheduler.js:36"
        },
        {
            "message": "Missing item type\nThe frequency with which frame updates will be logged to the console; set this\nto 1 to have all updates shown when they're evaluated, but be warned that this\nwill likely slow your console down significantly.",
            "line": " source/Mappedin.TaskScheduler.js:42"
        },
        {
            "message": "Missing item type\nCreate a new frame update that can be submitted to a scheduler.",
            "line": " source/Mappedin.TaskScheduler.js:60"
        },
        {
            "message": "Missing item type\nCreate a new frame task that can be submitted to a scheduler.",
            "line": " source/Mappedin.TaskScheduler.js:123"
        },
        {
            "message": "Missing item type\nCreate a new frame task group.",
            "line": " source/Mappedin.TaskScheduler.js:201"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.TaskScheduler.js:295"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.TaskScheduler.js:337"
        },
        {
            "message": "Missing item type\nConstruct a new `TaskScheduler` with no tasks scheduled.",
            "line": " source/Mappedin.TaskScheduler.js:388"
        },
        {
            "message": "Missing item type\nReturn a set containing every update that was run during the previous\nframe update. This will be empty if the task scheduler's `update` method\nhas not yet been run or if the scheduler has been cleared.",
            "line": " source/Mappedin.TaskScheduler.js:660"
        },
        {
            "message": "Missing item type\nRanking for this location.",
            "line": " source/Mappedin.getVenue.js:219"
        },
        {
            "message": "Missing item type\nRanking for this polygon.",
            "line": " source/Mappedin.getVenue.js:1527"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.getVenue.js:1753"
        },
        {
            "message": "Missing item type",
            "line": " source/Mappedin.getVenue.js:1774"
        },
        {
            "message": "Missing item type",
            "line": " source/blue-dot-manager.js:43"
        },
        {
            "message": "Missing item type\nThe current state of the 3D blue dots. Null if blue dot is not currently being displayed.",
            "line": " source/blue-dot-manager.js:86"
        },
        {
            "message": "Missing item type\nThe last known radius that was set, in the original metres units.",
            "line": " source/blue-dot-manager.js:91"
        },
        {
            "message": "Missing item type\nUsed to animate the blue dot accuracy ring size change.",
            "line": " source/blue-dot-manager.js:96"
        },
        {
            "message": "Missing item type\nThe last known bearing angle that was set, in degrees.",
            "line": " source/blue-dot-manager.js:101"
        },
        {
            "message": "Missing item type\nUsed to animate the blue dot bearing angle change.",
            "line": " source/blue-dot-manager.js:106"
        },
        {
            "message": "Missing item type\nThe current zoom level, so new dots can be added at the proper size.",
            "line": " source/blue-dot-manager.js:111"
        },
        {
            "message": "Missing item type",
            "line": " source/blue-dot-manager.js:117"
        },
        {
            "message": "Missing item type\nGenerates UV mappings for a 1-dimensional gradient outwards onto a circle about (0,0).",
            "line": " source/blue-dot-utils.js:85"
        },
        {
            "message": "Missing item type\nReturns an Object3D in the shape resembling an annulus sector.",
            "line": " source/blue-dot-utils.js:117"
        },
        {
            "message": "Missing item type\nFinds which segment of a path of nodes a position is closest to.",
            "line": " source/blue-dot-utils.js:280"
        },
        {
            "message": "Missing item type\nDetermine the camera state that will look at a given position,\nfor purposes of following a blue dot path.",
            "line": " source/blue-dot-utils.js:393"
        },
        {
            "message": "Missing item type\nTakes in either an object containing polygons and generates a 3D scene based\non it, or a string URL to fetch those polygons from.",
            "line": " source/json-scene-loader.js:15"
        },
        {
            "message": "Missing item type\nUtils function listing\n\n - scrubMaterial\n - getDeviceID\n - getSessionID\n - getObjectID\n - getObject\n - getBoundingBox\n - getBiggestBoundingBox\n - upackBoundingBox\n - getMapScale\n - throttle -> taken from lodash.js\n - getProjectionScaleFactor\n - getZoom",
            "line": " source/utils.js:5"
        },
        {
            "message": "Missing item type\n/*  getProjectionScaleFactor()\n/*  finds the scale ratio between screen coordinates and 3D coordinates (in X-Z plane)\n/*\n\t *                                    R\n\t *                                  /|\n\t *    C : Camera                  /  |\n\t *    PQ : Projection Plane     /    |\n\t *    OR : Origin             /      |\n\t *    F : FOV               /        |\n\t *                      Q /          |\n\t *                      /|           |\n\t *                    /  |           |\n\t *                  /    |           |\n\t *                /      |           |\n\t *              /        |           |\n\t *            / F/2      |           |\n\t *         C ------------P------------ O\n\t *\n\t *\n\t *   ProjectionScaleFactor = ( OR / PQ )\n\t *   PQ = canvasHeight / 2\n\t *   CQ = zoom\n\t *\n\t *   OR / C0 = tan(F/2)\n\t *   so OR = CO * tan(F/2)",
            "line": " source/utils.js:279"
        },
        {
            "message": "Missing item type\nC - Camera, OP -- picture plane (canvas), S - origin,\n  QR - front side of maps Bounding Box, F: FOV\n                         Z-axis\n                     R_____|______\n                    /|     |     |\n                  /  |     |     |\n               P/    |     |     | maps BB\n              /|     |     |     |\n            /  |     |     |     |\n          /    |     |     |     |\n        / F    |E    |T    |S    |\n    C /--------|-----|-----|-----|------ orthogonal to Y axis, midpoint of focus maps\n      \\        |     |     |     |\n        \\      |     |     |     |\n          \\    |     |     |     |\n            \\  |     |     |     |\n              \\|     |     |     |\n               O\\    |     |     |\n                  \\  |     |     |\n                    \\|_____|_____|\n                     Q\n\n\n We want to get CS, which is the camera zoom",
            "line": " source/utils.js:317"
        },
        {
            "message": "Missing item type\nThis function gets the nearest node from the a given position",
            "line": " source/utils.js:417"
        },
        {
            "message": "Missing item type\n2021-03-25 Kade Robertson\n\nHandles potentially dangerous color inputs. All versions of three.js below\n0.125.0 are vulnerable to a ReDoS which can be exploited by passing an rgb()\nor hsl() string with as many empty spaces in the middle as desired.\n\nAs of right now, upgrading will break _all_ products that use the SDK, so instead\nany instances where we could possibly be subject to this attack, the input is\nsanitized.",
            "line": " source/utils.js:444"
        },
        {
            "message": "Missing item type\nOffline fallback service worker\n\nThis service worker is designed for offline fallback mode. If you have a network connection at all, it will get the most recent data and use that. If the network is unavailable, it will use the last downloaded version.\nIt has special logic to handle the paging behaviour from the Mappedin API, as a workaround for a weird bug with XHR and Service Workers where \"unsafe\" headers are available in fetch but not XHR.\n\nNOTE: Using this with the Mappedin Web SDK will ensure all the resources the SDK needs are available (since it downloads everything up front), but if you want icons/logos/images from Location objects you will need to ensure your app also\ntries to download them up front as well. If you do, they will be automatically cached.\n\nNOTE2: This will cache all network traffic (which could give you offline support for free for other parts of your app) If you want to limit it to only traffic for the SDK you will have structure your app so the Mappedin\ncode lives in it's own folder, and you register the service worker to only handle requests from things in that folder. Read about Service Workers for more details.",
            "line": " service-worker.js:2"
        },
        {
            "message": "Missing item type\nHook the polygon color changing methods with behaviour affecting smart label prioritization",
            "line": " web-demo-utils.js:5"
        },
        {
            "message": "Missing item type\nColors used by the code that performs pathing tests, including path cost.",
            "line": " web-demo-utils.js:73"
        }
    ]
}